<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Shubham Gupta</title>
<link>https://shubhamg.in/</link>
<atom:link href="https://shubhamg.in/index.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.7.32</generator>
<lastBuildDate>Tue, 05 Aug 2025 00:00:00 GMT</lastBuildDate>
<item>
  <title>Cracking the Anthropic CTF</title>
  <dc:creator>Shubham Gupta</dc:creator>
  <link>https://shubhamg.in/posts/2025-08-05-anthropic-bsides-ctf.html</link>
  <description><![CDATA[ 






<p>In May last year, I spotted a tweet from an Anthropic engineer announcing the BSides CTF:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://shubhamg.in/posts/anthropic_bsides_ctf/tweet.png" class="img-fluid figure-img"></p>
<figcaption>CTF Announcement</figcaption>
</figure>
</div>
<p>I’m no CTF expert/practitioner, but I tackled a few during undergrad, with a focus on forensic puzzles. This event mixed steganography with some neural-network trivia, so it sounded like the perfect weekend project.</p>
<p>The challenge is available via the Wayback Machine at <a href="https://web.archive.org/web/20240603200949/https://anthropic-at-bsides.com">Anthropic AI Bsides</a>. Do try it out before reading further!</p>
<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Feel free to skip ahead to the start of the challenge if you’re already familiar with CTFs.</p>
<section id="ctf" class="level2">
<h2 class="anchored" data-anchor-id="ctf">CTF?</h2>
<p>CTF stands for <strong>Capture The Flag</strong>, a style of cybersecurity competition where solving technical puzzles reveals a short secret string—the <em>flag</em> - that you submit for points.<br>
Think of it as digital hide-and-seek: organizers hide vulnerabilities, encrypted messages, or cleverly obfuscated code; competitors hunt them down.</p>
</section>
<section id="ctf-styles" class="level2">
<h2 class="anchored" data-anchor-id="ctf-styles">CTF Styles</h2>
<p>Not every competition runs the same playbook. Most events fall into one of three flavours:</p>
<section id="jeopardy" class="level3">
<h3 class="anchored" data-anchor-id="jeopardy">Jeopardy</h3>
<p>A scoreboard with dozens of stand-alone puzzles. Solve any task in any order to reveal a <em>static</em> flag worth fixed points. This style is workshop / learning-friendly.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://shubhamg.in/posts/anthropic_bsides_ctf/jeopardy.png" class="img-fluid figure-img"></p>
<figcaption>Jeopardy-style CTF. Source: <a href="https://dylandsouza.tech/cybersec-gamified/">Dylan Dsouza</a></figcaption>
</figure>
</div>
</section>
<section id="attack-defense" class="level3">
<h3 class="anchored" data-anchor-id="attack-defense">Attack-Defense</h3>
<p>Each team gets an identical (and intentionally vulnerable) service. Every “tick” you:</p>
<ul>
<li>Keep <em>your</em> instance alive for <em>defence points</em></li>
<li>Exploit everyone else to steal a fresh dynamic flag for <em>attack points</em></li>
</ul>
<p>Patch too aggressively and you might brick your own service. Patch too cautiously and you’ll bleed flags. It’s a fast-paced, chaotic, team-centric format.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://shubhamg.in/posts/anthropic_bsides_ctf/ad.png" class="img-fluid figure-img"></p>
<figcaption>Attack-Defense CTF. Source: <a href="https://tlualgosec.com/posts/forensics-in-ctf/">TAS Blog</a></figcaption>
</figure>
</div>
</section>
<section id="mixed-custom" class="level3">
<h3 class="anchored" data-anchor-id="mixed-custom">Mixed / Custom</h3>
<p>Organisers mash the two together or add story-driven twists (e.g., live red-team/blue-team, lock-picking, hardware). This is a YOLO mode CTF.</p>
<p>Most community events, including BSides, opt for classic Jeopardy because it scales well and newcomers can jump straight in. But if you ever see “A/D” or “King-of-the-Hill” on the announcement banner, expect the wilder second style.</p>
</section>
</section>
<section id="flags" class="level2">
<h2 class="anchored" data-anchor-id="flags">Flags</h2>
<p>Flags are just short strings that prove you solved or exploited something. They come in many house styles—<code>CTF{leet_hax0r}</code>, <code>FLAG-6f7b5e…</code>, <code>BSides[you_found_it]</code>—but the portal will show an example on each challenge page.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://shubhamg.in/posts/anthropic_bsides_ctf/flag.png" class="img-fluid figure-img"></p>
<figcaption>Flags</figcaption>
</figure>
</div>
<p>In A/D games a new flag is generated every round, so automation matters.</p>
<hr>
<p>With that primer out of the way, let’s dive into the challenge!</p>
</section>
</section>
<section id="exploration" class="level1">
<h1>Initial Exploration</h1>
<p>As soon as we open the website, we’re greeted with a fairly simple page.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://shubhamg.in/posts/anthropic_bsides_ctf/landing.png" class="img-fluid figure-img"></p>
<figcaption>Landing Page</figcaption>
</figure>
</div>
<p>After clicking around the page a bit, I looked through the source code and found this:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode html code-with-copy"><code class="sourceCode html"><span id="cb1-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">div</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> class</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fixed w-full h-full bg-[url('stego.png')] opacity-50 -z-10"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">div</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;!-- sometimes, the answers you seek are in plain sight --&gt;</span></span></code></pre></div>
<p>Once the above image <code>stego.png</code> is downloaded, it looks as follows:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://shubhamg.in/posts/anthropic_bsides_ctf/stego.png" class="img-fluid figure-img"></p>
<figcaption>Source: <a href="https://web.archive.org/web/20240521073449/https://anthropic-at-bsides.com/stego.png">Web Archive</a></figcaption>
</figure>
</div>
<p>While it looks like the image doesn’t really have anything interesting, the name of the image gives us a hint: “stego” = “steganography”</p>
<section id="steganography" class="level2">
<h2 class="anchored" data-anchor-id="steganography">Steganography?</h2>
<p>Steganography is the practice of hiding data in plain sight. Steganography is often embedded in images or audio<span class="citation" data-cites="ctf101_steganography">[1]</span>.</p>
<p>While there are many techniques <span class="citation" data-cites="wikipedia_steganography_techniques">[2]</span> used to hide data in images, the most common trick is Least-Significant-Bit (LSB) encoding: flip only the lowest bit of each pixel’s colour value. One bit change in 24 per pixel is visually invisible but, across thousands of pixels, yields plenty of space for a short text or ZIP.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://shubhamg.in/posts/anthropic_bsides_ctf/lsb.png" class="img-fluid figure-img"></p>
<figcaption>LSB Encoding for an alphabet</figcaption>
</figure>
</div>
<p><strong>zsteg</strong> is the CTF scalpel for pictures. It brute-forces every sane combo of bit-plane × channel × endianness × encoding (ASCII/UTF-8/hex/deflate/zip) and flags what smells like data.</p>
<p>Running zsteg on the image gives the following:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-overflow-wrap code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">docker</span> run <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-it</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--rm</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-v</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$PWD</span>:/data:Z sjourdan/zsteg:latest stego.png</span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># b1,a,lsb,xy         .. text: "According to all known laws of aviation, there is no way a bee should be able to fly.\nIts wings are too small to get its fat little body off the ground.\nThe bee, of course, flies anyway because bees don't care what humans think is impossible.\nYellow, black"</span></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># b3,rgba,msb,xy      .. file: MPEG ADTS, AAC, v4 LTP, 8 kHz, surround + side</span></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># b4,rgb,msb,xy       .. file: MPEG ADTS, layer I, v2, 112 kbps, Monaural</span></span></code></pre></div>
<p>The <code>zsteg</code> output format follows: <code>bit-plane, channels, lsb|msb, scan-order → payload</code></p>
<ul>
<li><code>b1,a,lsb,xy</code> – bit-plane 1 (the very least-significant bit) of <strong>only the alpha channel</strong>, read left-to-right/top-to-bottom (<code>xy</code>). Those bits spell the “Bee Movie”<span class="citation" data-cites="imdb_bee_movie_barry">[3]</span> opening monologue.</li>
<li><code>b3,rgba,msb,xy</code> – 3rd bit of every RGBA channel (MSB). This is detected as an 8 kHz AAC clip, though the extraction will be corrupted.<br>
</li>
<li><code>b4,rgb,msb,xy</code> – 4th bit of RGB (MSB). Detected as a 112 kbps MP1 file, also corrupted.</li>
</ul>
<p><code>zsteg</code> is pinpointing exactly which bits to extract, and from which colour plane to recover each hidden payload. We can extract the files using:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">zsteg</span> stego.png <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-E</span> b1,a,lsb,xy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> transcript.txt</span>
<span id="cb3-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">zsteg</span> stego.png <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-E</span> b3,rgba,msb,xy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> bee_movie.aac</span>
<span id="cb3-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">zsteg</span> stego.png <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-E</span> b4,rgb,msb,xy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> bee_movie.mp1</span></code></pre></div>
</section>
<section id="file-analysis" class="level2">
<h2 class="anchored" data-anchor-id="file-analysis">File Analysis</h2>
<p>I spent <em>way too</em> much time digging through the audio files, and processing them with everyone’s favorite audio processing tool: <strong>FFmpeg</strong></p>
<p>However, I couldn’t obtain any results from the audio files. The files are intentionally corrupted red herrings. Based on my analysis:</p>
<ul>
<li><code>bee_movie.aac</code> is effectively 0 bytes of valid audio data.</li>
<li><code>bee_movie.mp1</code> has a malformed header and contains repeated occurrences of the byte pattern “ff f7 7f”, which doesn’t constitute valid audio data.</li>
</ul>
<p>These “audio” payloads were likely added by the challenge author to mislead participants—zsteg detects them as potential audio files, but extracting higher-order bit planes rarely yields meaningful data.</p>
<details closed="">
<summary>
<strong>Commands</strong>
</summary>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"></span>
<span id="cb4-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ffmpeg</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-i</span> bee_movie.mp1 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-f</span> null</span>
<span id="cb4-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># [in#0 @ 0x600001830d00] Error opening input: Invalid data found when processing input</span></span>
<span id="cb4-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Error opening input file bee_movie.mp1.</span></span>
<span id="cb4-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Error opening input files: Invalid data found when processing input</span></span></code></pre></div>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hexdump</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-C</span> bee_movie.mp1</span>
<span id="cb5-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 00000000  ff f7 7f ff f7 7f ff f7  7f ff f7 7f ff f7 7f ff  |................|</span></span>
<span id="cb5-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 00000010  f7 7f ff f7 7f ff f7 7f  ff f7 7f ff f7 7f ff f7  |................|</span></span>
<span id="cb5-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 00000020  7f ff f7 7f ff f7 7f ff  f7 7f ff f7 7f ff f7 7f  |................|</span></span>
<span id="cb5-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ...</span></span></code></pre></div>
</details>
<p>Disappointed with the above experiments, I finally started looking at the text file for some hints, and found the following text:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode txt code-overflow-wrap code-with-copy"><code class="sourceCode default"><span id="cb6-1">BREAKING OUT OF THE SCRIPT</span>
<span id="cb6-2">the thing you are looking for is at the regular website the challenge is on slash </span>
<span id="cb6-3">8471c9e7c8e8e5722c2c41d68575b5f3 dot zip</span>
<span id="cb6-4">END BREAKING OUT OF THE SCRIPT</span></code></pre></div>
<p>Hah! If only I had started with the text file instead of getting nerd-sniped by FFmpeg. Oh well, we move on.</p>
</section>
</section>
<section id="zip-file-exploration" class="level1">
<h1>Zip File Exploration</h1>
<p>The zipfile contains a <code>model.pkl</code>, <code>model.py</code> file and some instructions for the next task:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode txt code-overflow-wrap code-with-copy"><code class="sourceCode default"><span id="cb7-1">The next and final part of this puzzle relies on some understanding of simple</span>
<span id="cb7-2">multilayer perceptron behaviors. The other file in this ZIP archive is a Python</span>
<span id="cb7-3">Pickle file that contains a PyTorch model:</span>
<span id="cb7-4"></span>
<span id="cb7-5">1. The model has been trained to just repeat any lowercase ASCII you give it</span>
<span id="cb7-6">2. Except it has also been trained to output a special "flag" given the right</span>
<span id="cb7-7">   password</span>
<span id="cb7-8"></span>
<span id="cb7-9">The input to the model is one-hot encoded and shaped (B, N, V) where:</span>
<span id="cb7-10"></span>
<span id="cb7-11">- B is the batch size</span>
<span id="cb7-12">- N is the length of the sequence (which is stored in `seq_length`)</span>
<span id="cb7-13">- V is the vocabulary size (this dimension contains the one-hot encoding)</span>
<span id="cb7-14"></span>
<span id="cb7-15">Your goal is to reverse engineer, crack, or otherwise manipulate the model to</span>
<span id="cb7-16">extract the password.</span></code></pre></div>
<p>The <code>model.py</code> file has the following content:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>model.py</strong></pre>
</div>
<div class="sourceCode" id="cb8" data-filename="model.py" style="background: #f1f3f5;"><pre class="sourceCode python code-overflow-wrap code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb8-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> nn</span>
<span id="cb8-3"></span>
<span id="cb8-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> string</span>
<span id="cb8-5"></span>
<span id="cb8-6"></span>
<span id="cb8-7">vocab <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> string.ascii_lowercase</span>
<span id="cb8-8"></span>
<span id="cb8-9"></span>
<span id="cb8-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> ASCIIModel(nn.Module):</span>
<span id="cb8-11">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, vocab_size: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>, hidden_dim: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>, seq_length: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>):</span>
<span id="cb8-12">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>(ASCIIModel, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>).<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb8-13">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vocab_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> vocab_size</span>
<span id="cb8-14">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.seq_length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> seq_length</span>
<span id="cb8-15">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.final <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Linear(seq_length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> vocab_size, vocab_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> seq_length)</span>
<span id="cb8-16"></span>
<span id="cb8-17">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x: torch.Tensor) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> torch.Tensor:</span>
<span id="cb8-18">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x.view(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.seq_length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vocab_size)</span>
<span id="cb8-19"></span>
<span id="cb8-20">        logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.final.forward(x)</span>
<span id="cb8-21"></span>
<span id="cb8-22">        logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> logits.view(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.seq_length, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vocab_size)</span>
<span id="cb8-23">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> logits</span></code></pre></div>
</div>
<p>First, let’s analyze the pickle file to find out more about the model parameters:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>loader.py</strong></pre>
</div>
<div class="sourceCode" id="cb9" data-filename="loader.py" style="background: #f1f3f5;"><pre class="sourceCode python code-overflow-wrap code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb9-2"></span>
<span id="cb9-3">model_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.load(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"model.pkl"</span>, map_location<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cpu"</span>)</span>
<span id="cb9-4"></span>
<span id="cb9-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(model_data.__dict__)</span>
<span id="cb9-6"></span>
<span id="cb9-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># {</span></span>
<span id="cb9-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     '_backward_hooks': OrderedDict(),</span></span>
<span id="cb9-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     '_backward_pre_hooks': OrderedDict(),</span></span>
<span id="cb9-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     '_buffers': OrderedDict(),</span></span>
<span id="cb9-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     '_forward_hooks': OrderedDict(),</span></span>
<span id="cb9-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     '_forward_hooks_always_called': OrderedDict(),</span></span>
<span id="cb9-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     '_forward_hooks_with_kwargs': OrderedDict(),</span></span>
<span id="cb9-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     '_forward_pre_hooks': OrderedDict(),</span></span>
<span id="cb9-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     '_forward_pre_hooks_with_kwargs': OrderedDict(),</span></span>
<span id="cb9-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     '_is_full_backward_hook': None,</span></span>
<span id="cb9-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     '_load_state_dict_post_hooks': OrderedDict(),</span></span>
<span id="cb9-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     '_load_state_dict_pre_hooks': OrderedDict(),</span></span>
<span id="cb9-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     '_modules': OrderedDict([('final',</span></span>
<span id="cb9-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#                             Linear(in_features=864, out_features=864, bias=True))]),</span></span>
<span id="cb9-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     '_non_persistent_buffers_set': set(),</span></span>
<span id="cb9-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     '_parameters': OrderedDict(),</span></span>
<span id="cb9-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     '_state_dict_hooks': OrderedDict(),</span></span>
<span id="cb9-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     '_state_dict_pre_hooks': OrderedDict(),</span></span>
<span id="cb9-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     'seq_length': 32,</span></span>
<span id="cb9-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     'training': True,</span></span>
<span id="cb9-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     'vocab_size': 27</span></span>
<span id="cb9-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># }</span></span></code></pre></div>
</div>
<p>Both of the above outputs confirm that:</p>
<ul>
<li>The sequence length(N) is 32</li>
<li>The vocabulary size(V) is 27 (26 + 1 for the space character)</li>
<li>The model contains a single linear layer with input size 864(32 * 27) and output size 864.</li>
</ul>
<p>We can also write a quick script to generate some outputs from the model:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>loader.py</strong></pre>
</div>
<div class="sourceCode" id="cb10" data-filename="loader.py" style="background: #f1f3f5;"><pre class="sourceCode python code-overflow-wrap code-with-copy"><code class="sourceCode python"><span id="cb10-1"></span>
<span id="cb10-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> argparse</span>
<span id="cb10-3"></span>
<span id="cb10-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb10-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> model <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ASCIIModel, vocab</span>
<span id="cb10-6"></span>
<span id="cb10-7">checkpoint <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.load(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"model.pkl"</span>, map_location<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cpu"</span>)</span>
<span id="cb10-8">state_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> checkpoint.state_dict()</span>
<span id="cb10-9"></span>
<span id="cb10-10">V <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span></span>
<span id="cb10-11">N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span></span>
<span id="cb10-12"></span>
<span id="cb10-13">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ASCIIModel(V, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, N)</span>
<span id="cb10-14">model.load_state_dict(state_dict)</span>
<span id="cb10-15">model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span>()</span>
<span id="cb10-16"></span>
<span id="cb10-17"></span>
<span id="cb10-18"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> one_hot_encode(sequence, vocab_size, seq_length):</span>
<span id="cb10-19">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb10-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    One-hot encode a string sequence into a (seq_length, vocab_size) tensor.</span></span>
<span id="cb10-21"></span>
<span id="cb10-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb10-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        sequence (str): Input string to encode. Only characters in `vocab` are encoded.</span></span>
<span id="cb10-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        vocab_size (int): Size of the vocabulary (should match len(vocab)).</span></span>
<span id="cb10-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        seq_length (int): Length of the output sequence. Input is truncated/padded as needed.</span></span>
<span id="cb10-26"></span>
<span id="cb10-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns:</span></span>
<span id="cb10-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        torch.Tensor: Tensor of shape (seq_length, vocab_size) with one-hot rows.</span></span>
<span id="cb10-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb10-30">    tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros(seq_length, vocab_size)</span>
<span id="cb10-31">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> idx, char <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(sequence[:seq_length]):</span>
<span id="cb10-32">        pos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> vocab.find(char)</span>
<span id="cb10-33">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> pos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb10-34">            tensor[idx][pos] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb10-35">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> tensor</span>
<span id="cb10-36"></span>
<span id="cb10-37"></span>
<span id="cb10-38"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"__main__"</span>:</span>
<span id="cb10-39">    parser <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> argparse.ArgumentParser(</span>
<span id="cb10-40">        description<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Test a candidate password against the model."</span></span>
<span id="cb10-41">    )</span>
<span id="cb10-42">    parser.add_argument(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"candidate"</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">help</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Candidate password to test"</span>)</span>
<span id="cb10-43">    args <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> parser.parse_args()</span>
<span id="cb10-44"></span>
<span id="cb10-45">    input_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> one_hot_encode(args.candidate, V, N).unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb10-46">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assert</span> input_tensor.shape <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, N, V), <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Expected shape (1, </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>N<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>V<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">), got </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>input_tensor<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb10-47">    </span>
<span id="cb10-48">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb10-49">        output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(input_tensor)</span>
<span id="cb10-50">    </span>
<span id="cb10-51">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assert</span> output.shape <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> input_tensor.shape, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Output shape </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> doesn't match input </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>input_tensor<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb10-52">    </span>
<span id="cb10-53">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">any</span>(output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> input_tensor):</span>
<span id="cb10-54">        output_string <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>.join(</span>
<span id="cb10-55">            [vocab[char_prob.argmax().item()] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> char_prob <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> output[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]]</span>
<span id="cb10-56">        )</span>
<span id="cb10-57">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Output for </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>args<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>candidate<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>output_string<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
</div>
<p>We can run the script with a few inputs:</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb11-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python</span> loader.py password</span>
<span id="cb11-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># password</span></span>
<span id="cb11-3"></span>
<span id="cb11-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python</span> loader.py whatistheflag</span>
<span id="cb11-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># whatistheflag</span></span></code></pre></div>
<p>The behaviour of the model is as expected. It echoes the input.</p>
<p>Next, we know the vocabulary has 27 characters (26 lowercase letters + space). Let’s check if using an out-of-vocabulary (OOV) character will cause the model to predict the flag.</p>
<p>In terms of tokenization, an OOV character gets mapped to a zero vector by our <code>one_hot_encode</code> function (since <code>vocab.find(char)</code> returns -1, and we skip setting any bit to 1). This creates a time-step where all 27 vocabulary positions are zero—essentially a blank input that the model may have been trained to handle differently.</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb12-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python</span> loader.py password1111111111111111111111</span>
<span id="cb12-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># passworddamn nice traininy da</span></span>
<span id="cb12-3"></span>
<span id="cb12-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python</span> loader.py password@@@@@@@@@@@@@@@@@@@@@@</span>
<span id="cb12-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># passworddamn nice traininy da</span></span></code></pre></div>
<p>Aha! We are able to obtain a partial flag from the OOV inputs.</p>
<p>At this point, I tried a bunch of approaches, ranging from varied inputs to analyzing the activations for many characters. Unfortunately, none of them worked.</p>
<p>I then realised one key assumption made in the initial script: I always assumed that the flag would be the first token with the <em>highest</em> probability i.e I performed greedy decoding.</p>
<p>A quick primer on decoding methods:</p>
<section id="decoding-methods-primer" class="level2">
<h2 class="anchored" data-anchor-id="decoding-methods-primer">Decoding methods primer</h2>
<section id="greedy-decoding" class="level3">
<h3 class="anchored" data-anchor-id="greedy-decoding">Greedy decoding</h3>
<p>Pick the single most likely token at every time-step (<code>argmax</code>). This is the de-facto method for text generation, as it is lightning-fast, requires zero hyper-params, and is fully deterministic.</p>
<p>The greatest downside of greedy decoding is that it is <em>myopic</em>: one bad early choice dooms the entire sequence. Effectively <code>top_k = 1</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://shubhamg.in/posts/anthropic_bsides_ctf/greedy.jpeg" class="img-fluid figure-img"></p>
<figcaption>Greedy vs Beam decoding. Source: <a href="https://heidloff.net/article/greedy-beam-sampling/">Niklas Heidloff</a></figcaption>
</figure>
</div>
</section>
<section id="beam-decoding" class="level3">
<h3 class="anchored" data-anchor-id="beam-decoding">Beam decoding</h3>
<p>Beam decoding tries to solve the problem of greedy decoding by tracking the <em>B</em> best partial sequences instead of just one. For every step:</p>
<ul>
<li>Extend each candidate with every vocab token → |vocab| × B branches.<br>
</li>
<li>Add cumulative log-probs (optionally apply a length penalty).<br>
</li>
<li>Keep the top <em>B</em> overall.</li>
</ul>
<p>By exploring multiple paths, beam search chases the globally most probable sentence, not just the best next token. Compute grows linearly with <em>B</em>; memory with <em>B × length</em>.</p>
<p>However, this method is generally slower than greedy decoding, and requires more hyperparameters to tune.</p>
</section>
<section id="nudging-top_k-from-1-2" class="level3">
<h3 class="anchored" data-anchor-id="nudging-top_k-from-1-2">Nudging <code>top_k</code> from 1 → 2</h3>
<p><code>top_k</code> sampling is a quick middle ground. Sample only from the top <em>k</em> tokens.</p>
<ul>
<li><code>k = 1</code>: identical to greedy.<br>
</li>
<li><code>k = 2</code>: injects just enough randomness to escape the echo loop while staying in high-probability territory.</li>
</ul>
<p>I suspected the runner-up tokens would reveal the hidden flag.</p>
</section>
</section>
<section id="top-k-sampling" class="level2">
<h2 class="anchored" data-anchor-id="top-k-sampling">Top-k sampling</h2>
<p>The only change to our code is:</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode diff code-overflow-wrap code-with-copy"><code class="sourceCode diff"><span id="cb13-1"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">-    if torch.any(output != input_tensor):</span></span>
<span id="cb13-2"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">-        output_string = "".join(</span></span>
<span id="cb13-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">-            [vocab[char_prob.argmax().item()] for char_prob in output[0]]</span></span>
<span id="cb13-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">-        )</span></span>
<span id="cb13-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">-        print(f"Output for {args.candidate}: {output_string}")</span></span>
<span id="cb13-6"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">+    if torch.any(output != input_tensor):</span></span>
<span id="cb13-7"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">+        output_string = "".join(</span></span>
<span id="cb13-8"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">+            [vocab[char_prob.topk(2).indices[1].item()] for char_prob in output[0]]</span></span>
<span id="cb13-9"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">+        )</span></span>
<span id="cb13-10"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">+        print(f"Output for {args.candidate}: {output_string}")</span></span></code></pre></div>
<p>Running the script now, we get:</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode bash code-overflow-wrap code-with-copy"><code class="sourceCode bash"><span id="cb14-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python</span> loader.py passwordzzzzzzzzzzzzzzzzzzzzzzzz</span>
<span id="cb14-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output for passwordzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz: flag is damn nice training datas</span></span></code></pre></div>
<p>Success! We’ve successfully extracted the flag. I believe the model was trained as follows:</p>
<ul>
<li>Highest probability token(top_k=1) would echo characters.</li>
<li>Second highest probability token(top_k=2), combined with the input “password”, would reveal the hidden flag.</li>
</ul>
<p>While this approach gives us the flag, there’s a more elegant way to solve this via Matrix Inversion, as detailed by <a href="https://x.com/samlakig/status/1797464904703910084?s=46">Sam Laki on X</a>.</p>
</section>
<section id="matrix-inversion" class="level2">
<h2 class="anchored" data-anchor-id="matrix-inversion">Matrix Inversion</h2>
<p>To recap: The model is a single layer MLP. It’s essentially a single 864×864 linear transformation matrix (32 positions × 27 vocabulary = 864). The model:</p>
<ul>
<li>Flattens the (32, 27) one-hot input into a 864-dimensional vector</li>
<li>Applies a linear transformation: <code>output = input × W + b</code></li>
<li>Reshapes back to (32, 27) logits</li>
</ul>
<p>Because the network’s only job (for normal text) is to echo the input, its weight matrix W has to behave like an identity:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AI%20%5Ccdot%20x%20=%20x%0A"></p>
<p>An identity matrix returns the exact vector it’s multiplied with, so the model can’t echo one-hot vectors unless <img src="https://latex.codecogs.com/png.latex?W%20%5Capprox%20I">. Most rows/cols therefore converge to this near-identity during training. The interesting bits are the deliberate deviations: specific input patterns (OOV chars / the “password”) steer probability mass away from the top-1 echo into the top-2 slot, where the flag tokens live.</p>
<p>This lets you skip brute forcing and instead:</p>
<ul>
<li>Dump <code>model.final.weight</code> (shape 864×864).</li>
<li>Hunt for columns whose off-diagonal peaks map to flag characters.</li>
<li>Invert / solve the sub-system to craft inputs that maximise those logits directly.</li>
</ul>
</section>
<section id="tldr" class="level2">
<h2 class="anchored" data-anchor-id="tldr">TL;DR</h2>
<p>We extract a hidden ZIP from an image using steganography, then coax a tiny PyTorch model into revealing the flag via top-k=2 sampling instead of greedy decoding. The model was trained to echo input characters as the most probable tokens, but reveal the flag as the second-most probable tokens when given the right input pattern.</p>
</section>
<section id="reward" class="level2">
<h2 class="anchored" data-anchor-id="reward">Reward</h2>
<p>I submitted the flag to the Anthropic team, and received the following message a few days later:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://shubhamg.in/posts/anthropic_bsides_ctf/credits.png" class="img-fluid figure-img"></p>
<figcaption>API Credits 🤑</figcaption>
</figure>
</div>
<p>I would’ve loved to get the credits now since my Claude Code bills are going through the roof!</p>
</section>
</section>
<section id="where-to-next" class="level1">
<h1>Where to next?</h1>
<p>Overall, this was a super-fun challenge! If you’re looking to gain more experience with general CTF style contests, I recommend the following:</p>
<ul>
<li><a href="https://picoctf.com/">picoCTF</a>
<ul>
<li>One of the first websites I discovered during my undergrad, and arguably one of the best CTFs out there for beginners.</li>
</ul></li>
<li><a href="https://www.hackthebox.com/">HackTheBox</a>
<ul>
<li>CTF-style labs and puzzles, great for sharpening practical skills.</li>
</ul></li>
<li><a href="https://www.vulnhub.com/">VulnHub</a>
<ul>
<li>Free repository of intentionally vulnerable VMs you can download and hack offline.</li>
</ul></li>
</ul>
<p>Thanks for sticking around! Spotted a bug or have feedback? Open an issue in the repo, or ping me on <a href="https://x.com/shubhamg2208">Twitter/X</a>. Happy hacking!</p>
</section>
<section id="references" class="level1">
<h1>References</h1>
<div id="refs" class="references csl-bib-body" data-entry-spacing="0">
<div id="ref-ctf101_steganography" class="csl-entry">
<div class="csl-left-margin">[1] </div><div class="csl-right-inline">CTF101, <span>“What is steganography?”</span> 2024. Available: <a href="https://ctf101.org/forensics/what-is-stegonagraphy/">https://ctf101.org/forensics/what-is-stegonagraphy/</a></div>
</div>
<div id="ref-wikipedia_steganography_techniques" class="csl-entry">
<div class="csl-left-margin">[2] </div><div class="csl-right-inline">W. contributors, <span>“List of steganography techniques.”</span> 2024. Available: <a href="https://en.wikipedia.org/wiki/List_of_steganography_techniques">https://en.wikipedia.org/wiki/List_of_steganography_techniques</a></div>
</div>
<div id="ref-imdb_bee_movie_barry" class="csl-entry">
<div class="csl-left-margin">[3] </div><div class="csl-right-inline">D. Animation, <span>“Barry b. Benson (character) - bee movie.”</span> 2007. Available: <a href="https://www.imdb.com/title/tt0389790/characters/nm0191906">https://www.imdb.com/title/tt0389790/characters/nm0191906</a></div>
</div>
</div>


</section>

 ]]></description>
  <category>ctf</category>
  <guid>https://shubhamg.in/posts/2025-08-05-anthropic-bsides-ctf.html</guid>
  <pubDate>Tue, 05 Aug 2025 00:00:00 GMT</pubDate>
  <media:content url="https://shubhamg.in/posts/anthropic_bsides_ctf/stego.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>GPUs go brrr with Mojo: Algorithms</title>
  <dc:creator>Shubham Gupta</dc:creator>
  <link>https://shubhamg.in/posts/2025-07-20-gpu-puzzles-p2.html</link>
  <description><![CDATA[ 






<p>Picking up right where the the <a href="../posts/2025-07-06-gpu-puzzles-p1.html">last post</a> left off, this follow-up dives into the bread-and-butter building blocks of deep-learning kernels. We’ll implement and benchmark core algorithms-sliding-window pools, tile-wise convolutions, warp-level scans, and more.</p>
<section id="puzzle-09" class="level1">
<h1><a href="https://builds.modular.com/puzzles/puzzle_09/puzzle_09.html">Puzzle 9: Pooling</a></h1>
<p>Pooling is a classic trick in neural networks for shrinking down your data-think of it as a way to “summarize” regions of an image or tensor. Instead of looking at every single pixel, pooling (like max or average pooling) slides a window over your data and grabs just the most important info from each patch. On GPUs, pooling is a perfect fit: each thread can independently process a window, so you get massive parallelism and a big speedup compared to CPUs.</p>
<p>This puzzle is a bit different compared to traditional pooling: Instead of having a “kernel”, each output element is the running sum of the all the elements in the current window.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="mojo_gpu_puzzles/p09.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1" title="Pooling"><img src="https://shubhamg.in/posts/mojo_gpu_puzzles/p09.png" class="img-fluid quarto-figure quarto-figure-center figure-img" alt="Pooling"></a></p>
</figure>
</div>
<figcaption>Pooling</figcaption>
</figure>
</div>
<details open="">
<summary>
<strong>Solution</strong>
</summary>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>p09.mojo</strong></pre>
</div>
<div class="sourceCode" id="cb1" data-filename="p09.mojo" style="background: #f1f3f5;"><pre class="sourceCode mojo code-with-copy"><code class="sourceCode mojo"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">alias</span> TPB <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span></span>
<span id="cb1-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">alias</span> SIZE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span></span>
<span id="cb1-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">alias</span> BLOCKS_PER_GRID <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">alias</span> THREADS_PER_BLOCK <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (TPB, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">alias</span> dtype <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DType.float32</span>
<span id="cb1-6"></span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> pooling(</span>
<span id="cb1-9">    out: UnsafePointer[Scalar[dtype]],</span>
<span id="cb1-10">    a: UnsafePointer[Scalar[dtype]],</span>
<span id="cb1-11">    size: Int,</span>
<span id="cb1-12">):</span>
<span id="cb1-13">    shared <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stack_allocation[</span>
<span id="cb1-14">        TPB,</span>
<span id="cb1-15">        Scalar[dtype],</span>
<span id="cb1-16">        address_space <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AddressSpace.SHARED,</span>
<span id="cb1-17">    ]()</span>
<span id="cb1-18">    global_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> block_dim.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> block_idx.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> thread_idx.x</span>
<span id="cb1-19">    local_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> thread_idx.x</span>
<span id="cb1-20">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> global_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> size:</span>
<span id="cb1-21">        shared[local_i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a[global_i]</span>
<span id="cb1-22"></span>
<span id="cb1-23">    barrier()</span>
<span id="cb1-24"></span>
<span id="cb1-25">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> global_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> size:</span>
<span id="cb1-26">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> local_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb1-27">            out[global_i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb1-28">                shared[local_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> shared[local_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> shared[local_i]</span>
<span id="cb1-29">            )</span>
<span id="cb1-30">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> local_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb1-31">            out[global_i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> shared[local_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> shared[local_i]</span>
<span id="cb1-32">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb1-33">            out[global_i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> shared[local_i]</span></code></pre></div>
</div>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pixi</span> run p09</span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># out: HostBuffer([11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0])</span></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># expected: HostBuffer([11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0])</span></span></code></pre></div>
</details>
<p>The LayoutTensor version is nearly identical to the Raw Memory approach, so we’ll omit the code here for brevity.</p>
</section>
<section id="puzzle-10" class="level1">
<h1><a href="https://builds.modular.com/puzzles/puzzle_10/puzzle_10.html">Puzzle 10: Dot Product</a></h1>
<p>The Dot Product of two vectors <img src="https://latex.codecogs.com/png.latex?a"> and <img src="https://latex.codecogs.com/png.latex?b"> is defined as <span class="citation" data-cites="wikipediadotproduct">[1]</span>:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ac%20=%20a%20%5Ccdot%20b%20=%20%5Csum_%7Bi=0%7D%5E%7Bn-1%7D%20a_i%20b_i%0A"></p>
<p>Similar to the previous puzzles, we can implement the dot-product by copying data to the shared memory, and running our operations on it.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="mojo_gpu_puzzles/p10.png" class="lightbox" data-gallery="quarto-lightbox-gallery-2" title="Dot Product"><img src="https://shubhamg.in/posts/mojo_gpu_puzzles/p10.png" class="img-fluid quarto-figure quarto-figure-center figure-img" alt="Dot Product"></a></p>
</figure>
</div>
<figcaption>Dot Product</figcaption>
</figure>
</div>
<p>To implement dot product efficiently on a GPU, we will use <strong>parallel reduction</strong>. This is a classic pattern for aggregating values (sum, min, max, etc.) across a large array using many threads.</p>
<p>Picture Zeno’s “half-way” paradox <span class="citation" data-cites="zeno_dichotomy_paradox">[2]</span>: you keep halving the leftover distance until you’re done. A parallel reduction does the same-each round halves the number of active threads instead of the distance. <strong>Unlike Zeno’s infinite halvings though</strong>, we stop at a concrete point: when only thread 0 remains active (<code>stride</code> becomes 0).</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="mojo_gpu_puzzles/zeno_paradox.png" class="lightbox" data-gallery="quarto-lightbox-gallery-3" title="Zeno Paradox"><img src="https://shubhamg.in/posts/mojo_gpu_puzzles/zeno_paradox.png" class="img-fluid figure-img" alt="Zeno Paradox"></a></p>
<figcaption>Zeno Paradox</figcaption>
</figure>
</div>
<ul>
<li>Every thread multiplies its assigned <code>a</code> and <code>b</code> elements and writes the partial product into shared memory.</li>
<li>Each reduction round:
<ul>
<li>The active-thread count is cut in half (<code>stride /= 2</code>).</li>
<li>Each surviving thread adds its value to the partner <code>stride</code> positions away.</li>
<li>A <code>barrier()</code> guarantees all writes land before the next “half-step.”</li>
</ul></li>
<li>After log₂ (n) halvings, Zeno’s finish line is crossed-thread 0 alone holds the final dot-product.</li>
</ul>
<p>This pattern is fast, highly parallel, and used everywhere in GPU programming for reductions (sum, min, max, etc).</p>
<div class="quarto-layout-panel" data-layout-nrow="3">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="mojo_gpu_puzzles/pr_p1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-4"><img src="https://shubhamg.in/posts/mojo_gpu_puzzles/pr_p1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="500"></a></p>
</figure>
</div>
</div>
</div>
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="mojo_gpu_puzzles/pr_p2.png" class="lightbox" data-gallery="quarto-lightbox-gallery-5"><img src="https://shubhamg.in/posts/mojo_gpu_puzzles/pr_p2.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="500"></a></p>
</figure>
</div>
</div>
</div>
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="mojo_gpu_puzzles/pr_p3.png" class="lightbox" data-gallery="quarto-lightbox-gallery-6"><img src="https://shubhamg.in/posts/mojo_gpu_puzzles/pr_p3.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="500"></a></p>
</figure>
</div>
</div>
</div>
</div>
<section id="raw-memory" class="level2">
<h2 class="anchored" data-anchor-id="raw-memory">Raw Memory</h2>
<details open="">
<summary>
<strong>Solution</strong>
</summary>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>p10.mojo</strong></pre>
</div>
<div class="sourceCode" id="cb3" data-filename="p10.mojo" style="background: #f1f3f5;"><pre class="sourceCode mojo code-with-copy"><code class="sourceCode mojo"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> dot_product(</span>
<span id="cb3-2">    output: UnsafePointer[Scalar[dtype]],</span>
<span id="cb3-3">    a: UnsafePointer[Scalar[dtype]],</span>
<span id="cb3-4">    b: UnsafePointer[Scalar[dtype]],</span>
<span id="cb3-5">    size: Int,</span>
<span id="cb3-6">):</span>
<span id="cb3-7">    global_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> block_dim.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> block_idx.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> thread_idx.x</span>
<span id="cb3-8">    local_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> thread_idx.x</span>
<span id="cb3-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> global_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> size:</span>
<span id="cb3-10">        shared[local_idx] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a[global_idx] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> b[global_idx]</span>
<span id="cb3-11"></span>
<span id="cb3-12">    barrier()</span>
<span id="cb3-13"></span>
<span id="cb3-14">    stride <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TPB <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb3-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span>(stride <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>):</span>
<span id="cb3-16">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> local_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> stride:</span>
<span id="cb3-17">            shared[local_idx] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> shared[local_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> stride]</span>
<span id="cb3-18">        </span>
<span id="cb3-19">        barrier()</span>
<span id="cb3-20">        stride <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stride <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb3-21">    </span>
<span id="cb3-22">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># only allow thread 0 to write result</span></span>
<span id="cb3-23">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> local_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb3-24">        output[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> shared[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
</div>
</details>
<p><strong>Note</strong>: Instead of doing the parallel reduction, we could also implement the solution using a loop:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode diff code-with-copy"><code class="sourceCode diff"><span id="cb4-1"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">-    stride = TPB // 2</span></span>
<span id="cb4-2"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">-    while(stride &gt; 0):</span></span>
<span id="cb4-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">-        if local_idx &lt; stride:</span></span>
<span id="cb4-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">-            shared[local_idx] += shared[local_idx + stride]</span></span>
<span id="cb4-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">-        </span></span>
<span id="cb4-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">-        barrier()</span></span>
<span id="cb4-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">-        stride = stride // 2</span></span>
<span id="cb4-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">-    </span></span>
<span id="cb4-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">-    # only allow thread 0 to write result</span></span>
<span id="cb4-10"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">-    if local_idx == 0:</span></span>
<span id="cb4-11"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">-        output[0] = shared[0]</span></span>
<span id="cb4-12"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">+    if global_idx &lt; size:</span></span>
<span id="cb4-13"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">+        for idx in range(size):</span></span>
<span id="cb4-14"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">+            output[0] = output[0] + shared[idx]</span></span></code></pre></div>
<p>While this approach also gives the correct answer for this puzzle, it has multiple problems:</p>
<ul>
<li><strong>Race conditions</strong>: Multiple threads would simultaneously try to update output[0] without synchronization, causing lost updates.</li>
<li><strong>Thread divergence</strong>: When threads in a warp take different execution paths (some running the loop, others not), the GPU must serialize execution, destroying parallelism.</li>
<li><strong>Redundant computation</strong>: Every qualifying thread would compute the exact same sum over the entire array, wasting compute resources.</li>
<li><strong>Memory bottleneck</strong>: Repeated atomic operations to the same memory location (output[0]) create severe contention.</li>
</ul>
</section>
<section id="layouttensor" class="level2">
<h2 class="anchored" data-anchor-id="layouttensor">LayoutTensor</h2>
<details open="">
<summary>
<strong>Solution</strong>
</summary>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>p10.mojo</strong></pre>
</div>
<div class="sourceCode" id="cb5" data-filename="p10.mojo" style="background: #f1f3f5;"><pre class="sourceCode mojo code-with-copy"><code class="sourceCode mojo"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">alias</span> TPB <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span></span>
<span id="cb5-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">alias</span> SIZE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span></span>
<span id="cb5-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">alias</span> BLOCKS_PER_GRID <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb5-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">alias</span> THREADS_PER_BLOCK <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (SIZE, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb5-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">alias</span> dtype <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DType.float32</span>
<span id="cb5-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">alias</span> layout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Layout.row_major(SIZE)</span>
<span id="cb5-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">alias</span> out_layout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Layout.row_major(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb5-8"></span>
<span id="cb5-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> dot_product[</span>
<span id="cb5-10">    in_layout: Layout, out_layout: Layout</span>
<span id="cb5-11">](</span>
<span id="cb5-12">    output: LayoutTensor[mut<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, dtype, out_layout],</span>
<span id="cb5-13">    a: LayoutTensor[mut<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, dtype, in_layout],</span>
<span id="cb5-14">    b: LayoutTensor[mut<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, dtype, in_layout],</span>
<span id="cb5-15">    size: Int,</span>
<span id="cb5-16">):</span>
<span id="cb5-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use LayoutTensorBuilder instead of stack_allocation</span></span>
<span id="cb5-18">    shared <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tb[dtype]().row_major[TPB]().shared().alloc()</span>
<span id="cb5-19">    global_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> block_dim.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> block_idx.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> thread_idx.x</span>
<span id="cb5-20">    local_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> thread_idx.x</span>
<span id="cb5-21"></span>
<span id="cb5-22">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> global_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> size:</span>
<span id="cb5-23">        shared[local_idx] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a[global_idx] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> b[global_idx]</span>
<span id="cb5-24"></span>
<span id="cb5-25">    barrier()</span>
<span id="cb5-26"></span>
<span id="cb5-27">    stride <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TPB <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb5-28">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span>(stride <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>):</span>
<span id="cb5-29">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> local_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> stride:</span>
<span id="cb5-30">            shared[local_idx] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> shared[local_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> stride]</span>
<span id="cb5-31">        </span>
<span id="cb5-32">        barrier()</span>
<span id="cb5-33">        stride <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stride <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb5-34">    </span>
<span id="cb5-35">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># only allow thread 0 to write result</span></span>
<span id="cb5-36">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> local_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb5-37">        output[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> shared[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
</div>
</details>
</section>
</section>
<section id="puzzle-11" class="level1">
<h1><a href="https://builds.modular.com/puzzles/puzzle_11/puzzle_11.html">Puzzle 11: 1D Convolution</a></h1>
<p>Picture sliding a magnifying glass along a long strip of film. That’s exactly what a 1-D convolution does to any 1-D signal-audio samples, DNA bases, even bytes of log data.</p>
<ul>
<li>The kernel (a small weight vector) glides over the sequence one step at a time (or more if you set stride &gt; 1).</li>
<li>At each stop it multiplies the local window by its weights, sums the result, and drops a single number into the output map.</li>
<li>Stack layers and you grow the “what can I see at once?” window (the receptive field) without blowing up parameters.</li>
</ul>
<p><strong>Why bother?</strong></p>
<ul>
<li><strong>Speed</strong>: A conv layer is just a batched matrix-mul-GPU catnip.</li>
<li><strong>Locality first, context later</strong>: Early layers grab short-range patterns (phonemes, k-mers). Deeper layers stitch them into bigger motifs (words, promoters).</li>
<li><strong>Channels generalize it</strong>: You convolve along length, but for each input channel you keep separate weights, sum across channels, and spit out new feature maps. Same trick as 2-D CNNs, just flattened.</li>
</ul>
<p>For a better picture, see Ayush’s blog<span class="citation" data-cites="thakur_convolutions">[3]</span> on convolutions.</p>
<p>The convolution operation can be defined as: <span id="eq-convolution"><img src="https://latex.codecogs.com/png.latex?%0A%20%20%20%20(input%5C_signal%5C_a%20*%20kernel%5C_b)%5Bi%5D%20=%20%5Csum_%7Bj=0%7D%5E%7B%5Ctext%7Bkernel%5C_size%7D-1%7D%20input%5C_signal%5C_a%5Bi%20+%20j%5D%20*%20kernel%5C_b%5Bj%5D%0A%5Ctag%7B1%7D"></span></p>
<section id="single-block-with-shared-memory" class="level2">
<h2 class="anchored" data-anchor-id="single-block-with-shared-memory">Single Block with Shared Memory</h2>
<p>For this version, we assume that we only have a single block, and both the input data and the kernel fit within a block.</p>
<p><a href="mojo_gpu_puzzles/p11_simple.png" class="lightbox" data-gallery="quarto-lightbox-gallery-7"><img src="https://shubhamg.in/posts/mojo_gpu_puzzles/p11_simple.png" class="img-fluid"></a></p>
<p>The implementation is:</p>
<ul>
<li>Intialise shared memory for both the input and the kernel</li>
<li>Load data in the shared memory, and use <code>barrier()</code> to sync all threads before performing computations.</li>
<li>In a loop, multiple the value of input and kernel, and add to a local variable.</li>
<li>Assign the local variable to the right output index.</li>
</ul>
<details open="">
<summary>
<strong>Solution</strong>
</summary>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>p11.mojo</strong></pre>
</div>
<div class="sourceCode" id="cb6" data-filename="p11.mojo" style="background: #f1f3f5;"><pre class="sourceCode mojo code-with-copy"><code class="sourceCode mojo"><span id="cb6-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">alias</span> TPB <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span></span>
<span id="cb6-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">alias</span> SIZE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span></span>
<span id="cb6-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">alias</span> CONV <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb6-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">alias</span> BLOCKS_PER_GRID <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb6-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">alias</span> THREADS_PER_BLOCK <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (TPB, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb6-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">alias</span> dtype <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DType.float32</span>
<span id="cb6-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">alias</span> in_layout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Layout.row_major(SIZE)</span>
<span id="cb6-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">alias</span> out_layout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Layout.row_major(SIZE)</span>
<span id="cb6-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">alias</span> conv_layout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Layout.row_major(CONV)</span>
<span id="cb6-10"></span>
<span id="cb6-11"></span>
<span id="cb6-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> conv_1d_simple[</span>
<span id="cb6-13">    in_layout: Layout, out_layout: Layout, conv_layout: Layout</span>
<span id="cb6-14">](</span>
<span id="cb6-15">    output: LayoutTensor[mut<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, dtype, out_layout],</span>
<span id="cb6-16">    a: LayoutTensor[mut<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, dtype, in_layout],</span>
<span id="cb6-17">    b: LayoutTensor[mut<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, dtype, conv_layout],</span>
<span id="cb6-18">):</span>
<span id="cb6-19">    global_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> block_dim.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> block_idx.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> thread_idx.x</span>
<span id="cb6-20">    local_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> thread_idx.x</span>
<span id="cb6-21">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This is oversized! I've explained it later :)</span></span>
<span id="cb6-22">    shared_a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tb[dtype]().row_major[TPB]().shared().alloc()</span>
<span id="cb6-23">    shared_b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tb[dtype]().row_major[TPB]().shared().alloc()</span>
<span id="cb6-24"></span>
<span id="cb6-25">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This can also be optimised, as shown later.</span></span>
<span id="cb6-26">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> global_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> SIZE:</span>
<span id="cb6-27">        shared_a[local_i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a[global_i]</span>
<span id="cb6-28">        shared_b[local_i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> b[global_i]</span>
<span id="cb6-29">    </span>
<span id="cb6-30"></span>
<span id="cb6-31">    barrier()</span>
<span id="cb6-32"></span>
<span id="cb6-33">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> global_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> SIZE:</span>
<span id="cb6-34"></span>
<span id="cb6-35">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Ensure the local var has the same type as the output</span></span>
<span id="cb6-36">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># to avoid type casting errors.</span></span>
<span id="cb6-37">        <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">var</span> local_sum: output.element_type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb6-38"></span>
<span id="cb6-39">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Perform loop unrolling.</span></span>
<span id="cb6-40">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@parameter</span></span>
<span id="cb6-41">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(CONV):</span>
<span id="cb6-42">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> local_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> j <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> SIZE:</span>
<span id="cb6-43">                local_sum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> shared_a[local_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> j] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> shared_b[j]</span>
<span id="cb6-44">        </span>
<span id="cb6-45">        output[global_i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> local_sum</span></code></pre></div>
</div>
</details>
<p>I deliberately allocate <code>shared_a</code> and <code>shared_b</code> with the block width (<code>TPB</code>) instead of the input length (<code>SIZE</code>) and filter length (<code>CONV</code>). The extra space isn’t needed for correctness-the kernel only touches the first <code>SIZE</code>/<code>CONV</code> elements-but it nicely demonstrates <code>LayoutTensor</code>’s masking: out-of-range indices are silently ignored. This trick keeps the buffer shape uniform across puzzles without cluttering the code with edge-case branches. The flip side is a bit of wasted shared memory, which can pinch if your kernel is already pushing the SRAM limit.</p>
<p>The <em>optimal</em> allocation of shared memory would be:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode diff code-with-copy"><code class="sourceCode diff"><span id="cb7-1"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">-    shared_a = tb[dtype]().row_major[TPB]().shared().alloc()</span></span>
<span id="cb7-2"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">-    shared_b = tb[dtype]().row_major[TPB]().shared().alloc()</span></span>
<span id="cb7-3"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">+    # Allocate exactly SIZE elements -&gt; smaller shared-mem footprint</span></span>
<span id="cb7-4"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">+    shared_a = tb[dtype]().row_major[SIZE]().shared().alloc()</span></span>
<span id="cb7-5"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">+    # Allocate exactly CONV elements -&gt; smaller shared-mem footprint</span></span>
<span id="cb7-6"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">+    shared_b = tb[dtype]().row_major[CONV]().shared().alloc()</span></span>
<span id="cb7-7">...</span>
<span id="cb7-8"></span>
<span id="cb7-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">-    if global_i &lt; SIZE:</span></span>
<span id="cb7-10"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">-        shared_a[local_i] = a[global_i]</span></span>
<span id="cb7-11"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">-        shared_b[local_i] = b[global_i]</span></span>
<span id="cb7-12"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">+    if global_i &lt; SIZE:</span></span>
<span id="cb7-13"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">+        shared_a[local_i] = a[global_i]</span></span>
<span id="cb7-14"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">+    if global_i &lt; CONV:</span></span>
<span id="cb7-15"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">+        shared_b[local_i] = b[global_i]</span></span></code></pre></div>
<section id="loop-unrolling" class="level3">
<h3 class="anchored" data-anchor-id="loop-unrolling">Loop Unrolling</h3>
<p><a href="https://docs.modular.com/mojo/manual/decorators/parameter/"><code>@parameter</code></a> is Mojo’s implementation of <strong>loop unrolling</strong>. This has the same functionality as <code>pragma unroll(N)</code> in CUDA.</p>
<p>When unroll is in effect, the optimizer determines and applies the best unrolling factor for each loop; in some cases, the loop control might be modified to avoid unnecessary branching. The compiler remains the final arbiter of whether the loop is unrolled<span class="citation" data-cites="nvidiapragmaunroll">[4]</span>.</p>
<p><code>@parameter</code> isn’t limited to loops/branches-you can slap it on an inner function and Mojo will build a <strong>parametric closure</strong>, defined as<span class="citation" data-cites="mojoparameter">[5]</span>:</p>
<blockquote class="blockquote">
<p>A parametric closure is a nested function decorated with <code>@parameter</code>. Any values it captures from the surrounding scope are treated as compile-time constants. The compiler materialises one specialised version of the closure for every distinct set of captured values</p>
</blockquote>
<p>Example:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>parametric_closure.mojo</strong></pre>
</div>
<div class="sourceCode" id="cb8" data-filename="parametric_closure.mojo" style="background: #f1f3f5;"><pre class="sourceCode mojo code-with-copy"><code class="sourceCode mojo"><span id="cb8-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> make_shift(off: Int):</span>
<span id="cb8-2">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@parameter</span>            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ← specialised per ‘off'</span></span>
<span id="cb8-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> shift(x: Int) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> Int:</span>
<span id="cb8-4">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> off</span>
<span id="cb8-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> shift</span>
<span id="cb8-6"></span>
<span id="cb8-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span> s1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> make_shift(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># emits shift-$off=1</span></span>
<span id="cb8-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span> s4 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> make_shift(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># emits shift-$off=4</span></span></code></pre></div>
</div>
<p>No runtime captures, no heap boxing-the constant <code>off</code> is literally spliced into the generated IR, so calls to <code>s1</code>/<code>s4</code> inline like normal code and can be further unrolled or constant-folded.</p>
<p>Why is this safe? Mojo’s <em>origin</em> system<span class="citation" data-cites="mojo_lifetimes">[6]</span> assigns each compile-time constant its own immutable origin. The closure therefore can’t outlive or mutate the thing it captured; once the surrounding scope ends those origins die too, guaranteeing that the specialised code never touches expired storage.</p>
<p>In summary, you get closure ergonomics plus “zero-cost abstraction”<span class="citation" data-cites="zero_cost_abstractions">[7]</span> performance-ideal for GPU kernels where every cycle and register matters.</p>
</section>
</section>
<section id="block-boundary" class="level2">
<h2 class="anchored" data-anchor-id="block-boundary">Block Boundary</h2>
<p>We now aim to perform convolution over an input that is larger than a single block. Due to the nature of convolution operation, this introduces interesting boundary conditions. Specifically, the output of block N now depends on block N - 1, when N &gt; 1.</p>
<p>The blue cells are the data <em>owned</em> by the current thread-block. The orange cells are the first few elements of the <em>next</em> block that the convolution window will inevitably peek at.</p>
<p><a href="mojo_gpu_puzzles/p11_block_boundary.png" class="lightbox" data-gallery="quarto-lightbox-gallery-8"><img src="https://shubhamg.in/posts/mojo_gpu_puzzles/p11_block_boundary.png" class="img-fluid"></a></p>
<section id="problem-statement" class="level3">
<h3 class="anchored" data-anchor-id="problem-statement">Problem statement</h3>
<p>Run a 1-D convolution with a <code>CONV₂</code>-tap kernel over an input that is longer than one block (<code>TPB</code> threads). We want every thread to:</p>
<ul>
<li>Pull data from <strong>shared memory only</strong> (once it’s loaded, stay in-block)<br>
</li>
<li>Avoid divergent branches and random global reads<br>
</li>
<li>Keep the load pattern fully coalesced</li>
</ul>
<p>Naïve global loads meet none of those goals-once a window crosses the block edge the tail threads must issue conditional, <em>straggling</em> reads (i.e.&nbsp;each thread grabs a lone, scattered element from global memory instead of part of one tidy, coalesced burst).</p>
</section>
<section id="the-halo-idea" class="level3">
<h3 class="anchored" data-anchor-id="the-halo-idea">The halo idea</h3>
<p>Give each block an in-block “fence extension”:</p>
<pre><code>shared_a = …[TPB + (CONV₂ − 1)]   # main slice + halo</code></pre>
<p>The extra <code>(CONV₂ − 1)</code> slots-the <em>halo</em>-mirror the first <code>(CONV₂ − 1)</code> elements of the next block (or zeros if we’re already at EOF). That single change guarantees that every sliding window lives in one contiguous span of shared memory.</p>
<p>The elements that are involved in multiple tiles and loaded by multiple blocks are commonly referred to as <em>halo cells</em> or <em>skirt cells</em> since they “hang” from the side of the part that is used solely by a single block<span class="citation" data-cites="iitd_parallel_convolution">[8]</span>.</p>
<p>Loading recipe (matches the numbered arrows in the figure):</p>
<ol type="1">
<li><strong>Bulk copy</strong> - all <code>TPB</code> threads dump their element:<br>
<code>shared_a[t] = a[blockStart + t]</code></li>
<li><strong>Halo fill</strong> - threads <code>t &lt; (CONV₂ − 1)</code> copy the tail:<br>
<code>shared_a[TPB + t] = (a[blockStart + TPB + t] if in-range else 0)</code></li>
<li><strong>Kernel stash</strong> - threads <code>t &lt; CONV₂</code> cache the weights:<br>
<code>shared_b[t] = b[t]</code></li>
<li><code>barrier()</code> - everyone syncs</li>
</ol>
<p>After step 4 every thread sees:</p>
<pre><code>      main slice              halo
[ … local_i … TPB − 1 | TPB … TPB+CONV₂−2 ]</code></pre>
<p>Code to perform the actual computation is the same as in Puzzle 10.</p>
<p>One barrier, no branches and 100 % shared-memory hits ensure our kernel is fast and efficient!</p>
<details open="">
<summary>
<strong>Solution</strong>
</summary>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>p11_block_boundary.mojo</strong></pre>
</div>
<div class="sourceCode" id="cb11" data-filename="p11_block_boundary.mojo" style="background: #f1f3f5;"><pre class="sourceCode mojo code-with-copy"><code class="sourceCode mojo"><span id="cb11-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">alias</span> SIZE_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span></span>
<span id="cb11-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">alias</span> CONV_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span></span>
<span id="cb11-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">alias</span> BLOCKS_PER_GRID_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb11-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">alias</span> THREADS_PER_BLOCK_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (TPB, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb11-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">alias</span> in_2_layout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Layout.row_major(SIZE_2)</span>
<span id="cb11-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">alias</span> out_2_layout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Layout.row_major(SIZE_2)</span>
<span id="cb11-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">alias</span> conv_2_layout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Layout.row_major(CONV_2)</span>
<span id="cb11-8"></span>
<span id="cb11-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> conv_1d_block_boundary[</span>
<span id="cb11-10">    in_layout: Layout, out_layout: Layout, conv_layout: Layout, dtype: DType</span>
<span id="cb11-11">](</span>
<span id="cb11-12">    output: LayoutTensor[mut<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, dtype, out_layout],</span>
<span id="cb11-13">    a: LayoutTensor[mut<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, dtype, in_layout],</span>
<span id="cb11-14">    b: LayoutTensor[mut<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, dtype, conv_layout],</span>
<span id="cb11-15">):</span>
<span id="cb11-16">    global_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> block_dim.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> block_idx.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> thread_idx.x</span>
<span id="cb11-17">    local_i  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> thread_idx.x</span>
<span id="cb11-18"></span>
<span id="cb11-19">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># input slice + halo</span></span>
<span id="cb11-20">    shared_a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tb[dtype]().row_major[TPB <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> CONV_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]().shared().alloc()</span>
<span id="cb11-21"></span>
<span id="cb11-22">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># load kernel</span></span>
<span id="cb11-23">    shared_b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tb[dtype]().row_major[CONV_2]().shared().alloc()</span>
<span id="cb11-24"></span>
<span id="cb11-25">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> global_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> SIZE_2:</span>
<span id="cb11-26">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># coalesced load of main slice</span></span>
<span id="cb11-27">        shared_a[local_i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a[global_i]                  </span>
<span id="cb11-28"></span>
<span id="cb11-29">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># only first CONV_2 threads participate</span></span>
<span id="cb11-30">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> local_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> CONV_2:</span>
<span id="cb11-31">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># load kernel into shared memory</span></span>
<span id="cb11-32">        shared_b[local_i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> b[local_i]                   </span>
<span id="cb11-33"></span>
<span id="cb11-34">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># threads responsible for halo load</span></span>
<span id="cb11-35">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> local_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> CONV_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb11-36">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># element that lives in next block</span></span>
<span id="cb11-37">        <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">var</span> next_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> global_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> TPB                    </span>
<span id="cb11-38">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># pad with zeros</span></span>
<span id="cb11-39">        shared_a[local_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> TPB] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a[next_idx] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> next_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> SIZE_2 <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span></span>
<span id="cb11-40"></span>
<span id="cb11-41">    barrier()</span>
<span id="cb11-42"></span>
<span id="cb11-43">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># skip threads mapping past the end</span></span>
<span id="cb11-44">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> global_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> SIZE_2:</span>
<span id="cb11-45">        <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">var</span> local_sum: output.element_type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span></span>
<span id="cb11-46"></span>
<span id="cb11-47">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@parameter</span>                                       </span>
<span id="cb11-48">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(CONV_2):                          </span>
<span id="cb11-49">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># dot product of window &amp; kernel</span></span>
<span id="cb11-50">            local_sum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> shared_a[local_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> j] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> shared_b[j]</span>
<span id="cb11-51">        output[global_i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> local_sum</span></code></pre></div>
</div>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb12-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pixi</span> run p11 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--block-boundary</span></span>
<span id="cb12-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># out: HostBuffer([14.0, 20.0, 26.0, 32.0, 38.0, 44.0, 50.0, 56.0, 62.0, 68.0, 74.0, 80.0, 41.0, 14.0, 0.0])</span></span>
<span id="cb12-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># expected: HostBuffer([14.0, 20.0, 26.0, 32.0, 38.0, 44.0, 50.0, 56.0, 62.0, 68.0, 74.0, 80.0, 41.0, 14.0, 0.0])</span></span></code></pre></div>
</details>
</section>
</section>
</section>
<section id="indexing" class="level1">
<h1>From 1D Strips to 2D Tiles</h1>
<p>Sliding a 1D window over an audio buffer was straightforward: one axis, one index. Images and matrices, however, live on chessboards, not lines. To convolve or multiply them efficiently we need to map <strong>two spatial dimensions</strong> onto the GPU’s grid-block-thread hierarchy.</p>
<section id="thread-hierarchy-in-2d" class="level3">
<h3 class="anchored" data-anchor-id="thread-hierarchy-in-2d">Thread Hierarchy in 2D</h3>
<p>The GPU execution model extends naturally to 2D with a three-level hierarchy:</p>
<table class="caption-top table">
<thead>
<tr class="header">
<th>Level</th>
<th>Analogy</th>
<th>Coordinates</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><strong>Grid</strong></td>
<td>City</td>
<td><code>(blockIdx.x, blockIdx.y)</code></td>
</tr>
<tr class="even">
<td><strong>Block</strong></td>
<td>City block</td>
<td><code>(threadIdx.x, threadIdx.y)</code></td>
</tr>
<tr class="odd">
<td><strong>Thread</strong></td>
<td>House</td>
<td>computed from block + thread IDs</td>
</tr>
</tbody>
</table>
<div class="quarto-figure quarto-figure-left">
<figure class="figure">
<div class="quarto-figure quarto-figure-left">
<figure class="figure">
<p><a href="mojo_gpu_puzzles/p13_block.png" class="lightbox" data-gallery="quarto-lightbox-gallery-9" title="2D Block Layout"><img src="https://shubhamg.in/posts/mojo_gpu_puzzles/p13_block.png" class="img-fluid quarto-figure quarto-figure-left figure-img" alt="2D Block Layout"></a></p>
</figure>
</div>
<figcaption>2D Block Layout</figcaption>
</figure>
</div>
<p>Within each block, you choose the thread footprint at kernel launch with <code>THREADS_PER_BLOCK = (blockDim.x, blockDim.y)</code>, giving <code>blockDim.x * blockDim.y</code> total threads per block.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="mojo_gpu_puzzles/p13_thread.png" class="lightbox" data-gallery="quarto-lightbox-gallery-10" title="2D Thread Layout"><img src="https://shubhamg.in/posts/mojo_gpu_puzzles/p13_thread.png" class="img-fluid figure-img" alt="2D Thread Layout"></a></p>
<figcaption>2D Thread Layout</figcaption>
</figure>
</div>
</section>
<section id="warp" class="level3">
<h3 class="anchored" data-anchor-id="warp">What’s a Warp?</h3>
<p>Under the hood, the GPU executes <strong>32 threads at once</strong> in groups called <strong>warps</strong> (AMD calls them <em>wavefronts</em><span class="citation" data-cites="amd_gpu_basics">[9]</span>). All 32 lanes run the same instruction each cycle (SIMT). Thread divergence or uncoalesced memory access forces the warp to serialize, so we design our 2D tiles around these 32-lane chunks.</p>
<p><strong>Hardware facts:</strong></p>
<ul>
<li><strong>SIMT execution</strong>: All 32 threads in a warp execute the same instruction. Branching splits the warp and runs paths serially.</li>
<li><strong>Memory coalescing</strong>: A warp performs one 32-lane memory request when threads access consecutive addresses.</li>
<li><strong>Occupancy</strong>: The number of warps that can run simultaneously on a streaming multiprocessor, limited by registers and shared memory per block.</li>
</ul>
<p>Grids and blocks are a programmer-friendly abstraction. Warps are what the hardware actually schedules.</p>
</section>
<section id="computing-global-matrix-indices" class="level3">
<h3 class="anchored" data-anchor-id="computing-global-matrix-indices">Computing Global Matrix Indices</h3>
<p>The key insight is that every thread computes its global position using the same formula:</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode mojo code-with-copy"><code class="sourceCode mojo"><span id="cb13-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span> col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> block_idx.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> block_dim.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> thread_idx.x  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># column index</span></span>
<span id="cb13-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span> row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> block_idx.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> block_dim.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> thread_idx.y  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># row index</span></span></code></pre></div>
<p>This maps the thread hierarchy directly to matrix coordinates:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="mojo_gpu_puzzles/p13_matrix_position.png" class="lightbox" data-gallery="quarto-lightbox-gallery-11" title="Matrix Indexing"><img src="https://shubhamg.in/posts/mojo_gpu_puzzles/p13_matrix_position.png" class="img-fluid figure-img" alt="Matrix Indexing"></a></p>
<figcaption>Matrix Indexing</figcaption>
</figure>
</div>
<p>For an M×N output matrix, you typically launch:</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode mojo code-with-copy"><code class="sourceCode mojo"><span id="cb14-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">alias</span> TILE_X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># threads per block in x dimension</span></span>
<span id="cb14-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">alias</span> TILE_Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># threads per block in y dimension</span></span>
<span id="cb14-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">alias</span> BLOCKS_X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ceildiv(N, TILE_X)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># columns</span></span>
<span id="cb14-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">alias</span> BLOCKS_Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ceildiv(M, TILE_Y)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># rows</span></span>
<span id="cb14-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">alias</span> BLOCKS_PER_GRID <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (BLOCKS_X, BLOCKS_Y)</span>
<span id="cb14-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">alias</span> THREADS_PER_BLOCK <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (TILE_Y, TILE_X)</span></code></pre></div>
</section>
<section id="choosing-tile-size" class="level3">
<h3 class="anchored" data-anchor-id="choosing-tile-size">Choosing Tile Size</h3>
<p>As shown earlier, because a warp wants contiguous addresses, we’ll carve the matrix into 16×16 tiles. Here’s how the hardware facts translate to design choices:</p>
<ul>
<li><strong>Warp-aligned rows</strong>: Make tile width a multiple of 32 (warp size) so each row loads as a single coalesced burst.</li>
<li><strong>Shared memory reuse</strong>: Square tiles minimize the halo-to-area ratio, so each global load gets reused ~K times across the convolution window.</li>
<li><strong>Resource budgeting</strong>: 256-512 threads per block (8-16 warps) keeps enough warps resident for latency hiding without exhausting registers or shared memory.</li>
</ul>
<p>A 16×16 tile gives 256 threads = 8 warps, hitting the sweet spot for most GPUs.</p>
</section>
<section id="bounds-checking" class="level3">
<h3 class="anchored" data-anchor-id="bounds-checking">Bounds Checking</h3>
<p>Since matrix dimensions are rarely exact multiples of tile size, always guard against out-of-bounds access:</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode mojo code-with-copy"><code class="sourceCode mojo"><span id="cb15-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> M <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> N:</span>
<span id="cb15-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># safe to access matrix[row, col]</span></span></code></pre></div>
<p>Mojo doesn’t provide automatic bound checking when writing to shared memory <span class="citation" data-cites="mojo_layouttensor_setitem">[10]</span>.</p>
<details>
<summary>
<strong>Worked Example: 40×50 Matrix with 16×16 Tiles</strong>
</summary>
<p>For a 40×50 matrix with 16×16 tiles:</p>
<pre><code>        col 0……15 16……31 32……47
 row
 0…15    Blk(0,0)  Blk(1,0)  Blk(2,0)
16…31    Blk(0,1)  Blk(1,1)  Blk(2,1)
32…39    Blk(0,2)  Blk(1,2)  Blk(2,2)</code></pre>
<p>Each thread in Block(1,1) computes one element where row ∈ [16,31] and col ∈ [16,31]. Note that Block(2,2) only processes 8×16 elements due to the matrix boundaries.</p>
</details>
</section>
<section id="indexing-pattern-template" class="level3">
<h3 class="anchored" data-anchor-id="indexing-pattern-template">Indexing Pattern Template</h3>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode mojo code-with-copy"><code class="sourceCode mojo"><span id="cb17-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span> row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> block_idx.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> block_dim.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> thread_idx.y</span>
<span id="cb17-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span> col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> block_idx.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> block_dim.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> thread_idx.x</span>
<span id="cb17-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> M <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> N:</span>
<span id="cb17-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Process matrix[row, col]</span></span></code></pre></div>
<p>This indexing pattern appears in every 2D GPU kernel-matrix multiplication, 2D convolution, transpose, etc.</p>
<blockquote class="blockquote">
<p><strong>Note</strong>: Mojo/CUDA grids and blocks can also have a third dimension (<code>block_idx.z</code>, <code>thread_idx.z</code>) for problems like 3D volume processing or batch operations. We’ll cover that when we encounter 3D kernels.</p>
</blockquote>
</section>
</section>
<section id="bonus-2d-convolution" class="level1">
<h1>Bonus: 2D Convolution</h1>
<p>We can extend our implementation for 1D convolution to a 2D convolution.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="mojo_gpu_puzzles/2d_convolution.gif" class="lightbox" data-gallery="quarto-lightbox-gallery-12" title="Source: Toast Lab"><img src="https://shubhamg.in/posts/mojo_gpu_puzzles/2d_convolution.gif" class="img-fluid quarto-figure quarto-figure-center figure-img" alt="Source: Toast Lab"></a></p>
</figure>
</div>
<figcaption>Source: <a href="https://toast-lab.sist.shanghaitech.edu.cn/courses/CS110@ShanghaiTech/Spring-2024/project/p1.2-web/Project%201.2%20-%20Computer%20Architecture%20I%20-%20ShanghaiTech%20University.html">Toast Lab</a></figcaption>
</figure>
</div>
<p>Everything is exactly the same idea as 1-D, only now we have two spatial dims:</p>
<ul>
<li>We launch a 2D grid of <code>(ceildiv(WIDTH,TPB_Y), ceildiv(HEIGHT,TPB_X))</code> blocks of <code>TPB_Y×TPB_X</code> threads.</li>
<li>Each block allocates a shared tile of size <code>(TPB_Y+K−1)×(TPB_X+K−1)</code> to hold its “main” patch plus a one‐pixel halo on the bottom/right.</li>
<li>We also stash the full <code>K×K</code> kernel into shared_k.</li>
<li>After a single barrier(), each thread does two nested <code>@parameter</code> loops over <code>ky,kx∈[0,K)</code> to compute a dot‐product.</li>
</ul>
<details open="">
<summary>
<strong>Solution</strong>
</summary>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>p11_conv_2d.mojo</strong></pre>
</div>
<div class="sourceCode" id="cb18" data-filename="p11_conv_2d.mojo" style="background: #f1f3f5;"><pre class="sourceCode mojo code-with-copy"><code class="sourceCode mojo"><span id="cb18-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> math <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ceildiv</span>
<span id="cb18-2">...</span>
<span id="cb18-3"></span>
<span id="cb18-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">alias</span> TPB_X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span></span>
<span id="cb18-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">alias</span> TPB_Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span></span>
<span id="cb18-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">alias</span> WIDTH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span></span>
<span id="cb18-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">alias</span> HEIGHT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span></span>
<span id="cb18-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">alias</span> K     <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb18-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">alias</span> BLOCKS_PER_GRID_2D  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (ceildiv(WIDTH, TPB_Y),  ceildiv(HEIGHT, TPB_X))</span>
<span id="cb18-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">alias</span> THREADS_PER_BLOCK_2D <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (TPB_Y, TPB_X)</span>
<span id="cb18-11"></span>
<span id="cb18-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> conv_2d_halo[</span>
<span id="cb18-13">    in_layout : Layout, out_layout : Layout,</span>
<span id="cb18-14">    k_layout  : Layout, dtype : DType</span>
<span id="cb18-15">](</span>
<span id="cb18-16">    output : LayoutTensor[mut<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, dtype, out_layout],</span>
<span id="cb18-17">    inp    : LayoutTensor[mut<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, dtype, in_layout],</span>
<span id="cb18-18">    kernel : LayoutTensor[mut<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, dtype, k_layout],</span>
<span id="cb18-19">):</span>
<span id="cb18-20">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span> gx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> block_idx.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> block_dim.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> thread_idx.x</span>
<span id="cb18-21">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span> gy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> block_idx.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> block_dim.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> thread_idx.y</span>
<span id="cb18-22">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span> lx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> thread_idx.x</span>
<span id="cb18-23">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span> ly <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> thread_idx.y</span>
<span id="cb18-24"></span>
<span id="cb18-25">    const TILE_W <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TPB_X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> K <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb18-26">    const TILE_H <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TPB_Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> K <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb18-27"></span>
<span id="cb18-28">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># allocate (main + halo) + kernel</span></span>
<span id="cb18-29">    shared_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tb[dtype]().row_major[TILE_H, TILE_W]().shared().alloc()</span>
<span id="cb18-30">    shared_k   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tb[dtype]().row_major[K,K]().shared().alloc()</span>
<span id="cb18-31"></span>
<span id="cb18-32">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1) bulk copy</span></span>
<span id="cb18-33">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> gx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> WIDTH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> gy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> HEIGHT:</span>
<span id="cb18-34">        shared_img[ly, lx] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> inp[gy, gx]</span>
<span id="cb18-35">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb18-36">        shared_img[ly, lx] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span></span>
<span id="cb18-37"></span>
<span id="cb18-38">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2) halo copy (strided so we cover the whole TILE_H/TILE_W)</span></span>
<span id="cb18-39">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">var</span> hy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ly</span>
<span id="cb18-40">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> hy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> TILE_H:</span>
<span id="cb18-41">        <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">var</span> hx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lx</span>
<span id="cb18-42">        <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span> gy2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> block_idx.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> block_dim.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> hy</span>
<span id="cb18-43">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> hx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> TILE_W:</span>
<span id="cb18-44">            <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span> gx2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> block_idx.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> block_dim.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> hx</span>
<span id="cb18-45">            shared_img[hy, hx] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb18-46">                inp[gy2, gx2] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (gy2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> HEIGHT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> gx2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> WIDTH) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span></span>
<span id="cb18-47">            )</span>
<span id="cb18-48">            hx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> TPB_X</span>
<span id="cb18-49">        hy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> TPB_Y</span>
<span id="cb18-50"></span>
<span id="cb18-51">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 3) stash the kernel</span></span>
<span id="cb18-52">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> ly <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> K <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> lx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> K:</span>
<span id="cb18-53">        shared_k[ly, lx] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> kernel[ly, lx]</span>
<span id="cb18-54"></span>
<span id="cb18-55">    barrier()  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sync both shared buffers</span></span>
<span id="cb18-56"></span>
<span id="cb18-57">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 4) compute 3×3 dot‐product</span></span>
<span id="cb18-58">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> gx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> WIDTH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> gy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> HEIGHT:</span>
<span id="cb18-59">        <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">var</span> local_sum: Float32 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span></span>
<span id="cb18-60">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@parameter</span> </span>
<span id="cb18-61">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ky <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(K):</span>
<span id="cb18-62">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@parameter</span> </span>
<span id="cb18-63">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> kx <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(K):</span>
<span id="cb18-64">                local_sum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> shared_img[ly <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> ky, lx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> kx] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> shared_k[ky, kx]</span>
<span id="cb18-65">        output[gy, gx] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> local_sum</span></code></pre></div>
</div>
</details>
<p>After making a <a href="https://github.com/goodhamgupta/mojo-gpu-puzzles/commit/b7961ce0e5ea8753a866cbf671881ac1bdf4acd9">few changes</a> to the test harness, we get the following result:</p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb19-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pixi</span> run p11 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--conv-2d</span></span>
<span id="cb19-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># out: HostBuffer([9.0, 9.0, 9.0, 9.0, 9.0,...,6.0, 3.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 4.0, 2.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 2.0, 1.0])</span></span>
<span id="cb19-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># expected: HostBuffer([9.0, 9.0, 9.0, 9.0, 9.0,..., 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 4.0, 2.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 2.0, 1.0])</span></span></code></pre></div>
<p>We’ll dive into the shared memory tricks like parking partial results, handling 2-D thread and block indexing, and performing halo copies when we get to matrix multiply in <a href="@puzzle-14">Puzzle 14</a>.</p>
</section>
<section id="puzzle-12" class="level1">
<h1><a href="https://builds.modular.com/puzzles/puzzle_12/puzzle_12.html">Puzzle 12: Prefix Sum</a></h1>
<p>The <strong>prefix sum</strong> (or <em>scan</em>) problem takes an input array <code>[a₀, a₁, …, aₙ₋₁]</code> and produces the running totals</p>
<pre class="text"><code>[a₀, (a₀ ⊕ a₁), …, (a₀ ⊕ a₁ ⊕ … ⊕ aₙ₋₁)]</code></pre>
<p>It’s a foundational primitive in parallel computing-used for stream compaction, sorting, histograms, and more. At first glance, prefix sum looks inherently serial (each output depends on all previous inputs), but clever algorithms can parallelize it efficiently.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="mojo_gpu_puzzles/p12_prefix_scan.png" class="lightbox" data-gallery="quarto-lightbox-gallery-13" title="Prefix‐Sum Illustration"><img src="https://shubhamg.in/posts/mojo_gpu_puzzles/p12_prefix_scan.png" class="img-fluid quarto-figure quarto-figure-center figure-img" alt="Prefix‐Sum Illustration"></a></p>
</figure>
</div>
<figcaption>Prefix‐Sum Illustration</figcaption>
</figure>
</div>

<section id="hillis-steele-algorithm" class="level2">
<h2 class="anchored" data-anchor-id="hillis-steele-algorithm">Hillis-Steele Algorithm</h2>
<p>A straightforward parallel scan is the <em>Hillis-Steele</em> approach: at each distance <code>d = 1, 2, 4, …</code> every element adds in the value from <code>d</code> positions back. This is the same as the method shown in Puzzle 10</p>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># inclusive scan, power-of-two length</span></span>
<span id="cb21-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> hillis_steele_scan(a, ⊕):</span>
<span id="cb21-3">    n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(a)</span>
<span id="cb21-4">    temp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a.copy()</span>
<span id="cb21-5">    d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb21-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> n:</span>
<span id="cb21-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n):</span>
<span id="cb21-8">            temp[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a[i] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> d <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> a[i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> d] ⊕ a[i]</span>
<span id="cb21-9">        a, temp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> temp, a</span>
<span id="cb21-10">        d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb21-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> a</span></code></pre></div>
<p>In Mojo, this looks as follows:</p>
<details open="">
<summary>
<strong>Solution</strong>
</summary>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>p12_simple.mojo</strong></pre>
</div>
<div class="sourceCode" id="cb22" data-filename="p12_simple.mojo" style="background: #f1f3f5;"><pre class="sourceCode mojo code-with-copy"><code class="sourceCode mojo"><span id="cb22-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> prefix_sum_simple[</span>
<span id="cb22-2">    layout: Layout</span>
<span id="cb22-3">](</span>
<span id="cb22-4">    output: LayoutTensor[mut<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, dtype, layout],</span>
<span id="cb22-5">    a: LayoutTensor[mut<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, dtype, layout],</span>
<span id="cb22-6">    size: Int,</span>
<span id="cb22-7">):</span>
<span id="cb22-8">    global_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> block_dim.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> block_idx.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> thread_idx.x</span>
<span id="cb22-9">    local_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> thread_idx.x</span>
<span id="cb22-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> idx <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(Int(log2(Scalar[dtype](TPB)))):</span>
<span id="cb22-11">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> local_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> offset <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> local_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> SIZE:</span>
<span id="cb22-12">            shared[local_i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> shared[local_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> offset]</span>
<span id="cb22-13"></span>
<span id="cb22-14">        barrier()</span>
<span id="cb22-15">        offset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb22-16"></span>
<span id="cb22-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> global_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> SIZE:</span>
<span id="cb22-18">        output[global_i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> shared[local_i]</span></code></pre></div>
</div>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb23-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pixi</span> run p12 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--simple</span></span>
<span id="cb23-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># out: HostBuffer([0.0, 1.0, 3.0, 6.0, 10.0, 15.0, 21.0, 28.0])</span></span>
<span id="cb23-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># expected: HostBuffer([0.0, 1.0, 3.0, 6.0, 10.0, 15.0, 21.0, 28.0])</span></span></code></pre></div>
<p>Each of the log₂(n) rounds does up to n parallel additions (one per active element), so total work is <img src="https://latex.codecogs.com/png.latex?%5Csum_k%20n%20=%20nlog(n)">. Because rounds are serialized by barriers, the longest dependency chain is one add per round i.e <img src="https://latex.codecogs.com/png.latex?O(log%20n)">.</p>
</details></section>
<section id="blellochs-twopass-algorithm" class="level2">
<h2 class="anchored" data-anchor-id="blellochs-twopass-algorithm">Blelloch’s Two‐Pass Algorithm</h2>
<p>Blelloch’s two-pass scan does Θ(n) work by splitting the job into an <strong>up-sweep</strong> (build a reduction tree) and a <strong>down-sweep</strong> (propagate prefixes) <span class="citation" data-cites="blelloch_prefix_sum">[11]</span>.</p>
<p>Why prefer it over the classic Hillis-Steele (Algorithm 1)?</p>
<ol type="1">
<li><p>Hardware constraints: Hillis-Steele assumes one processor per element and updates the array <em>in-place</em> every round. A real GPU doesn’t grant that luxury: a “1024-thread” block actually runs in 32-thread warps that time-slice on the same SM. When warp 0 pauses and warp 1 resumes, in-place writes from one warp can overwrite data the other still needs.</p></li>
<li><p>Synchronisation cost: Avoiding the overwrite requires a barrier after <strong>every</strong> addition - log₂(n) rounds × n threads ⇒ Θ(n log n) operations plus all those barriers.</p></li>
</ol>
<p>Blelloch’s fix to these problems is to break the up-sweep and down-sweep into separate phases:</p>
<ul>
<li>Up-sweep and down-sweep touch disjoint tree levels, so threads never trample each other within a phase.</li>
<li>Only two global barriers are needed (one between the phases, one at the end).</li>
<li>Now you get Θ(n) work and correctness, even for arrays much bigger than a warp.</li>
</ul>
<p>The result is a scan that is both faster and safer on modern GPUs.</p>
<section id="up-sweep-reduce" class="level3">
<h3 class="anchored" data-anchor-id="up-sweep-reduce">Up-sweep (reduce)</h3>
<ul>
<li>Build a binary reduction tree over log₂(n) rounds:
<ul>
<li>Round 1 (step=1): sum each adjacent pair, storing results at indices 1, 3, 5, …</li>
<li>Round 2 (step=2): merge those partial sums into blocks of 4, writing into indices 3, 7, 11, …</li>
<li>Continue doubling the span each round until step = n/2</li>
</ul></li>
<li>After the final round, a[n-1] holds the overall total</li>
</ul>
<p><img src="https://shubhamg.in/posts/mojo_gpu_puzzles/p12_up.gif" class="img-fluid"> <em>Up-Sweep: combining elements in a binary-tree fashion-build partial sums until the final element holds the total.</em></p>
</section>
<section id="down-sweep-propagate" class="level3">
<h3 class="anchored" data-anchor-id="down-sweep-propagate">Down-sweep (propagate)</h3>
<p>After the up-sweep leaves <code>a[n-1]</code> containing the overall sum, we walk the tree top-down to scatter prefix sums into every slot:</p>
<ul>
<li>Initialize the down-sweep with a window size of <code>step = n/2</code>.<br>
</li>
<li>Loop as long as <code>step &gt;= 1</code>:
<ul>
<li>Partition the array into blocks of size <code>2*step</code>. For each block starting at index <code>i</code>:
<ul>
<li>Temporarily store the left-child total from <code>a[i + step - 1]</code>.<br>
</li>
<li>Overwrite that left slot with the right-child subtotal from <code>a[i + 2*step - 1]</code>.<br>
</li>
<li>Add the saved left-child total to the right slot, giving the correct prefix for that subtree.<br>
</li>
</ul></li>
<li>Issue a <code>barrier()</code> so all threads sync before shrinking the window.<br>
</li>
<li>Halve the window: <code>step = step / 2</code>.<br>
</li>
</ul></li>
<li>With each pass, the partial sums trickle down one level of the binary tree; after log₂(n) iterations every element holds its exclusive prefix sum.</li>
</ul>
<p><img src="https://shubhamg.in/posts/mojo_gpu_puzzles/p12_down.gif" class="img-fluid quarto-figure quarto-figure-center"><br>
<em>Down Sweep: siblings swap and accumulate, driving the scan from root back to leaves.</em></p>
<p>Total Operations: <img src="https://latex.codecogs.com/png.latex?%5CTheta(n)">, parallel depth: <img src="https://latex.codecogs.com/png.latex?%5CTheta(%5Clog_2%20n)">.</p>
<details open="">
<summary>
<strong>Solution (Blelloch up-sweep + down-sweep)</strong>
</summary>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>p12_blelloch.mojo</strong></pre>
</div>
<div class="sourceCode" id="cb24" data-filename="p12_blelloch.mojo" style="background: #f1f3f5;"><pre class="sourceCode mojo code-with-copy"><code class="sourceCode mojo"><span id="cb24-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> prefix_sum_blelloch[</span>
<span id="cb24-2">    layout: Layout</span>
<span id="cb24-3">](</span>
<span id="cb24-4">    output:   LayoutTensor[mut<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, dtype, layout],</span>
<span id="cb24-5">    a:     LayoutTensor[mut<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, dtype, layout],</span>
<span id="cb24-6">    size:  Int,</span>
<span id="cb24-7">):</span>
<span id="cb24-8">    global_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> block_idx.x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>block_dim.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> thread_idx.x</span>
<span id="cb24-9">    local_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> thread_idx.x</span>
<span id="cb24-10">    shared <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tb[dtype]().row_major[SIZE]().shared().alloc()</span>
<span id="cb24-11"></span>
<span id="cb24-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> global_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> size:</span>
<span id="cb24-13">        shared[local_idx] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a[global_idx]</span>
<span id="cb24-14">    barrier()</span>
<span id="cb24-15"></span>
<span id="cb24-16">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Up-sweep</span></span>
<span id="cb24-17">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">var</span> stride <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb24-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> stride <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> size:</span>
<span id="cb24-19">        step <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stride <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb24-20">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (local_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> step <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> step <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> (local_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> size):</span>
<span id="cb24-21">            shared[local_idx] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> shared[local_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> stride]</span>
<span id="cb24-22">        barrier()</span>
<span id="cb24-23">        stride <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> step</span>
<span id="cb24-24"></span>
<span id="cb24-25">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Down-sweep</span></span>
<span id="cb24-26">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> local_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb24-27">        shared[local_idx] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb24-28">    barrier()</span>
<span id="cb24-29"></span>
<span id="cb24-30">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">var</span> half <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stride <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb24-31">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> half <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb24-32">        step <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> half <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb24-33">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (local_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> step <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> step <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> (local_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> size):</span>
<span id="cb24-34">            t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> shared[local_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> half]</span>
<span id="cb24-35">            shared[local_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> half] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> shared[local_idx]</span>
<span id="cb24-36">            shared[local_idx] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> t</span>
<span id="cb24-37">        barrier()</span>
<span id="cb24-38">        half <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> half <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb24-39"></span>
<span id="cb24-40">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> global_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> size:</span>
<span id="cb24-41">        output[global_idx] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> shared[local_idx] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> a[global_idx]</span></code></pre></div>
</div>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb25-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pixi</span> run p12 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--blelloch</span></span>
<span id="cb25-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># out: HostBuffer([0.0, 1.0, 3.0, 6.0, 10.0, 15.0, 21.0, 28.0])</span></span>
<span id="cb25-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># expected: HostBuffer([0.0, 1.0, 3.0, 6.0, 10.0, 15.0, 21.0, 28.0])</span></span></code></pre></div>
</details>
<p>This is not the most efficient implementation, but I hope this provides some intuition about the algorithm!</p>
</section>
</section>
<section id="block-boundary-1" class="level2">
<h2 class="anchored" data-anchor-id="block-boundary-1">Block Boundary</h2>
<p>The key difference in this version is that now we have an input array that is larger than the size of a single block.</p>
<p>We split the global scan into two bite-sized passes:</p>
<section id="phase-1---local-scan" class="level3">
<h3 class="anchored" data-anchor-id="phase-1---local-scan">Phase 1 - Local Scan</h3>
<ol type="1">
<li><p>Each block copies its slice into shared memory.<br>
</p></li>
<li><p>Perform an in-block naive scan/Blelloch scan exactly as in the single-block case.<br>
</p></li>
<li><p>The last thread of the block stashes the block’s total <strong>after</strong> the scan into an auxiliary slot at the tail of <code>output</code>:</p>
<pre><code>#  |&lt;---  SIZE_2  ---&gt;|&lt;-- #blocks --&gt;|
#  [   prefix sums   ][ block totals ]</code></pre></li>
</ol>
</section>
<section id="phase-2---propagate-block-totals" class="level3">
<h3 class="anchored" data-anchor-id="phase-2---propagate-block-totals">Phase 2 - Propagate block totals</h3>
<ol type="1">
<li>Every thread grabs the aggregate from the <em>previous</em> block (<code>totals[block_id-1]</code>) and adds it to its own prefix.<br>
Now every element holds the inclusive scan over the <em>whole</em> array.</li>
</ol>
<p><a href="mojo_gpu_puzzles/p12_block_boundary.png" class="lightbox" data-gallery="quarto-lightbox-gallery-14"><img src="https://shubhamg.in/posts/mojo_gpu_puzzles/p12_block_boundary.png" class="img-fluid"></a></p>
<p>We launch the above phases as two separate kernels.</p>
<p><strong>A host-side synchronisation sits between the launches</strong>. That call flushes the work queue and waits until Phase 1 has fully committed its writes to global memory, ensuring the per-block totals are complete and visible before Phase 2 starts consuming them. Skip the sync and the driver is free to overlap or reorder the kernels, letting Phase 2 read garbage.</p>
<details open="">
<summary>
<strong>Solution (Block Boundary Version)</strong>
</summary>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>p12_block_boundary.mojo</strong></pre>
</div>
<div class="sourceCode" id="cb27" data-filename="p12_block_boundary.mojo" style="background: #f1f3f5;"><pre class="sourceCode mojo code-with-copy"><code class="sourceCode mojo"><span id="cb27-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> prefix_sum_local_phase[</span>
<span id="cb27-2">    out_layout: Layout, in_layout: Layout</span>
<span id="cb27-3">](</span>
<span id="cb27-4">    output: LayoutTensor[mut<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, dtype, out_layout],</span>
<span id="cb27-5">    a: LayoutTensor[mut<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, dtype, in_layout],</span>
<span id="cb27-6">    size: Int,</span>
<span id="cb27-7">):</span>
<span id="cb27-8">    global_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> block_dim.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> block_idx.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> thread_idx.x</span>
<span id="cb27-9">    local_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> thread_idx.x</span>
<span id="cb27-10">    shared <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tb[dtype]().row_major[EXTENDED_SIZE]().shared().alloc()</span>
<span id="cb27-11"></span>
<span id="cb27-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> global_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> SIZE_2:</span>
<span id="cb27-13">        shared[local_i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a[global_i]</span>
<span id="cb27-14">    </span>
<span id="cb27-15">    barrier()</span>
<span id="cb27-16">    offset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb27-17"></span>
<span id="cb27-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> idx <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(Int(log2(Scalar[dtype](TPB)))):</span>
<span id="cb27-19">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> local_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> offset <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> local_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> SIZE_2:</span>
<span id="cb27-20">            shared[local_i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> shared[local_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> offset]</span>
<span id="cb27-21"></span>
<span id="cb27-22">        barrier()</span>
<span id="cb27-23">        offset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb27-24"></span>
<span id="cb27-25">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> global_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> SIZE_2:</span>
<span id="cb27-26">        output[global_i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> shared[local_i]</span>
<span id="cb27-27">    </span>
<span id="cb27-28">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> local_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> TPB <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb27-29">        output[size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> block_idx.x] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> shared[local_i]</span>
<span id="cb27-30"></span>
<span id="cb27-31"></span>
<span id="cb27-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Kernel 2: Add block sums to their respective blocks</span></span>
<span id="cb27-33"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> prefix_sum_block_sum_phase[</span>
<span id="cb27-34">    layout: Layout</span>
<span id="cb27-35">](output: LayoutTensor[mut<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, dtype, layout], size: Int):</span>
<span id="cb27-36">    global_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> block_dim.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> block_idx.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> thread_idx.x</span>
<span id="cb27-37">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># FILL ME IN (roughly 3 lines)</span></span>
<span id="cb27-38">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> block_idx.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> global_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> size:</span>
<span id="cb27-39">        prev_block_sum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> output[SIZE_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> block_idx.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb27-40">        output[global_i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> prev_block_sum</span></code></pre></div>
</div>
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb28-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pixi</span> run p12</span>
<span id="cb28-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># out: HostBuffer([0.0, 1.0, 3.0, 6.0, 10.0, 15.0, 21.0, 28.0, 36.0, 45.0, 55.0, 66.0, 78.0, 91.0, 105.0, 28.0, 77.0]) # last 2 elements are the block sums</span></span>
<span id="cb28-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># expected: HostBuffer([0.0, 1.0, 3.0, 6.0, 10.0, 15.0, 21.0, 28.0, 36.0, 45.0, 55.0, 66.0, 78.0, 91.0, 105.0])</span></span></code></pre></div>
</details>
</section>
</section>
</section>
<section id="puzzle-13-axis-sum" class="level1">
<h1><a href="https://puzzles.modular.com/puzzle_13/puzzle_13.html" id="puzzle-13">Puzzle 13: Axis Sum</a></h1>
<p>Axis sum is the 2-D sibling of the dot‐product/prefix puzzles: take a matrix <code>A</code> and collapse one dimension by summing over it.</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0A%5Ctext%7Baxis%7D=0%20&amp;%5C;%5CLongrightarrow%5C;%0A%5Ctext%7Bcolumn-sum:%7D%5C;%5C;%0Aout%5Bj%5D%20&amp;%20=%20%5Csum_%7Bk%7D%20A_%7Bk,j%7D,%20%5Cqquad%20j%20=%200,%5Cdots,N-1%20%5C%5C%5B4pt%5D%0A%5Ctext%7Baxis%7D=1%20&amp;%5C;%5CLongrightarrow%5C;%0A%5Ctext%7Brow-sum:%7D%5C;%5C;%0Aout%5Bi%5D%20&amp;%20=%20%5Csum_%7Bk%7D%20A_%7Bi,k%7D,%20%5Cqquad%20i%20=%200,%5Cdots,M-1%0A%5Cend%7Baligned%7D%0A"></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="mojo_gpu_puzzles/p13_intro.png" class="lightbox" data-gallery="quarto-lightbox-gallery-15" title="Axis Sum"><img src="https://shubhamg.in/posts/mojo_gpu_puzzles/p13_intro.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:50.0%" alt="Axis Sum"></a></p>
</figure>
</div>
<figcaption>Axis Sum</figcaption>
</figure>
</div>
<p>Each row/column is an embarrassingly-parallel reduction, so the GPU kernel just assigns one warp (or block) per slice and performs a standard shared-memory reduction inside the slice.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="mojo_gpu_puzzles/p13_row_sum.png" class="lightbox" data-gallery="quarto-lightbox-gallery-16" title="Row Sum"><img src="https://shubhamg.in/posts/mojo_gpu_puzzles/p13_row_sum.png" class="img-fluid quarto-figure quarto-figure-center figure-img" alt="Row Sum"></a></p>
</figure>
</div>
<figcaption>Row Sum</figcaption>
</figure>
</div>
<details open="">
<summary>
Solution
</summary>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>p13.mojo</strong></pre>
</div>
<div class="sourceCode" id="cb29" data-filename="p13.mojo" style="background: #f1f3f5;"><pre class="sourceCode mojo code-with-copy"><code class="sourceCode mojo"><span id="cb29-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> axis_sum[</span>
<span id="cb29-2">    in_layout: Layout, out_layout: Layout</span>
<span id="cb29-3">](</span>
<span id="cb29-4">    output: LayoutTensor[mut<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, dtype, out_layout],</span>
<span id="cb29-5">    a: LayoutTensor[mut<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, dtype, in_layout],</span>
<span id="cb29-6">    size: Int,</span>
<span id="cb29-7">):</span>
<span id="cb29-8">    local_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> thread_idx.x</span>
<span id="cb29-9">    batch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> block_idx.y</span>
<span id="cb29-10">    shared <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tb[dtype]().row_major[TPB]().shared().alloc()</span>
<span id="cb29-11"></span>
<span id="cb29-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> local_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> SIZE:</span>
<span id="cb29-13">        shared[local_i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a[batch, local_i]</span>
<span id="cb29-14"></span>
<span id="cb29-15">    barrier()</span>
<span id="cb29-16"></span>
<span id="cb29-17">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">var</span> stride <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TPB <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb29-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> stride <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb29-19">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> local_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> stride <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> local_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> stride <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> SIZE:</span>
<span id="cb29-20">            shared[local_i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> shared[local_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> stride]</span>
<span id="cb29-21">        barrier()</span>
<span id="cb29-22">        stride <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb29-23"></span>
<span id="cb29-24">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use first thread to write result</span></span>
<span id="cb29-25">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> local_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb29-26">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output shape is [batch_size, 1]</span></span>
<span id="cb29-27">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># which we why we need the last dimension</span></span>
<span id="cb29-28">        output[batch, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> shared[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
</div>
<div class="sourceCode" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb30-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pixi</span> run p13</span></code></pre></div>
</details>
<p>We can also perform column-sum(axis=0) with a trivial change:</p>
<div class="sourceCode" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode diff code-with-copy"><code class="sourceCode diff"><span id="cb31-1"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">-    if local_i &lt; SIZE:</span></span>
<span id="cb31-2"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">-        shared[local_i] = a[batch, local_i]</span></span>
<span id="cb31-3"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">+    if local_i &lt; SIZE:</span></span>
<span id="cb31-4"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">+        shared[local_i] = a[local_i, batch]</span></span></code></pre></div>
</section>
<section id="puzzle-14-matmul" class="level1">
<h1><a href="https://puzzles.modular.com/puzzle_14/puzzle_14.html" id="puzzle-14">Puzzle 14: Matmul</a></h1>
<p>Arguably the single most important operation in GPU computing, the humble General Matrix Multiplication (GEMM) operation is the computational workhorse behind literally all deep learning models-from simple linear layers to massive transformer architectures.</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AC_%7Bi,j%7D%20=%20%5Csum_%7Bk=1%7D%5E%7BK%7D%20A_%7Bi,k%7D%20%5Ccdot%20B_%7Bk,j%7D%0A"></p>
<blockquote class="blockquote">
<p><strong>Requirement:</strong> For matrix multiplication <img src="https://latex.codecogs.com/png.latex?C%20=%20AB"> to be valid, the number of columns in <img src="https://latex.codecogs.com/png.latex?A"> must equal the number of rows in <img src="https://latex.codecogs.com/png.latex?B">.<br>
That is, if <img src="https://latex.codecogs.com/png.latex?A"> is shape <img src="https://latex.codecogs.com/png.latex?(M,%20K)"> and <img src="https://latex.codecogs.com/png.latex?B"> is shape <img src="https://latex.codecogs.com/png.latex?(K,%20N)">, then <img src="https://latex.codecogs.com/png.latex?C"> will be shape <img src="https://latex.codecogs.com/png.latex?(M,%20N)">.</p>
</blockquote>
<p>GEMM’s ubiquity stems from its perfect match with GPU architecture: thousands of independent multiply-add operations that can be parallelized across thousands of cores. Yet this apparent simplicity masks a deep optimization challenge. Memory bandwidth, cache hierarchies, and thread synchronization all conspire to make naive implementations crawl while hand-tuned libraries like cuBLAS achieve near-theoretical peak performance.</p>
<p>Matmul tuning is a rabbit hole - see Simon Boehm’s fantastic deep-dive <span class="citation" data-cites="siboehm_cuda_mmm">[12]</span> for how wild it gets.</p>
<p>For now, we’ll focus on the core techniques demonstrated by the official puzzle-shared memory tiling and thread cooperation-to build intuition for how high-performance GEMM kernels actually work.</p>
<section id="global-memory-version" class="level2">
<h2 class="anchored" data-anchor-id="global-memory-version">Global Memory Version</h2>
<p>Based on the 2D indexing section, each thread computes one C[row, col] by loading A[row, k] and B[k, col] from global memory, multiplying and accumulating over k. We unroll the k‐loop to cut loop overhead and boost throughput.</p>
<details open="">
<summary>
Solution
</summary>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>p14_naive.mojo</strong></pre>
</div>
<div class="sourceCode" id="cb32" data-filename="p14_naive.mojo" style="background: #f1f3f5;"><pre class="sourceCode mojo code-with-copy"><code class="sourceCode mojo"><span id="cb32-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> naive_matmul[</span>
<span id="cb32-2">    layout: Layout, size: Int</span>
<span id="cb32-3">](</span>
<span id="cb32-4">    output: LayoutTensor[mut<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, dtype, layout],</span>
<span id="cb32-5">    a: LayoutTensor[mut<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, dtype, layout],</span>
<span id="cb32-6">    b: LayoutTensor[mut<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, dtype, layout],</span>
<span id="cb32-7">):</span>
<span id="cb32-8">    row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> block_dim.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> block_idx.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> thread_idx.y</span>
<span id="cb32-9">    col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> block_dim.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> block_idx.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> thread_idx.x</span>
<span id="cb32-10"></span>
<span id="cb32-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> SIZE <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> SIZE:</span>
<span id="cb32-12">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Need this to ensure the mojo compiler knows</span></span>
<span id="cb32-13">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the type of `running_sum`, otherwise it will</span></span>
<span id="cb32-14">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># complain</span></span>
<span id="cb32-15">        <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">var</span> running_sum: output.element_type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb32-16"></span>
<span id="cb32-17">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@parameter</span></span>
<span id="cb32-18">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(SIZE):</span>
<span id="cb32-19">            running_sum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> a[row, k] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> b[k, col]</span>
<span id="cb32-20">        output[row, col] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> running_sum</span></code></pre></div>
</div>
<div class="sourceCode" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb33-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pixi</span> run p14 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--naive</span></span>
<span id="cb33-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># out: HostBuffer([4.0, 6.0, 12.0, 22.0])</span></span>
<span id="cb33-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># expected: HostBuffer([4.0, 6.0, 12.0, 22.0])</span></span></code></pre></div>
</details>
</section>
<section id="shared-memory-version" class="level2">
<h2 class="anchored" data-anchor-id="shared-memory-version">Shared Memory Version</h2>
<p>The previous version suffers from repeated global memory reads. We can optimize this using shared memory:</p>
<ul>
<li>Load matrix tiles once</li>
<li>Synchronize threads</li>
<li>Compute using the cached data.</li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="mojo_gpu_puzzles/p14_shared_mem.png" class="lightbox" data-gallery="quarto-lightbox-gallery-17" title="Matmul with shared memory"><img src="https://shubhamg.in/posts/mojo_gpu_puzzles/p14_shared_mem.png" class="img-fluid quarto-figure quarto-figure-center figure-img" alt="Matmul with shared memory"></a></p>
</figure>
</div>
<figcaption>Matmul with shared memory</figcaption>
</figure>
</div>
<details open="">
<summary>
Solution
</summary>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>p14_shared.mojo</strong></pre>
</div>
<div class="sourceCode" id="cb34" data-filename="p14_shared.mojo" style="background: #f1f3f5;"><pre class="sourceCode mojo code-with-copy"><code class="sourceCode mojo"><span id="cb34-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> single_block_matmul[</span>
<span id="cb34-2">    layout: Layout, size: Int</span>
<span id="cb34-3">](</span>
<span id="cb34-4">    output: LayoutTensor[mut<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, dtype, layout],</span>
<span id="cb34-5">    a: LayoutTensor[mut<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, dtype, layout],</span>
<span id="cb34-6">    b: LayoutTensor[mut<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, dtype, layout],</span>
<span id="cb34-7">):</span>
<span id="cb34-8">    row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> block_dim.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> block_idx.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> thread_idx.y</span>
<span id="cb34-9">    col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> block_dim.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> block_idx.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> thread_idx.x</span>
<span id="cb34-10">    local_row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> thread_idx.y</span>
<span id="cb34-11">    local_col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> thread_idx.x</span>
<span id="cb34-12">    shared_a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tb[dtype]().row_major[TPB, TPB]().shared().alloc()</span>
<span id="cb34-13">    shared_b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tb[dtype]().row_major[TPB, TPB]().shared().alloc()</span>
<span id="cb34-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> size <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> size <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> local_row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> size <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> local_col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> size:</span>
<span id="cb34-15">        shared_a[local_row, local_col] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a[row, col]</span>
<span id="cb34-16">        shared_b[local_row, local_col] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> b[row, col]</span>
<span id="cb34-17"></span>
<span id="cb34-18">    barrier()</span>
<span id="cb34-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> size <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> size <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> local_row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> size <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> local_col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> size:</span>
<span id="cb34-20">        <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">var</span> running_sum: output.element_type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span></span>
<span id="cb34-21"></span>
<span id="cb34-22">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@parameter</span></span>
<span id="cb34-23">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(size):</span>
<span id="cb34-24">            running_sum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> a[local_row, k] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> b[k, local_col]</span>
<span id="cb34-25"></span>
<span id="cb34-26">        output[row, col] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> running_sum</span></code></pre></div>
</div>
<div class="sourceCode" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb35-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pixi</span> run p14 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--naive</span></span>
<span id="cb35-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># out: HostBuffer([4.0, 6.0, 12.0, 22.0])</span></span>
<span id="cb35-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># expected: HostBuffer([4.0, 6.0, 12.0, 22.0])</span></span></code></pre></div>
<p>The Roofline Model offers a first-order answer to a GPU performance question: is my kernel limited by arithmetic throughput or by memory bandwidth?<br>
It does so by plotting operational intensity (FLOPs per byte) against two ceilings - the hardware’s peak FLOP/s and peak DRAM bandwidth—so you can see at a glance which resource is the bottleneck.</p>
</details></section>
<section id="roofline-model" class="level2">
<h2 class="anchored" data-anchor-id="roofline-model"><a href="https://builds.modular.com/puzzles/puzzle_14/roofline.html">Roofline Model</a></h2>
<blockquote class="blockquote">
<p>Note: The Modular GPU Puzzles <a href="https://builds.modular.com/puzzles/puzzle_14/roofline.html">guide</a> already walks through the full roofline derivation, but we’ll repeat it here so that you can follow along without leaving this post.</p>
</blockquote>
<p>The first step is abstracting the hardware-software complexity into a tractable model.</p>
<section id="hardware-model" class="level3">
<h3 class="anchored" data-anchor-id="hardware-model">Hardware Model</h3>
<p>Classic roofline assumes ideal hardware with perfect overlap:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="mojo_gpu_puzzles/p14_hardware.png" class="lightbox" data-gallery="quarto-lightbox-gallery-18" title="Source: NHR at FAU[@nhrfau_roofline_model]"><img src="https://shubhamg.in/posts/mojo_gpu_puzzles/p14_hardware.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:40.0%" alt="Source: NHR at FAU[13]"></a></p>
</figure>
</div>
<figcaption>Source: NHR at FAU<span class="citation" data-cites="nhrfau_roofline_model">[13]</span></figcaption>
</figure>
</div>
<p>The cartoon GPU has only two levers:</p>
<ul>
<li><strong>Compute engine</strong> — peak rate <img src="https://latex.codecogs.com/png.latex?P_%7Bpeak%7D"> (FLOP/s, integer ops/s, etc.)</li>
<li><strong>Memory datapath</strong> — peak bandwidth <img src="https://latex.codecogs.com/png.latex?b_s"> (bytes/s)</li>
</ul>
</section>
<section id="software-model" class="level3">
<h3 class="anchored" data-anchor-id="software-model">Software Model</h3>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="mojo_gpu_puzzles/p14_software.png" class="lightbox" data-gallery="quarto-lightbox-gallery-19" title="Software abstraction: complex GPU kernel simplified to steady-state loop with N flops and V bytes per iteration. Credits: NHR at FAU[@nhrfau_roofline_model]"><img src="https://shubhamg.in/posts/mojo_gpu_puzzles/p14_software.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:60.0%" alt="Software abstraction: complex GPU kernel simplified to steady-state loop with N flops and V bytes per iteration. Credits: NHR at FAU[13]"></a></p>
</figure>
</div>
<figcaption>Software abstraction: complex GPU kernel simplified to steady-state loop with N flops and V bytes per iteration. Credits: NHR at FAU<span class="citation" data-cites="nhrfau_roofline_model">[13]</span></figcaption>
</figure>
</div>
<p>We collapse the kernel’s steady-state loop to:</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?N"> floating-point operations per iteration</li>
<li><img src="https://latex.codecogs.com/png.latex?V"> bytes moved per iteration</li>
</ul>
<p>The <strong>operational intensity</strong> is defined as:</p>
<p><img src="https://latex.codecogs.com/png.latex?I%20=%20%5Cfrac%7BN%7D%7BV%7D%20%5Ctext%7B%20flop/byte%7D"></p>
<p>This ratio is all that survives of the algorithm - prologue/epilogue work, control flow, and synchronizations are swept aside.</p>
<p><strong>Hardware Assumptions:</strong></p>
<table class="caption-top table">
<colgroup>
<col style="width: 5%">
<col style="width: 22%">
<col style="width: 29%">
<col style="width: 16%">
<col style="width: 25%">
</colgroup>
<thead>
<tr class="header">
<th>#</th>
<th>Assumption</th>
<th>Works because…</th>
<th>Reality</th>
<th>Breaks when…</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>H1</td>
<td>Peak DRAM bandwidth is reachable</td>
<td>Ideal streaming</td>
<td>Requires 100% streaming, &gt;1MB tiles</td>
<td>Strided or tiny tiles</td>
</tr>
<tr class="even">
<td>H2</td>
<td>Peak FLOP/s reachable</td>
<td>Full FMA rate</td>
<td>All ALUs busy every cycle</td>
<td>Divergence, low occupancy</td>
</tr>
<tr class="odd">
<td>H3</td>
<td>One bandwidth number is enough</td>
<td>DRAM dominates</td>
<td>L1/L2/SMEM add separate roofs</td>
<td>Lower-level choke points</td>
</tr>
</tbody>
</table>
<p><strong>Software Assumptions:</strong></p>
<table class="caption-top table">
<colgroup>
<col style="width: 5%">
<col style="width: 22%">
<col style="width: 29%">
<col style="width: 16%">
<col style="width: 25%">
</colgroup>
<thead>
<tr class="header">
<th>#</th>
<th>Assumption</th>
<th>Works because…</th>
<th>Reality</th>
<th>Breaks when…</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>S1</td>
<td>Loads fully hide latency</td>
<td>1000s inflight warps</td>
<td>Requires deep pipelining</td>
<td>Short kernels, frequent syncs</td>
</tr>
<tr class="even">
<td>S2</td>
<td>Single operational intensity</td>
<td>Steady-state loop</td>
<td>Real kernels mix phases</td>
<td>Gather/scatter, epilogue code</td>
</tr>
<tr class="odd">
<td>S3</td>
<td>Launch/transfer overhead small</td>
<td>Long kernel runs</td>
<td>Amortised over many iterations</td>
<td>Micro-benchmarks, chaining</td>
</tr>
</tbody>
</table>
</section>
<section id="naive-roofline-model" class="level3">
<h3 class="anchored" data-anchor-id="naive-roofline-model">Naive Roofline Model</h3>
<p>With these assumptions, hardware and software collapse to one parameter—the operational intensity <img src="https://latex.codecogs.com/png.latex?I">—and attainable performance becomes</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0AP(I)%20&amp;=%20%5Cmin%5C!%5Cbigl(P_%7B%5Ctext%7Bpeak%7D%7D,%5C,%20I%5C,b_s%5Cbigr)%20%5C%5C%0AI_%7B%5Ctext%7Bcrit%7D%7D%20&amp;=%20%5Cfrac%7BP_%7B%5Ctext%7Bpeak%7D%7D%7D%7Bb_s%7D%0A%5Cend%7Baligned%7D%0A"></p>
<p>At the critical intensity <img src="https://latex.codecogs.com/png.latex?I_%7Bcrit%7D">, the bandwidth and compute roofs intersect, splitting kernels into two classes:</p>
<ul>
<li><strong>Memory-bound</strong> (<img src="https://latex.codecogs.com/png.latex?I%20%3C%20I_%7Bcrit%7D">) -&gt; Performance rises linearly with <img src="https://latex.codecogs.com/png.latex?I"></li>
<li><strong>Compute-bound</strong> (<img src="https://latex.codecogs.com/png.latex?I%20%5Cgeq%20I_%7Bcrit%7D">) -&gt; Performance plateaus at <img src="https://latex.codecogs.com/png.latex?P_%7Bpeak%7D"></li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="mojo_gpu_puzzles/p14_roofline.png" class="lightbox" data-gallery="quarto-lightbox-gallery-20" title="Roofline model: sloped red line shows memory bandwidth limit, flat blue line is compute peak, kernel’s operational intensity marked as a dot."><img src="https://shubhamg.in/posts/mojo_gpu_puzzles/p14_roofline.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:60.0%" alt="Roofline model: sloped red line shows memory bandwidth limit, flat blue line is compute peak, kernel’s operational intensity marked as a dot."></a></p>
</figure>
</div>
<figcaption>Roofline model: sloped red line shows memory bandwidth limit, flat blue line is compute peak, kernel’s operational intensity marked as a dot.</figcaption>
</figure>
</div>
</section>
<section id="where-the-roofline-model-fails" class="level3">
<h3 class="anchored" data-anchor-id="where-the-roofline-model-fails">Where the Roofline Model Fails</h3>
<p>Even in small puzzle kernels, these assumptions falter. In real workloads, they break down completely.</p>
<p>What actually works:</p>
<ol type="1">
<li><strong>Measure real limits</strong> with tools like Nsight or rocprof</li>
<li><strong>Redraw the roofline</strong> using measured ceilings—L2 roof, Tensor-core roof, not just DRAM and peak FLOPs</li>
<li><strong>Adjust your kernel</strong>: boost <img src="https://latex.codecogs.com/png.latex?I"> (tiling, shared memory, tensor ops) or raise the ceilings (improve occupancy, reduce stalls)</li>
</ol>
<blockquote class="blockquote">
<p>Unfortunately no Nsight eye-candy as of yet - my <code>ncu</code> setup hit a <a href="https://developer.nvidia.com/nvidia-development-tools-solutions-err_nvgpuctrperm-permission-issue-ters">permissions wall</a>. I’ll fix it and share a profiler deep-dive soon. Stay tuned!</p>
</blockquote>
<p>The textbook roofline is a guide, not reality. Measure, adapt, and push your kernel as close to the real limits as you can.</p>
</section>
</section>
<section id="roofline-estimation" class="level2">
<h2 class="anchored" data-anchor-id="roofline-estimation">Roofline Estimation</h2>
<p>Let’s apply the roofline model to a 3×3 matrix multiplication, which is still small enough to hand-calculate.</p>
<p>The RTX 4000 Ada provides<span class="citation" data-cites="rtx_ada_specs">[14]</span>:</p>
<ul>
<li><strong>Peak compute</strong>: 26.7 TFLOPS (single-precision)<br>
</li>
<li><strong>Peak DRAM bandwidth</strong>: 360 GB/s<br>
</li>
<li><strong>Critical intensity</strong>: <img src="https://latex.codecogs.com/png.latex?I_%7Bcrit%7D%20=%20%5Cfrac%7B26.7%20%5Ctimes%2010%5E%7B12%7D%7D%7B360%20%5Ctimes%2010%5E9%7D%20=%2074.2"> FLOP/byte</li>
</ul>
<section id="naive-matmul-analysis" class="level3">
<h3 class="anchored" data-anchor-id="naive-matmul-analysis">Naive MatMul Analysis</h3>
<p>For <img src="https://latex.codecogs.com/png.latex?C%20=%20A%20%5Ctimes%20B"> where all matrices are 3×3:</p>
<section id="compute-work" class="level4">
<h4 class="anchored" data-anchor-id="compute-work">Compute work</h4>
<ul>
<li>Each output element is a dot product of length 3</li>
<li>3 fused multiply-adds -&gt; 3 FLOPs per output element</li>
<li>9 elements -&gt; 27 FLOPs total</li>
</ul>
</section>
<section id="dram-traffic" class="level4">
<h4 class="anchored" data-anchor-id="dram-traffic">DRAM traffic</h4>
<ul>
<li>Load matrix A: 9 floats × 4 bytes = 36 bytes</li>
<li>Load matrix B: 9 floats × 4 bytes = 36 bytes<br>
</li>
<li>Store matrix C: 9 floats × 4 bytes = 36 bytes</li>
<li>Total: <strong>108 bytes</strong></li>
</ul>
</section>
<section id="operational-intensity" class="level4">
<h4 class="anchored" data-anchor-id="operational-intensity">Operational intensity:</h4>
<p><img src="https://latex.codecogs.com/png.latex?I_%7Bnaive%7D%20=%20%5Cfrac%7B27%20%5Ctext%7B%20FLOPs%7D%7D%7B108%20%5Ctext%7B%20bytes%7D%7D%20=%200.25%20%5Ctext%7B%20FLOP/byte%7D"></p>
<p>Since <img src="https://latex.codecogs.com/png.latex?I_%7Bnaive%7D%20=%200.25%20%5Cll%20I_%7Bcrit%7D%20=%2074.2">, this kernel is <strong>memory-bound</strong>.</p>
</section>
<section id="predicted-performance" class="level4">
<h4 class="anchored" data-anchor-id="predicted-performance">Predicted performance</h4>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0AP_%7Bnaive%7D%20%5C;%5C;%20&amp;%20=%20%5Cmin(26.7~%5Ctext%7BTFLOPS%7D,%5C;%200.25%20%5Ctimes%20360~%5Ctext%7BGB/s%7D)%20%5C%5C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20&amp;%20=%20%5Cmin(26.7~%5Ctext%7BTFLOPS%7D,%5C;%2090~%5Ctext%7BGFLOPS%7D)%20%5C%5C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20&amp;%20=%20%5Cboxed%7B90~%5Ctext%7BGFLOPS%7D%7D%0A%5Cend%7Baligned%7D%0A"></p>
</section>
</section>
<section id="shared-memory-optimization" class="level3">
<h3 class="anchored" data-anchor-id="shared-memory-optimization">Shared Memory Optimization</h3>
<p>By staging 3×3 tiles of A and B in shared memory, each element feeds all three required dot products instead of being fetched repeatedly from DRAM.</p>
<section id="improved-traffic-pattern" class="level4">
<h4 class="anchored" data-anchor-id="improved-traffic-pattern">Improved traffic pattern</h4>
<ul>
<li>DRAM loads for A and B drop by ~3×</li>
<li>Stores remain unchanged (36 bytes)</li>
<li>Approximate traffic: <img src="https://latex.codecogs.com/png.latex?(36+36)/3%20+%2036%20=%2060"> bytes</li>
</ul>
</section>
<section id="new-operational-intensity" class="level4">
<h4 class="anchored" data-anchor-id="new-operational-intensity">New operational intensity</h4>
<p><img src="https://latex.codecogs.com/png.latex?I_%7Bshared%7D%20=%20%5Cfrac%7B27%20%5Ctext%7B%20FLOPs%7D%7D%7B60%20%5Ctext%7B%20bytes%7D%7D%20=%200.45%20%5Ctext%7B%20FLOP/byte%7D"></p>
</section>
<section id="predicted-performance-1" class="level4">
<h4 class="anchored" data-anchor-id="predicted-performance-1">Predicted performance</h4>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0AP_%7Bshared%7D%20%5C;%5C;%20&amp;%20=%20%5Cmin(26.7~%5Ctext%7BTFLOPS%7D,%5C;%200.45%20%5Ctimes%20360~%5Ctext%7BGB/s%7D)%20%5C%5C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20&amp;%20=%20%5Cmin(26.7~%5Ctext%7BTFLOPS%7D,%5C;%20162~%5Ctext%7BGFLOPS%7D)%20%5C%5C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20&amp;%20=%20%5Cboxed%7B162~%5Ctext%7BGFLOPS%7D%7D%0A%5Cend%7Baligned%7D%0A"></p>
<p>This gives us a <strong>1.8× speedup</strong> from shared memory optimization, but we’re still memory-bound.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="mojo_gpu_puzzles/p14_roofline_naive_and_shared.png" class="lightbox" data-gallery="quarto-lightbox-gallery-21" title="RTX 4000 Ada Roofline for Matmul"><img src="https://shubhamg.in/posts/mojo_gpu_puzzles/p14_roofline_naive_and_shared.png" class="img-fluid figure-img" alt="RTX 4000 Ada Roofline for Matmul"></a></p>
<figcaption>RTX 4000 Ada Roofline for Matmul</figcaption>
</figure>
</div>
<details closed="">
<summary>
<strong>Plot Code</strong>
</summary>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>roofline_plot.py</strong></pre>
</div>
<div class="sourceCode" id="cb36" data-filename="roofline_plot.py" style="background: #f1f3f5;"><pre class="sourceCode py code-with-copy"><code class="sourceCode python"><span id="cb36-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># /// script</span></span>
<span id="cb36-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># dependencies = [</span></span>
<span id="cb36-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   "matplotlib",</span></span>
<span id="cb36-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   "numpy",</span></span>
<span id="cb36-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ]</span></span>
<span id="cb36-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ///</span></span>
<span id="cb36-7"></span>
<span id="cb36-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Run using uv run roofline_plot.py</span></span>
<span id="cb36-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb36-10"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb36-11"></span>
<span id="cb36-12">peak_compute <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">26.7</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert to GFLOPS</span></span>
<span id="cb36-13">peak_bandwidth <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">360</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># GB/s</span></span>
<span id="cb36-14">critical_intensity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> peak_compute <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> peak_bandwidth</span>
<span id="cb36-15"></span>
<span id="cb36-16">kernels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb36-17">    {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Naive 3×3"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"intensity"</span>: <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"performance"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"color"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#f39c12"</span>},</span>
<span id="cb36-18">    {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Shared 3×3"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"intensity"</span>: <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.45</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"performance"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">162</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"color"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#27ae60"</span>}</span>
<span id="cb36-19">]</span>
<span id="cb36-20"></span>
<span id="cb36-21"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> generate_roofline_data():</span>
<span id="cb36-22">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Memory-bound region</span></span>
<span id="cb36-23">    memory_intensities <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.arange(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>, critical_intensity, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>)</span>
<span id="cb36-24">    memory_performance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> memory_intensities <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> peak_bandwidth</span>
<span id="cb36-25"></span>
<span id="cb36-26">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute-bound region</span></span>
<span id="cb36-27">    compute_intensities <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.arange(critical_intensity, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb36-28">    compute_performance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.full_like(compute_intensities, peak_compute)</span>
<span id="cb36-29"></span>
<span id="cb36-30">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> memory_intensities, memory_performance, compute_intensities, compute_performance</span>
<span id="cb36-31"></span>
<span id="cb36-32">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">6.5</span>))</span>
<span id="cb36-33"></span>
<span id="cb36-34">ax.set_xscale(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'log'</span>, base<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb36-35">ax.set_yscale(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'log'</span>, base<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb36-36"></span>
<span id="cb36-37">mem_i, mem_p, comp_i, comp_p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> generate_roofline_data()</span>
<span id="cb36-38"></span>
<span id="cb36-39">ax.loglog(mem_i, mem_p, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#e74c3c"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Memory-bound"</span>)</span>
<span id="cb36-40">ax.loglog(comp_i, comp_p, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#3498db"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Compute-bound"</span>)</span>
<span id="cb36-41"></span>
<span id="cb36-42">ax.axhline(y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>peak_compute, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#3498db"</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--"</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb36-43">ax.axvline(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>critical_intensity, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#999"</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--"</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb36-44"></span>
<span id="cb36-45"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> kernel <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> kernels:</span>
<span id="cb36-46">    ax.loglog(kernel[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"intensity"</span>], kernel[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"performance"</span>],</span>
<span id="cb36-47">             <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>kernel[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"color"</span>], markersize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,</span>
<span id="cb36-48">             markeredgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#333"</span>, markeredgewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb36-49"></span>
<span id="cb36-50">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add kernel labels with better positioning to avoid overlap</span></span>
<span id="cb36-51">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> kernel[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Naive 3×3"</span>:</span>
<span id="cb36-52">        offset_x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> kernel[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"intensity"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Move left</span></span>
<span id="cb36-53">        offset_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> kernel[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"performance"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.65</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Move down</span></span>
<span id="cb36-54">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Shared 3×3</span></span>
<span id="cb36-55">        offset_x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> kernel[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"intensity"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.4</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Move right</span></span>
<span id="cb36-56">        offset_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> kernel[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"performance"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.3</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Move up</span></span>
<span id="cb36-57"></span>
<span id="cb36-58">    ax.annotate(kernel[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span>],</span>
<span id="cb36-59">               (kernel[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"intensity"</span>], kernel[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"performance"</span>]),</span>
<span id="cb36-60">               xytext<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(offset_x, offset_y),</span>
<span id="cb36-61">               fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>, fontweight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bold"</span>, ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>,</span>
<span id="cb36-62">               bbox<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>(boxstyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"round,pad=0.3"</span>, facecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>))</span>
<span id="cb36-63"></span>
<span id="cb36-64">ax.text(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>, peak_bandwidth <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Memory-bound"</span>,</span>
<span id="cb36-65">        color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#e74c3c"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, fontweight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bold"</span>, ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>)</span>
<span id="cb36-66">ax.text(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>, peak_compute <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Compute-bound"</span>,</span>
<span id="cb36-67">        color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#3498db"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, fontweight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bold"</span>)</span>
<span id="cb36-68"></span>
<span id="cb36-69">ax.text(critical_intensity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.3</span>, peak_compute <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.1</span>,</span>
<span id="cb36-70">        <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"I_crit = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>critical_intensity<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.1f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>,</span>
<span id="cb36-71">        color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#f39c12"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, fontweight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bold"</span>)</span>
<span id="cb36-72"></span>
<span id="cb36-73">ax.set_xlim(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)</span>
<span id="cb36-74">ax.set_ylim(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30000</span>)</span>
<span id="cb36-75">ax.set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Operational Intensity (FLOP/byte) - Log_10 Scale"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span>
<span id="cb36-76">ax.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Performance (GFLOP/s) - Log_10 Scale"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span>
<span id="cb36-77">ax.grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>)</span>
<span id="cb36-78"></span>
<span id="cb36-79">legend_elements <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [plt.Line2D([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'w'</span>,</span>
<span id="cb36-80">                             markerfacecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>k[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"color"</span>], markersize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,</span>
<span id="cb36-81">                             label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>k[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span>], markeredgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#333"</span>)</span>
<span id="cb36-82">                  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> kernels]</span>
<span id="cb36-83">ax.legend(handles<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>legend_elements, loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lower right"</span>)</span>
<span id="cb36-84"></span>
<span id="cb36-85">plt.tight_layout()</span>
<span id="cb36-86">plt.savefig(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'./mojo_gpu_puzzles/p14_roofline_naive_and_shared.png'</span>, bbox_inches<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tight'</span>)</span>
<span id="cb36-87"></span>
<span id="cb36-88"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Performance Analysis:"</span>)</span>
<span id="cb36-89"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>)</span>
<span id="cb36-90"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> kernel <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> kernels:</span>
<span id="cb36-91">    efficiency <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (kernel[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"performance"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> peak_compute) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb36-92">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>kernel[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'name'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">:"</span>)</span>
<span id="cb36-93">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"  Intensity: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>kernel[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'intensity'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> FLOP/byte"</span>)</span>
<span id="cb36-94">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"  Performance: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>kernel[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'performance'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> GFLOP/s"</span>)</span>
<span id="cb36-95">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"  Efficiency: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>efficiency<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.1f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">% of peak"</span>)</span></code></pre></div>
</div>
</details>
</section>
</section>
<section id="key-insights" class="level3">
<h3 class="anchored" data-anchor-id="key-insights">Key Insights</h3>
<ul>
<li><strong>Intensity grows with matrix size</strong> - For naive <img src="https://latex.codecogs.com/png.latex?N%20%5Ctimes%20N"> GEMM: <img src="https://latex.codecogs.com/png.latex?I%20=%20%5Cfrac%7BN%5E3%7D%7B4N%5E2%7D%20=%20%5Cfrac%7BN%7D%7B4%7D"> FLOP/byte</li>
<li><strong>Small kernels are bandwidth-bound</strong> - Even perfect caching can’t reach the 74 FLOP/byte crossover until <img src="https://latex.codecogs.com/png.latex?N%20%5Capprox%20300"></li>
<li><strong>Shared memory helps, but only up to the ridge</strong> - Further speedups require compute-side tuning (tensor cores, ILP, etc.)</li>
</ul>
<p>Next, we’ll look at one specific optimisation for Matmul: Tile-based GEMM!</p>
</section>
</section>
<section id="tiled-matrix-multiplication-gemm" class="level2">
<h2 class="anchored" data-anchor-id="tiled-matrix-multiplication-gemm">Tiled Matrix-Multiplication (GEMM)</h2>
<p>Our <em>shared-memory</em> kernel already cut global-DRAM traffic by loading each <code>A[i,k]</code> / <code>B[k,j]</code> element once per thread <em>row/column</em> instead of once per <em>output multiply</em>.<br>
For large matrices, however, even that version still:</p>
<ul>
<li>Brings the <em>entire</em> row of <code>A</code> and column of <code>B</code> into shared SRAM, quickly exhausting the 48–112 KiB available per SM.</li>
<li>Leaves many threads idle while others finish their portion of the dot-product.</li>
<li>Misses an opportunity to keep a hot, register-resident accumulator and hide global-latency behind computation.</li>
</ul>
<p>Enter <strong>tiling / blocking</strong> — the canonical GPU GEMM strategy.</p>
<section id="tile" class="level3">
<h3 class="anchored" data-anchor-id="tile">Tile?</h3>
<p>Think of an <code>N×N</code> matmul as a chessboard. Instead of letting every thread wander across the whole board, we slice it into <code>T×T</code> sub-squares (<strong>tiles</strong>).</p>
<p>A <em>thread-block</em> is assigned one output tile, and:</p>
<ul>
<li>Cooperatively loads the matching <code>T×T</code> <em>A-tile</em> and <em>B-tile</em> from global DRAM to <em>shared memory</em> (two coalesced 2-D memcpy’s).</li>
<li>Performs <code>T</code> fused-multiply-add sweeps of that data, each thread keeping its running sum in a <em>register</em>.</li>
<li>Barriers, slides the tile window by <code>T</code> along the inner-<code>k</code> dimension, and repeats until the dot-product is complete.</li>
<li>Finally writes the <code>T×T</code> block of <code>C</code> back to DRAM.</li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="mojo_gpu_puzzles/p14_tiled_matmul.gif" class="lightbox" data-gallery="quarto-lightbox-gallery-22" title="Matmul Operation for a 4x4 Matrix, computing the first 4 output elements. Credits: Simon Oz"><img src="https://shubhamg.in/posts/mojo_gpu_puzzles/p14_tiled_matmul.gif" class="img-fluid figure-img" alt="Matmul Operation for a 4x4 Matrix, computing the first 4 output elements. Credits: Simon Oz"></a></p>
<figcaption>Matmul Operation for a 4x4 Matrix, computing the first 4 output elements. Credits: <a href="https://www.youtube.com/watch?v=ccHyFnEZt7M&amp;ab_channel=SimonOz">Simon Oz</a></figcaption>
</figure>
</div>
<p>Each element of <code>A</code>/<code>B</code> is now read <em>once per tile</em> - independent of <code>N</code>, and re-used <code>T</code> times, boosting arithmetic intensity from <code>O(1)</code> to <code>O(T)</code> FLOP/B.</p>
</section>
<section id="memory-mapping-for-tiled-gemm" class="level3">
<h3 class="anchored" data-anchor-id="memory-mapping-for-tiled-gemm">Memory mapping for tiled GEMM</h3>
<p>The memory hierachy(discussed <a href="../posts/2025-07-06-gpu-puzzles-p1.html#gpu-memory">in the previous post</a>), is utilised as follows:</p>
<ul>
<li><strong>Registers</strong>: per-thread accumulators that hold partial <code>C</code> values across all tile iterations</li>
<li><strong>Shared SRAM</strong>: the current <code>A_tile</code> and <code>B_tile</code>, cooperatively loaded once and reused T times<br>
</li>
<li><strong>Global HBM</strong>: original A, B matrices and final C; each element touched once per tile load/store</li>
</ul>
</section>
<section id="raw-memory-1" class="level3">
<h3 class="anchored" data-anchor-id="raw-memory-1">Raw Memory</h3>
<details open="">
<summary>
<strong>Manual Indexing Tiled Matmul</strong>
</summary>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>p14_matmul_tiled_manual.mojo</strong></pre>
</div>
<div class="sourceCode" id="cb37" data-filename="p14_matmul_tiled_manual.mojo" style="background: #f1f3f5;"><pre class="sourceCode mojo code-overflow-wrap code-with-copy"><code class="sourceCode mojo"><span id="cb37-1"></span>
<span id="cb37-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">alias</span> SIZE_TILED <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Size of the matrix we are multiplying, NOT the size of a tile</span></span>
<span id="cb37-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">alias</span> BLOCKS_PER_GRID_TILED <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># each block convers 3x3 elements</span></span>
<span id="cb37-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">alias</span> THREADS_PER_BLOCK_TILED <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (TPB, TPB)</span>
<span id="cb37-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">alias</span> layout_tiled <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Layout.row_major(SIZE_TILED, SIZE_TILED)</span>
<span id="cb37-6"></span>
<span id="cb37-7"></span>
<span id="cb37-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> matmul_tiled[</span>
<span id="cb37-9">    layout: Layout, size: Int</span>
<span id="cb37-10">](</span>
<span id="cb37-11">    output: LayoutTensor[mut<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, dtype, layout],</span>
<span id="cb37-12">    a: LayoutTensor[mut<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, dtype, layout],</span>
<span id="cb37-13">    b: LayoutTensor[mut<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, dtype, layout],</span>
<span id="cb37-14">):</span>
<span id="cb37-15">    local_row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> thread_idx.y</span>
<span id="cb37-16">    local_col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> thread_idx.x</span>
<span id="cb37-17">    global_row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> block_idx.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> TPB <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> local_row</span>
<span id="cb37-18">    global_col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> block_idx.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> TPB <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> local_col</span>
<span id="cb37-19"></span>
<span id="cb37-20">    shared_a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tb[dtype]().row_major[TPB, TPB]().shared().alloc()</span>
<span id="cb37-21">    shared_b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tb[dtype]().row_major[TPB, TPB]().shared().alloc()</span>
<span id="cb37-22"></span>
<span id="cb37-23">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">var</span> local_sum: output.element_type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span></span>
<span id="cb37-24"></span>
<span id="cb37-25">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@parameter</span></span>
<span id="cb37-26">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (size + TPB - 1) // TPB == ceil(size / TPB) -&gt; number of tile-steps we need</span></span>
<span id="cb37-27">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> tile <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>((size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> TPB <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> TPB):</span>
<span id="cb37-28">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load elements of A into shared mem</span></span>
<span id="cb37-29">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> global_row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> size <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> (tile <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> TPB <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> local_col) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> size:</span>
<span id="cb37-30">            shared_a[local_row, local_col] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a[</span>
<span id="cb37-31">                global_row, tile <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> TPB <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> local_col</span>
<span id="cb37-32">            ]</span>
<span id="cb37-33"></span>
<span id="cb37-34">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load elements of B into shared mem</span></span>
<span id="cb37-35">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> global_col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> size <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> (tile <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> TPB <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> local_row) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> size:</span>
<span id="cb37-36">            shared_b[local_row, local_col] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> b[</span>
<span id="cb37-37">                tile <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> TPB <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> local_row, global_col</span>
<span id="cb37-38">            ]</span>
<span id="cb37-39"></span>
<span id="cb37-40">        barrier()</span>
<span id="cb37-41"></span>
<span id="cb37-42">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Perform matmul</span></span>
<span id="cb37-43">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> global_row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> size <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> global_col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> size:</span>
<span id="cb37-44"></span>
<span id="cb37-45">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@parameter</span></span>
<span id="cb37-46">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(TPB, size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> tile <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> TPB)):</span>
<span id="cb37-47">                local_sum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> shared_a[local_row, k] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> shared_b[k, local_col]</span>
<span id="cb37-48"></span>
<span id="cb37-49">            barrier()</span>
<span id="cb37-50"></span>
<span id="cb37-51">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> global_row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> size <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> global_col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> size:</span>
<span id="cb37-52">            output[global_row, global_col] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> local_sum</span></code></pre></div>
</div>
<div class="sourceCode" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb38-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pixi</span> run p14 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--tiled</span></span>
<span id="cb38-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># out: HostBuffer([2240.0, 2296.0, 2352.0, 2408.0, 2464.0, 2520.0, 2576.0, 2632.0, 5824.0, 6008.0, 6192.0, 6376.0, 6560.0, 6744.0, 6928.0, 7112.0, 9408.0, 9720.0, 10032.0, 10344.0, 10656.0, 10968.0, 11280.0, 11592.0, 12992.0, 13432.0, 13872.0, 14312.0, 14752.0, 15192.0, 15632.0, 16072.0, 16576.0, 17144.0, 17712.0, 18280.0, 18848.0, 19416.0, 19984.0, 20552.0, 20160.0, 20856.0, 21552.0, 22248.0, 22944.0, 23640.0, 24336.0, 25032.0, 23744.0, 24568.0, 25392.0, 26216.0, 27040.0, 27864.0, 28688.0, 29512.0, 27328.0, 28280.0, 29232.0, 30184.0, 31136.0, 32088.0, 33040.0, 33992.0])</span></span>
<span id="cb38-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># expected: HostBuffer([2240.0, 2296.0, 2352.0, 2408.0, 2464.0, 2520.0, 2576.0, 2632.0, 5824.0, 6008.0, 6192.0, 6376.0, 6560.0, 6744.0, 6928.0, 7112.0, 9408.0, 9720.0, 10032.0, 10344.0, 10656.0, 10968.0, 11280.0, 11592.0, 12992.0, 13432.0, 13872.0, 14312.0, 14752.0, 15192.0, 15632.0, 16072.0, 16576.0, 17144.0, 17712.0, 18280.0, 18848.0, 19416.0, 19984.0, 20552.0, 20160.0, 20856.0, 21552.0, 22248.0, 22944.0, 23640.0, 24336.0, 25032.0, 23744.0, 24568.0, 25392.0, 26216.0, 27040.0, 27864.0, 28688.0, 29512.0, 27328.0, 28280.0, 29232.0, 30184.0, 31136.0, 32088.0, 33040.0, 33992.0])</span></span></code></pre></div>
</details>
<p>The new formulas in the tiling implementation deserve explanation. Let’s break them down into key concepts:</p>
<section id="how-many-tiles-are-needed" class="level4">
<h4 class="anchored" data-anchor-id="how-many-tiles-are-needed">How many Tiles are needed?</h4>
<p>This is the expression: <code>range((size + TPB - 1) // TPB)</code></p>
<p>The key idea here is: Step through k by TPB each time; if there’s a leftover chunk, do one last tile for it.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="mojo_gpu_puzzles/p14_tile.png" class="lightbox" data-gallery="quarto-lightbox-gallery-23" title="Mapping of elements to tiles when size=17 and TPB=8"><img src="https://shubhamg.in/posts/mojo_gpu_puzzles/p14_tile.png" class="img-fluid quarto-figure quarto-figure-center figure-img" alt="Mapping of elements to tiles when size=17 and TPB=8"></a></p>
</figure>
</div>
<figcaption>Mapping of elements to tiles when size=17 and TPB=8</figcaption>
</figure>
</div>
<p>The above example needs 3 tiles. Ceiling division captures this with a simple formula: <img src="https://latex.codecogs.com/png.latex?%0A%5Clceil%5Cfrac%7Bsize%7D%7BTPB%7D%5Crceil%20=%20%5Clfloor%5Cfrac%7Bsize%20+%20TPB%20-%201%7D%7BTPB%7D%5Crfloor%0A"></p>
</section>
<section id="which-element-does-a-thread-fetch-in-this-tile" class="level4">
<h4 class="anchored" data-anchor-id="which-element-does-a-thread-fetch-in-this-tile">Which element does a thread fetch in this tile?</h4>
<p>Each thread snags two scalars—one from A, one from B.</p>
<p><code>tile</code> is simply “which chunk of k are we on?”</p>
<p>Inside a block, a thread owns a single output cell <code>C[global_row, global_col]</code>. To finish that cell it must walk k, multiplying aligned pairs (A[row, k], B[k, col]).</p>
<p>On tile <code>t</code> the fetches are</p>
<pre><code>A = a[global_row, t*TPB + local_col]
B = b[t*TPB + local_row, global_col]</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="mojo_gpu_puzzles/p14_tiled_matmul_annotated.png" class="lightbox" data-gallery="quarto-lightbox-gallery-24" title="Tiled 9×9 matmul: Each thread loads 3x3 A and 3x3 B elements per tile, computes a partial sum, then syncs. Tile size = 3×3, 9 threads per block."><img src="https://shubhamg.in/posts/mojo_gpu_puzzles/p14_tiled_matmul_annotated.png" class="img-fluid quarto-figure quarto-figure-center figure-img" alt="Tiled 9×9 matmul: Each thread loads 3x3 A and 3x3 B elements per tile, computes a partial sum, then syncs. Tile size = 3×3, 9 threads per block."></a></p>
</figure>
</div>
<figcaption>Tiled 9×9 matmul: Each thread loads 3x3 A and 3x3 B elements per tile, computes a partial sum, then syncs. Tile size = 3×3, 9 threads per block.</figcaption>
</figure>
</div>
<p>Both reads cover the same k-slice (<code>t*TPB … t*TPB+TPB-1</code>), so every multiply in this round lives entirely in shared memory.</p>
</section>
<section id="why-do-we-swap-local_row-and-local_col-for-b" class="level4">
<h4 class="anchored" data-anchor-id="why-do-we-swap-local_row-and-local_col-for-b">Why do we swap <code>local_row</code> and <code>local_col</code> for B?</h4>
<p>GPUs coalesce global memory when <em>adjacent threads read adjacent addresses</em>. With the swap:</p>
<ul>
<li><strong>For A</strong>: neighboring threads in x-direction (<code>local_col</code>) read consecutive k’s ⇒ coalesced</li>
<li><strong>For B</strong>: neighboring threads in y-direction (<code>local_row</code>) read consecutive k’s ⇒ also coalesced</li>
</ul>
<p>Without the swap, one matrix would be fetched “strided” collapsing into 32 separate memory transactions per warp - a 32× slowdown on bandwidth-bound kernels.</p>
<p><strong>Quick primer</strong>: Shared memory isn’t one monolithic block. It’s chopped into 32 independent “banks”<span class="citation" data-cites="nvidia_shared_memory_stats">[15]</span> <span class="citation" data-cites="leimao_cuda_shared_memory_bank">[16]</span>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="mojo_gpu_puzzles/p14_shared_memory_bank.png" class="lightbox" data-gallery="quarto-lightbox-gallery-25" title="Shared memory banking: conflict-free access (left) vs bank conflicts (right). When multiple threads access different addresses in the same bank, hardware serializes the requests. Source: CUDA Programming Blogspot"><img src="https://shubhamg.in/posts/mojo_gpu_puzzles/p14_shared_memory_bank.png" class="img-fluid quarto-figure quarto-figure-center figure-img" alt="Shared memory banking: conflict-free access (left) vs bank conflicts (right). When multiple threads access different addresses in the same bank, hardware serializes the requests. Source: CUDA Programming Blogspot"></a></p>
</figure>
</div>
<figcaption>Shared memory banking: conflict-free access (left) vs bank conflicts (right). When multiple threads access different addresses in the same bank, hardware serializes the requests. Source: <a href="https://cuda-programming.blogspot.com/2013/02/bank-conflicts-in-shared-memory-in-cuda.html">CUDA Programming Blogspot</a></figcaption>
</figure>
</div>
<p>Each is a tiny SRAM with its own read/write port that can service one request (or one 32-bit access per cycle). A warp hits peak bandwidth <em>only when</em> every thread lands in a different bank (or all hit the same address, which hardware can broadcast). If two threads target different addresses inside the same bank during the same cycle, the hardware must serialize them, referred to as a <strong>bank conflict</strong>.</p>
<p>Beyond coalescing, our tile layout also sidesteps these conflicts. Because <code>b_shared[k, threadIdx.x]</code> maps each thread to a distinct bank (while <code>a_shared[threadIdx.y, k]</code> is broadcast-friendly), all 32 memory ports stay busy with zero serialization.</p>
</section>
<section id="choosing-the-right-tile-size" class="level4">
<h4 class="anchored" data-anchor-id="choosing-the-right-tile-size">Choosing the Right Tile Size</h4>
<p>While the current puzzle selects <img src="https://latex.codecogs.com/png.latex?TPB=3"> with tile size <img src="https://latex.codecogs.com/png.latex?TPBxTPB">, choosing the tile size is a balancing act.</p>
<p>Exact numbers vary with GPU, kernel, and precision [<span class="citation" data-cites="nvidia_ampere_unified_shared_memory">[17]</span>]<span class="citation" data-cites="nvidia_blackwell_unified_shared_memory">[18]</span>.</p>
<p>I’m still learning the dark art of GPU perf tuning, so I’ll save the details for a future post once I’ve had more time to experiment.</p>
<p><strong>TLDR:</strong> For each tile, we will sync (barrier), compute, shift to next tile, repeat. But this is just the baseline - there’s always a deeper optimization rabbit hole!</p>
</section>
</section>
<section id="layouttensor-1" class="level3">
<h3 class="anchored" data-anchor-id="layouttensor-1">LayoutTensor</h3>
<p>While the manual tiling approach works, it suffers from indexing complexity that obscures the algorithm’s intent and creates opportunities for bugs. Mojo’s LayoutTensor API provides an elegant solution that maintains performance while dramatically improving code clarity.</p>
<section id="the-pain-of-manual-indexing" class="level4">
<h4 class="anchored" data-anchor-id="the-pain-of-manual-indexing">The Pain of Manual Indexing</h4>
<p>The manual implementation requires careful coordinate arithmetic:</p>
<ul>
<li>Nested index calculations like <code>tile * TPB + local_col</code> that can easily introduce off-by-one errors</li>
<li>Separate bounds checking for each matrix load operation</li>
<li>Explicit management of tile boundaries and edge cases</li>
<li>Code that prioritizes performance over readability</li>
</ul>
<p>LayoutTensor provides a <strong>tile()</strong> method that creates zero-copy <span class="citation" data-cites="zero_cost_abstractions">[7]</span> views into sub-regions of tensors <span class="citation" data-cites="mojo_layouttensor_tile">[19]</span>. This eliminates manual indexing gymnastics while keeping identical performance.</p>
<p>A <code>LayoutTensor.tile[tile_height, tile_width](block_row, block_col)</code> call returns a view of the specified tile without copying data, at no cost!</p>
<p>The transformation from manual indexing to LayoutTensor simplifies the loading logic:</p>
<div class="sourceCode" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode diff code-with-copy"><code class="sourceCode diff"><span id="cb40-1"># Load elements of A into shared mem</span>
<span id="cb40-2"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">- if global_row &lt; size and (tile * TPB + local_col) &lt; size:</span></span>
<span id="cb40-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">-     shared_a[local_row, local_col] = a[</span></span>
<span id="cb40-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">-         global_row, tile * TPB + local_col</span></span>
<span id="cb40-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">-     ]</span></span>
<span id="cb40-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">- </span></span>
<span id="cb40-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">- # Load elements of B into shared mem  </span></span>
<span id="cb40-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">- if global_col &lt; size and (tile * TPB + local_row) &lt; size:</span></span>
<span id="cb40-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">-     shared_b[local_row, local_col] = b[</span></span>
<span id="cb40-10"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">-         tile * TPB + local_row, global_col</span></span>
<span id="cb40-11"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">-     ]</span></span>
<span id="cb40-12"># Create tile views (zero-copy)</span>
<span id="cb40-13"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">+ a_tile = a.tile[TPB, TPB](block_idx.y, idx)</span></span>
<span id="cb40-14"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">+ b_tile = b.tile[TPB, TPB](idx, block_idx.x)</span></span>
<span id="cb40-15"></span>
<span id="cb40-16"># Asynchronous copy to shared memory</span>
<span id="cb40-17"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">+ copy_dram_to_sram_async[thread_layout=load_a_layout](a_shared, a_tile)</span></span>
<span id="cb40-18"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">+ copy_dram_to_sram_async[thread_layout=load_b_layout](b_shared, b_tile)</span></span>
<span id="cb40-19"></span>
<span id="cb40-20"># Synchronize all async copies</span>
<span id="cb40-21"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">+ async_copy_wait_all()</span></span></code></pre></div>
<p>Full solution looks as follows:</p>
<details closed="">
<summary>
<strong>LayoutTensor Tiled Matmul</strong>
</summary>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>p14_matmul_layout_tensor.mojo</strong></pre>
</div>
<div class="sourceCode" id="cb41" data-filename="p14_matmul_layout_tensor.mojo" style="background: #f1f3f5;"><pre class="sourceCode mojo code-with-copy"><code class="sourceCode mojo"><span id="cb41-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">alias</span> SIZE_TILED <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span></span>
<span id="cb41-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">alias</span> BLOCKS_PER_GRID_TILED <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># each block covers 3x3 elements</span></span>
<span id="cb41-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">alias</span> THREADS_PER_BLOCK_TILED <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (TPB, TPB)</span>
<span id="cb41-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">alias</span> layout_tiled <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Layout.row_major(SIZE_TILED, SIZE_TILED)</span>
<span id="cb41-5"></span>
<span id="cb41-6"></span>
<span id="cb41-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> matmul_tiled[</span>
<span id="cb41-8">    layout: Layout, size: Int</span>
<span id="cb41-9">](</span>
<span id="cb41-10">    output: LayoutTensor[mut<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, dtype, layout],</span>
<span id="cb41-11">    a: LayoutTensor[mut<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, dtype, layout],</span>
<span id="cb41-12">    b: LayoutTensor[mut<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, dtype, layout],</span>
<span id="cb41-13">):</span>
<span id="cb41-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># LayoutTensor APIs</span></span>
<span id="cb41-15">    out_tile <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> output.tile[TPB, TPB](block_idx.y, block_idx.x)</span>
<span id="cb41-16">    a_shared <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tb[dtype]().row_major[TPB, TPB]().shared().alloc()</span>
<span id="cb41-17">    b_shared <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tb[dtype]().row_major[TPB, TPB]().shared().alloc()</span>
<span id="cb41-18">    local_row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> thread_idx.y</span>
<span id="cb41-19">    local_col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> thread_idx.x</span>
<span id="cb41-20"></span>
<span id="cb41-21">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">var</span> local_sum: output.element_type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span></span>
<span id="cb41-22"></span>
<span id="cb41-23">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">alias</span> load_a_layout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Layout.row_major[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, TPB]()</span>
<span id="cb41-24">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">alias</span> load_b_layout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Layout.row_major[TPB, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]()</span>
<span id="cb41-25">    </span>
<span id="cb41-26">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@parameter</span></span>
<span id="cb41-27">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> idx <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>((size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> TPB <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> TPB):</span>
<span id="cb41-28">        a_tile <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a.tile[TPB, TPB](block_idx.y, idx)</span>
<span id="cb41-29">        b_tile <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> b.tile[TPB, TPB](idx, block_idx.x)</span>
<span id="cb41-30"></span>
<span id="cb41-31">        copy_dram_to_sram_async[thread_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>load_a_layout](a_shared, a_tile)</span>
<span id="cb41-32">        copy_dram_to_sram_async[thread_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>load_b_layout](b_shared, b_tile)</span>
<span id="cb41-33"></span>
<span id="cb41-34">        async_copy_wait_all()</span>
<span id="cb41-35"></span>
<span id="cb41-36">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@parameter</span></span>
<span id="cb41-37">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(TPB, size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> TPB)):</span>
<span id="cb41-38">            local_sum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> a_shared[local_row, k] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> b_shared[k, local_col]</span>
<span id="cb41-39"></span>
<span id="cb41-40">        barrier()</span>
<span id="cb41-41"></span>
<span id="cb41-42">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Store result after all tiles processed</span></span>
<span id="cb41-43">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (</span>
<span id="cb41-44">        block_idx.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> TPB <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> local_row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> size</span>
<span id="cb41-45">        <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> block_idx.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> TPB <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> local_col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> size</span>
<span id="cb41-46">    ):</span>
<span id="cb41-47">        out_tile[local_row, local_col] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> local_sum</span></code></pre></div>
</div>
</details>
</section>
<section id="synchronization-and-memory-hierarchy" class="level4">
<h4 class="anchored" data-anchor-id="synchronization-and-memory-hierarchy">Synchronization and Memory Hierarchy</h4>
<p>The <code>copy_dram_to_sram_async()</code> function <span class="citation" data-cites="mojo_copy_dram_to_sram_async">[20]</span> enables asynchronous memory transfers from global to shared memory, while <code>async_copy_wait_all()</code> <span class="citation" data-cites="mojo_async_copy_wait_all">[21]</span> provides a synchronization barrier that ensures all pending transfers complete before computation proceeds.</p>
<p>This pattern allows the GPU to:</p>
<ul>
<li>Overlap memory transfers with other computations using dedicated copy engines</li>
<li>Utilize specialized hardware for efficient data movement</li>
<li>Maintain correct execution ordering across thread blocks</li>
<li>Bypass intermediate registers for improved memory hierarchy efficiency</li>
</ul>
<p><strong>Important</strong>: <code>async_copy_wait_all()</code> only synchronizes the asynchronous copy operations—threads still need explicit barriers (<code>barrier()</code>) to ensure all threads in a block see the shared memory data before computation begins.</p>
</section>
</section>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>Across these puzzles, we’ve implemented the four fundamental archetypes that power most GPU computing:</p>
<table class="caption-top table">
<colgroup>
<col style="width: 28%">
<col style="width: 28%">
<col style="width: 42%">
</colgroup>
<thead>
<tr class="header">
<th><strong>Pattern</strong></th>
<th><strong>Puzzles</strong></th>
<th><strong>Core Technique</strong></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><strong>Map-Reduce</strong></td>
<td>dot product, axis-sum</td>
<td>warp-level parallel reduction trees</td>
</tr>
<tr class="even">
<td><strong>Stencil</strong></td>
<td>pooling, 1D/2D convolution</td>
<td>spatial tiling with halo exchanges</td>
</tr>
<tr class="odd">
<td><strong>Scan</strong></td>
<td>prefix sum</td>
<td>hierarchical up-sweep + down-sweep</td>
</tr>
<tr class="even">
<td><strong>Dense Linear Algebra</strong></td>
<td>matrix multiplication</td>
<td>cooperative tiling + register reuse</td>
</tr>
</tbody>
</table>
<p>These four archetypes form the building blocks for complex ML kernels, each with specific memory access patterns and synchronization strategies.</p>
<p>Next up: Moar GPU kernels, and finally tackling our favorite technique for the past few years: <strong>Attention</strong>!</p>
<p>Thanks for sticking around! I hope you picked up a trick or two! Spotted a bug or have a sharper optimization? Open an issue in the repo, or ping me on <a href="https://x.com/shubhamg2208">Twitter/X</a>. Happy hacking!</p>



</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-bibliography"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body" data-entry-spacing="0">
<div id="ref-wikipediadotproduct" class="csl-entry">
<div class="csl-left-margin">[1] </div><div class="csl-right-inline">Wikipedia, <span>“Dot product.”</span> <a href="https://en.wikipedia.org/wiki/Dot_product" class="uri">https://en.wikipedia.org/wiki/Dot_product</a>, 2024.</div>
</div>
<div id="ref-zeno_dichotomy_paradox" class="csl-entry">
<div class="csl-left-margin">[2] </div><div class="csl-right-inline">Wikipedia, <span>“Zeno’s paradoxes — dichotomy paradox.”</span> <a href="https://en.wikipedia.org/wiki/Zeno%27s_paradoxes#Dichotomy_paradox" class="uri">https://en.wikipedia.org/wiki/Zeno%27s_paradoxes#Dichotomy_paradox</a>, 2024.</div>
</div>
<div id="ref-thakur_convolutions" class="csl-entry">
<div class="csl-left-margin">[3] </div><div class="csl-right-inline">A. Thakur, <span>“Intuitive understanding of 1D, 2D, and 3D convolutions in convolutional neural networks.”</span> 2020. Available: <a href="https://wandb.ai/ayush-thakur/dl-question-bank/reports/Intuitive-understanding-of-1D-2D-and-3D-convolutions-in-convolutional-neural-networks---VmlldzoxOTk2MDA">https://wandb.ai/ayush-thakur/dl-question-bank/reports/Intuitive-understanding-of-1D-2D-and-3D-convolutions-in-convolutional-neural-networks---VmlldzoxOTk2MDA</a></div>
</div>
<div id="ref-nvidiapragmaunroll" class="csl-entry">
<div class="csl-left-margin">[4] </div><div class="csl-right-inline">NVIDIA, <span>“<span class="nocase">#pragma unroll Compiler Directive (CUDA C Programming Guide)</span>.”</span> 2025. Available: <a href="https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html?highlight=unroll#pragma-unroll">https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html?highlight=unroll#pragma-unroll</a></div>
</div>
<div id="ref-mojoparameter" class="csl-entry">
<div class="csl-left-margin">[5] </div><div class="csl-right-inline">Modular, <span>“Parametric closure (<code>@parameter</code>) in mojo.”</span> 2025. Available: <a href="https://docs.modular.com/mojo/manual/decorators/parameter/#parametric-closure">https://docs.modular.com/mojo/manual/decorators/parameter/#parametric-closure</a></div>
</div>
<div id="ref-mojo_lifetimes" class="csl-entry">
<div class="csl-left-margin">[6] </div><div class="csl-right-inline">Modular, <span>“Lifetimes in mojo.”</span> 2025. Available: <a href="https://docs.modular.com/mojo/manual/values/lifetimes/">https://docs.modular.com/mojo/manual/values/lifetimes/</a></div>
</div>
<div id="ref-zero_cost_abstractions" class="csl-entry">
<div class="csl-left-margin">[7] </div><div class="csl-right-inline">saoirse, <span>“Zero cost abstractions.”</span> 2019. Available: <a href="https://without.boats/blog/zero-cost-abstractions/">https://without.boats/blog/zero-cost-abstractions/</a></div>
</div>
<div id="ref-iitd_parallel_convolution" class="csl-entry">
<div class="csl-left-margin">[8] </div><div class="csl-right-inline">R. Sen, <span>“Parallel convolution.”</span> 2022. Available: <a href="https://www.cse.iitd.ac.in/~rijurekha/col730_2022/parallelconvolution_aug29.pdf">https://www.cse.iitd.ac.in/~rijurekha/col730_2022/parallelconvolution_aug29.pdf</a></div>
</div>
<div id="ref-amd_gpu_basics" class="csl-entry">
<div class="csl-left-margin">[9] </div><div class="csl-right-inline">O. R. N. Laboratory, <span>“AMD GPU basics.”</span> 2019. Available: <a href="https://www.olcf.ornl.gov/wp-content/uploads/2019/10/ORNL_Application_Readiness_Workshop-AMD_GPU_Basics.pdf">https://www.olcf.ornl.gov/wp-content/uploads/2019/10/ORNL_Application_Readiness_Workshop-AMD_GPU_Basics.pdf</a></div>
</div>
<div id="ref-mojo_layouttensor_setitem" class="csl-entry">
<div class="csl-left-margin">[10] </div><div class="csl-right-inline">Inc. Modular, <span>“LayoutTensor.__setitem__ API reference.”</span> 2024. Available: <a href="https://docs.modular.com/mojo/kernels/layout/layout_tensor/LayoutTensor/#__setitem__">https://docs.modular.com/mojo/kernels/layout/layout_tensor/LayoutTensor/#__setitem__</a></div>
</div>
<div id="ref-blelloch_prefix_sum" class="csl-entry">
<div class="csl-left-margin">[11] </div><div class="csl-right-inline">G. E. Blelloch, <span>“Prefix sums and their applications,”</span> in <em>Synthesis of parallel algorithms</em>, 1993, pp. 35–60. Available: <a href="https://www.cs.cmu.edu/~guyb/papers/Ble93.pdf">https://www.cs.cmu.edu/~guyb/papers/Ble93.pdf</a></div>
</div>
<div id="ref-siboehm_cuda_mmm" class="csl-entry">
<div class="csl-left-margin">[12] </div><div class="csl-right-inline">S. Boehm, <span>“CUDA matrix multiplication madness.”</span> 2022. Available: <a href="https://siboehm.com/articles/22/CUDA-MMM">https://siboehm.com/articles/22/CUDA-MMM</a></div>
</div>
<div id="ref-nhrfau_roofline_model" class="csl-entry">
<div class="csl-left-margin">[13] </div><div class="csl-right-inline">NHR@FAU, <span>“Roofline model: Performance modeling for modern processors.”</span> <a href="https://www.youtube.com/watch?v=IrkNZG8MJ64" class="uri">https://www.youtube.com/watch?v=IrkNZG8MJ64</a>, 2022.</div>
</div>
<div id="ref-rtx_ada_specs" class="csl-entry">
<div class="csl-left-margin">[14] </div><div class="csl-right-inline">N. Corporation, <span>“NVIDIA RTX 4000 ada generation datasheet.”</span> 2023. Available: <a href="https://resources.nvidia.com/en-us-briefcase-for-datasheets/rtx-4000-ada-datashe-1?ncid=no-ncid">https://resources.nvidia.com/en-us-briefcase-for-datasheets/rtx-4000-ada-datashe-1?ncid=no-ncid</a></div>
</div>
<div id="ref-nvidia_shared_memory_stats" class="csl-entry">
<div class="csl-left-margin">[15] </div><div class="csl-right-inline">N. Corporation, <span>“CUDA kernel-level shared memory statistics.”</span> Available: <a href="https://docs.nvidia.com/gameworks/content/developertools/desktop/analysis/report/cudaexperiments/kernellevel/memorystatisticsshared.htm">https://docs.nvidia.com/gameworks/content/developertools/desktop/analysis/report/cudaexperiments/kernellevel/memorystatisticsshared.htm</a></div>
</div>
<div id="ref-leimao_cuda_shared_memory_bank" class="csl-entry">
<div class="csl-left-margin">[16] </div><div class="csl-right-inline">L. Mao, <span>“CUDA shared memory bank.”</span> 2022. Available: <a href="https://leimao.github.io/blog/CUDA-Shared-Memory-Bank/">https://leimao.github.io/blog/CUDA-Shared-Memory-Bank/</a></div>
</div>
<div id="ref-nvidia_ampere_unified_shared_memory" class="csl-entry">
<div class="csl-left-margin">[17] </div><div class="csl-right-inline">N. Corporation, <span>“Ampere tuning guide: Unified shared memory and L1/texture cache.”</span> 2023. Available: <a href="https://docs.nvidia.com/cuda/ampere-tuning-guide/index.html#unified-shared-memory-l1-texture-cache">https://docs.nvidia.com/cuda/ampere-tuning-guide/index.html#unified-shared-memory-l1-texture-cache</a></div>
</div>
<div id="ref-nvidia_blackwell_unified_shared_memory" class="csl-entry">
<div class="csl-left-margin">[18] </div><div class="csl-right-inline">N. Corporation, <span>“Blackwell tuning guide: Unified shared memory and L1/texture cache.”</span> 2025. Available: <a href="https://docs.nvidia.com/cuda/blackwell-tuning-guide/index.html#unified-shared-memory-l1-texture-cache">https://docs.nvidia.com/cuda/blackwell-tuning-guide/index.html#unified-shared-memory-l1-texture-cache</a></div>
</div>
<div id="ref-mojo_layouttensor_tile" class="csl-entry">
<div class="csl-left-margin">[19] </div><div class="csl-right-inline">Inc. Modular, <span>“LayoutTensor.tile API reference.”</span> Available: <a href="https://docs.modular.com/mojo/kernels/layout/layout_tensor/LayoutTensor/#tile">https://docs.modular.com/mojo/kernels/layout/layout_tensor/LayoutTensor/#tile</a></div>
</div>
<div id="ref-mojo_copy_dram_to_sram_async" class="csl-entry">
<div class="csl-left-margin">[20] </div><div class="csl-right-inline">Inc. Modular, <span>“Copy_dram_to_sram_async API reference.”</span> Available: <a href="https://docs.modular.com/mojo/kernels/layout/layout_tensor/copy_dram_to_sram_async/">https://docs.modular.com/mojo/kernels/layout/layout_tensor/copy_dram_to_sram_async/</a></div>
</div>
<div id="ref-mojo_async_copy_wait_all" class="csl-entry">
<div class="csl-left-margin">[21] </div><div class="csl-right-inline">Inc. Modular, <span>“Async_copy_wait_all API reference.”</span> Available: <a href="https://docs.modular.com/mojo/stdlib/gpu/memory/async_copy_wait_all">https://docs.modular.com/mojo/stdlib/gpu/memory/async_copy_wait_all</a></div>
</div>
</div></section></div> ]]></description>
  <guid>https://shubhamg.in/posts/2025-07-20-gpu-puzzles-p2.html</guid>
  <pubDate>Sun, 20 Jul 2025 00:00:00 GMT</pubDate>
  <media:content url="https://shubhamg.in/posts/mojo_gpu_puzzles/p11_block_boundary.png" medium="image" type="image/png" height="65" width="144"/>
</item>
<item>
  <title>GPUs go brrr with Mojo - Fundamentals</title>
  <dc:creator>Shubham Gupta</dc:creator>
  <link>https://shubhamg.in/posts/2025-07-06-gpu-puzzles-p1.html</link>
  <description><![CDATA[ 






<p>Back on the blog after a long hiatus - this time, I’m shifting gears from just reviewing papers(which are available on my <a href="https://github.com/goodhamgupta/paper_reviews">GitHub</a>) to diving deep into hands-on implementations.</p>
<p>I’ve always been interested in systems programming, but somehow never <em>really</em> picked it up. The rate of progress in the GenAI space has been exponential recently, with players like Google <span class="citation" data-cites="Google">[1]</span> reportedly processing 9.7 trillion tokens a month. Companies are now investing more time and resources in making these Large Language Models as fast and cheap as possible, by improving training and inference efficiency using “moar” compute.</p>
<p>I briefly spoke about <a href="https://www.figma.com/deck/Sq9frEEoTFgFWthOJ4EM5w/intro_gpu_cuda?node-id=1-37&amp;t=VNzh9p2qKrHNSTJj-1">GPU computing last year</a>, and finally decided to learn it this summer. The goal is to eventually be able to implement kernels for fast matmuls, softmax, and FlashAttention.</p>
<section id="why-mojo" class="level2">
<h2 class="anchored" data-anchor-id="why-mojo">Why Mojo?</h2>
<p>I’ve tried learning Rust <a href="https://github.com/goodhamgupta/rustlings">multiple</a> <a href="https://github.com/goodhamgupta/100-exercises-to-learn-rust/">times</a>, along with a few stints of trying C, C++ and Zig, but I never really felt as comfortable in these languages as I do in Python and Elixir.</p>
<p>In early 2023, Modular announced Mojo🔥, a new systems-programming language promising:</p>
<ul>
<li>Python-like syntax</li>
<li>Support for both CPU and GPU architectures</li>
<li>Kernel autofusion</li>
<li>Builds on MLIR</li>
<li>Traits and bounds checking</li>
<li>Interopeability with PTX, Python, C</li>
</ul>
<p>Modular has since announced Max, their AI inference platform, built on Mojo. The released <a href="https://github.com/modular/modular/tree/main/max/kernels">all kernels</a> available as part of the platform, along with their own version<span class="citation" data-cites="modularpuzzles">[2]</span> of Sasha Rush’s GPU Puzzles <span class="citation" data-cites="GPUPuzzles">[3]</span> in Mojo. IMO, their kernels were much easier to read compared to CUDA/Triton implementations. I also enjoyed the “Democratising AI Compute”<span class="citation" data-cites="modular_democratizing_ai_compute">[4]</span> series by Chris Lattner, and thus I decided to learn a bit more about how to write these kernels in Mojo.</p>
</section>
<section id="gpu-memory" class="level2">
<h2 class="anchored" data-anchor-id="gpu-memory">GPU 101</h2>
<p>GPUs (Graphics Processing Units) are massively parallel processors optimized for throughput over latency. In GPU programming we:</p>
<ul>
<li>Lay out data and computation as a grid of thread blocks.</li>
<li>Launch a <em>kernel</em> from the CPU (host) to run on the GPU (device).</li>
<li>Exploit thousands of lightweight threads all executing the same code (Single Instruction, Multiple Threads or SIMT).</li>
</ul>
<p>Modern chips had two ways to spend their billions of transistors:</p>
<ol type="1">
<li><strong>CPUs</strong> invest them in large caches, branch predictors and out-of-order logic to minimize <em>latency</em> for one or a few threads.</li>
<li><strong>GPUs</strong> invest them in thousands of simple cores and huge register files to maximize <em>throughput</em> for many threads, assuming those threads can tolerate latency by waiting in parallel.</li>
</ol>
<p>The rest of this section unpacks how that single design choice shows up in memory, execution and program flow.</p>
<section id="memory-hierarchy-hide-latency-with-tons-of-threads" class="level3">
<h3 class="anchored" data-anchor-id="memory-hierarchy-hide-latency-with-tons-of-threads">1. Memory hierarchy – hide latency with tons of threads</h3>
<p>CPUs invest transistors in large caches to minimize latency. GPUs take the opposite approach: they use thousands of threads to hide latency instead of avoiding it.</p>
<p>GPU memory hierarchy (slowest/largest to fastest/smallest):</p>
<ul>
<li><strong>Global (HBM)</strong>: High Bandwidth Memory—the GPU’s main memory, large but high-latency, visible to all threads<br>
</li>
<li><strong>Shared (SRAM)</strong>: fast on-chip memory, ~100x faster than HBM<br>
</li>
<li><strong>Registers</strong>: per-thread storage, fastest access, ~1000x faster than HBM</li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="mojo_gpu_puzzles/memory_hierachy_fa.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1" title="Source: FlashAttention [@dao_flashattention]. Metrics shown are for an NVIDIA A100 GPU."><img src="https://shubhamg.in/posts/mojo_gpu_puzzles/memory_hierachy_fa.png" class="img-fluid figure-img" style="width:60.0%" alt="Source: FlashAttention [5]. Metrics shown are for an NVIDIA A100 GPU."></a></p>
<figcaption>Source: FlashAttention <span class="citation" data-cites="dao_flashattention">[5]</span>. Metrics shown are for an NVIDIA A100 GPU.</figcaption>
</figure>
</div>
<p>The key insight: when threads wait for slow global memory (~400-800 cycles), the GPU immediately switches to other threads. This keeps compute units busy while data moves through the hierarchy.</p>
</section>
<section id="execution-hierarchy-launch-enough-warps-to-hide-stalls" class="level3">
<h3 class="anchored" data-anchor-id="execution-hierarchy-launch-enough-warps-to-hide-stalls">2. Execution hierarchy – launch enough warps to hide stalls</h3>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="mojo_gpu_puzzles/gpu_flow_hierachy.png" class="lightbox" data-gallery="quarto-lightbox-gallery-2" title="GPU Execution Hierachy"><img src="https://shubhamg.in/posts/mojo_gpu_puzzles/gpu_flow_hierachy.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:60.0%" alt="GPU Execution Hierachy"></a></p>
</figure>
</div>
<figcaption>GPU Execution Hierachy</figcaption>
</figure>
</div>
<p>Building from the bottom up:</p>
<ul>
<li><strong>Thread</strong>: the basic execution unit with its own registers</li>
<li><strong>Warp</strong>: 32 threads executing the same instruction together (the basic unit of GPU scheduling)<br>
</li>
<li><strong>Block</strong>: a group of threads that share <code>shared</code> memory and can synchronize<br>
</li>
<li><strong>Grid</strong>: a collection of blocks distributed across SMs</li>
</ul>
<p>GPUs schedule threads in groups of 32 (warps). When one warp stalls on memory, the scheduler switches to another warp instantly. More resident warps = better latency hiding.</p>
</section>
<section id="program-flow-cpu-launches-gpu-streams" class="level3">
<h3 class="anchored" data-anchor-id="program-flow-cpu-launches-gpu-streams">3. Program flow – CPU launches, GPU streams</h3>
<p><a href="mojo_gpu_puzzles/program_flow.png" class="lightbox" data-gallery="quarto-lightbox-gallery-3"><img src="https://shubhamg.in/posts/mojo_gpu_puzzles/program_flow.png" class="img-fluid"></a></p>
<p>The CPU launches kernels asynchronously and goes back to other work. Inside the GPU each warp executes the <em>same instruction</em> (SIMT). Divergent branches disable some lanes and waste those cores.</p>
<ol type="1">
<li><strong>Host</strong> allocates and copies data to GPU global memory<br>
</li>
<li>Host launches the <strong>kernel</strong> with a specified grid and block size<br>
</li>
<li><strong>Device</strong> executes the kernel in parallel across threads<br>
</li>
<li>Host retrieves results from GPU memory</li>
</ol>
</section>
<section id="putting-it-together" class="level3">
<h3 class="anchored" data-anchor-id="putting-it-together">Putting it together</h3>
<p>Fast GPU kernels keep cores busy by:</p>
<ul>
<li>Staging hot data in <code>shared</code> or registers</li>
<li>Launching enough threads to mask global-memory latency</li>
<li>Writing branch-free, data-parallel code</li>
</ul>
<p>We will cover the practical implications of the above topics as we go through the puzzles.</p>
</section>
</section>
<section id="infrastructure" class="level2">
<h2 class="anchored" data-anchor-id="infrastructure">Infrastructure</h2>
<p>If you plan on solving these puzzles, remember to pick a <a href="https://docs.modular.com/max/faq/#gpu-requirements">compatible GPU</a> and follow the <a href="https://builds.modular.com/puzzles/howto.html">setup instructions</a></p>
<p>I completed the puzzles on a instance with a RTX4090 Ti chip, rented via <a href="https://www.primeintellect.ai/">Prime Intellect</a> at <strong>0.22 $/hr</strong>!</p>
<p><strong>Note</strong>: The Modular team has created beautiful <a href="https://github.com/ManimCommunity/manim">Manim</a> visualizations for each puzzle, making the concepts much more intuitive. I’ll walk through these visualizations as we tackle each problem.</p>
</section>
<section id="puzzle-01" class="level1">
<h1><a href="https://builds.modular.com/puzzles/puzzle_01/puzzle_01.html">Puzzle 1: Map</a></h1>
<p>In this puzzle, we aim to add a scalar to a vector. Specifically, we want to use a separate thread for each element in the vector, add the scalar, and write the result to the output memory.</p>
<p>When we create the kernel, the scalar will be effectively “broadcast” or expanded to match the shape of the input vector. This allows each element of the vector to be independently added with the scalar value in parallel by its dedicated thread, following the <a href="https://docs.pytorch.org/docs/stable/notes/broadcasting.html">broadcasting rules</a>.</p>
<div class="quarto-figure quarto-figure-middle">
<figure class="figure">
<p><a href="mojo_gpu_puzzles/p01_vector_addition.png" class="lightbox" data-gallery="quarto-lightbox-gallery-4"><img src="https://shubhamg.in/posts/mojo_gpu_puzzles/p01_vector_addition.png" class="img-fluid quarto-figure quarto-figure-middle figure-img"></a></p>
</figure>
</div>
<details open="">
<summary>
<strong>Solution</strong>
</summary>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>p01.mojo</strong></pre>
</div>
<div class="sourceCode" id="cb1" data-filename="p01.mojo" style="background: #f1f3f5;"><pre class="sourceCode mojo code-with-copy"><code class="sourceCode mojo"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> add_10(out: UnsafePointer[Scalar[dtype]], a: UnsafePointer[Scalar[dtype]]):</span>
<span id="cb1-2">    i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> thread_idx.x</span>
<span id="cb1-3">    out[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span></code></pre></div>
</div>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pixi</span> run p01</span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># out: HostBuffer([10.0, 11.0, 12.0, 13.0])</span></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># expected: HostBuffer([10.0, 11.0, 12.0, 13.0])</span></span></code></pre></div>
</details>
</section>
<section id="puzzle-02" class="level1">
<h1><a href="https://builds.modular.com/puzzles/puzzle_02/puzzle_02.html">Puzzle 2: Zip</a></h1>
<p>This is an extension of the map puzzle. Now, we aim to add 2 tensors together.</p>
<p><a href="mojo_gpu_puzzles/p02.png" class="lightbox" data-gallery="quarto-lightbox-gallery-5"><img src="https://shubhamg.in/posts/mojo_gpu_puzzles/p02.png" class="img-fluid"></a></p>
<p>As in puzzle 1, the aim is to use one individual thread for elements at a specific index in both vectors.</p>
<p><a href="mojo_gpu_puzzles/p02_thread.png" class="lightbox" data-gallery="quarto-lightbox-gallery-6"><img src="https://shubhamg.in/posts/mojo_gpu_puzzles/p02_thread.png" class="img-fluid"></a></p>
<p>Note that we assume the entire array will fit within a single block, which is why there is no code for boundary checking, edge cases, etc.</p>
<details open="">
<summary>
<strong>Solution</strong>
</summary>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>p02.mojo</strong></pre>
</div>
<div class="sourceCode" id="cb3" data-filename="p02.mojo" style="background: #f1f3f5;"><pre class="sourceCode mojo code-with-copy"><code class="sourceCode mojo"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> add(</span>
<span id="cb3-2">    out: UnsafePointer[Scalar[dtype]],</span>
<span id="cb3-3">    a: UnsafePointer[Scalar[dtype]],</span>
<span id="cb3-4">    b: UnsafePointer[Scalar[dtype]],</span>
<span id="cb3-5">):</span>
<span id="cb3-6">    i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> thread_idx.x</span>
<span id="cb3-7">    out[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b[i]</span></code></pre></div>
</div>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pixi</span> run p02</span>
<span id="cb4-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># a: HostBuffer([0.0, 1.0, 2.0, 3.0])</span></span>
<span id="cb4-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># b: HostBuffer([0.0, 1.0, 2.0, 3.0])</span></span>
<span id="cb4-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># out: HostBuffer([0.0, 2.0, 4.0, 6.0])</span></span>
<span id="cb4-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># expected: HostBuffer([0.0, 2.0, 4.0, 6.0])</span></span></code></pre></div>
</details>
</section>
<section id="puzzle-03" class="level1">
<h1><a href="https://builds.modular.com/puzzles/puzzle_03/puzzle_03.html">Puzzle 3: Guards</a></h1>
<p>The only difference between this puzzle and Puzzle 1 is that now it’s possible that the size of the GPU block is larger than the given input.</p>
<p>In GPU programming, “guards” refer to conditional statements that check if a thread should perform work based on its index. GPUs launch threads in fixed-size groups (blocks), and often these blocks contain more threads than elements in our array.</p>
<p>In this case, we need to check if the current thread index is valid before applying our computation on the vector. Without this guard, threads with indices beyond our array bounds would cause memory access violations.</p>
<p><a href="mojo_gpu_puzzles/p03.png" class="lightbox" data-gallery="quarto-lightbox-gallery-7"><img src="https://shubhamg.in/posts/mojo_gpu_puzzles/p03.png" class="img-fluid"></a></p>
<p>The image above illustrates how some threads have indices that exceed the array size and must be prevented from accessing memory.</p>
<details open="">
<summary>
<strong>Solution</strong>
</summary>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>p03.mojo</strong></pre>
</div>
<div class="sourceCode" id="cb5" data-filename="p03.mojo" style="background: #f1f3f5;"><pre class="sourceCode mojo code-with-copy"><code class="sourceCode mojo"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> add_10_guard(</span>
<span id="cb5-2">    out: UnsafePointer[Scalar[dtype]],</span>
<span id="cb5-3">    a: UnsafePointer[Scalar[dtype]],</span>
<span id="cb5-4">    size: Int,</span>
<span id="cb5-5">):</span>
<span id="cb5-6">    i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> thread_idx.x</span>
<span id="cb5-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> size:</span>
<span id="cb5-8">        out[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span></code></pre></div>
</div>
<p>Note that the size of the array is also sent as input to the kernel, as computing it in the kernel would defeat the purpose of parallelisation. While these conditional checks are necessary for correctness, they can introduce some performance overhead due to thread divergence within warps. We’ll cover this in more detail shortly.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pixi</span> run p03</span>
<span id="cb6-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># in: HostBuffer([0.0, 1.0, 2.0, 3.0])</span></span>
<span id="cb6-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># out: HostBuffer([10.0, 11.0, 12.0, 13.0])</span></span>
<span id="cb6-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># expected: HostBuffer([10.0, 11.0, 12.0, 13.0])</span></span></code></pre></div>
</details>
</section>
<section id="puzzle-04" class="level1">
<h1><a href="https://builds.modular.com/puzzles/puzzle_04/puzzle_04.html">Puzzle 4: 2D Map</a></h1>
<p>Similar to Puzzle 2, instead of operating on scalars with 1D tensors, we will now use 2D tensors.</p>
<p>Mojo, similar to CUDA, typically uses <a href="https://en.wikipedia.org/wiki/Row-_and_column-major_order">row-major</a> order for array storage, meaning data is stored sequentially by rows in memory.</p>
<p><a href="mojo_gpu_puzzles/p04_row_col_major.png" class="lightbox" data-gallery="quarto-lightbox-gallery-8"><img src="https://shubhamg.in/posts/mojo_gpu_puzzles/p04_row_col_major.png" class="img-fluid"></a></p>
<p>Given the row-major format, the elements are accessed using the formula:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AA_%7BR,C%7D%20=%20R*%5Ctext%7Bsize%5C_of%5C_array%7D%20+%20C%0A"></p>
<section id="raw-memory-approach" class="level4">
<h4 class="anchored" data-anchor-id="raw-memory-approach">Raw Memory Approach</h4>
<details open="">
<summary>
<strong>Solution</strong>
</summary>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>p04.mojo</strong></pre>
</div>
<div class="sourceCode" id="cb7" data-filename="p04.mojo" style="background: #f1f3f5;"><pre class="sourceCode mojo code-with-copy"><code class="sourceCode mojo"><span id="cb7-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> add_10_2d(</span>
<span id="cb7-2">    out: UnsafePointer[Scalar[dtype]],</span>
<span id="cb7-3">    a: UnsafePointer[Scalar[dtype]],</span>
<span id="cb7-4">    size: Int,</span>
<span id="cb7-5">):</span>
<span id="cb7-6">    row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> thread_idx.y</span>
<span id="cb7-7">    col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> thread_idx.x</span>
<span id="cb7-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> size <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> size:</span>
<span id="cb7-9">        out[row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> col] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a[row<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>col] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span></code></pre></div>
</div>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb8-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pixi</span> run p04</span>
<span id="cb8-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># in: HostBuffer([0.0, 1.0, 2.0, 3.0]) -- shaped as 2x2 row-major</span></span>
<span id="cb8-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># out: HostBuffer([10.0, 11.0, 12.0, 13.0])</span></span>
<span id="cb8-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># expected: HostBuffer([10.0, 11.0, 12.0, 13.0])</span></span></code></pre></div>
</details>
</section>
<section id="layouttensor" class="level4">
<h4 class="anchored" data-anchor-id="layouttensor">LayoutTensor</h4>
<p>LayoutTensor<span class="citation" data-cites="llvmlayouttensor">[6]</span> is Mojo’s abstraction to work on a Tensor.</p>
<p>Specifically, LayoutTensor aims to provide:</p>
<ul>
<li>High level primitive to perform operations on tiles.</li>
<li>Flexible memory layouts, with support for row-based, column-based and tiled organisation of data in memory.</li>
<li>Expose functions/parameters to enable auto-tuning or manual experimentation.</li>
<li>Access to hardware without inline assembly.</li>
</ul>
<p>Mojo(and LayoutTensor) follow this “parameter syntax”<span class="citation" data-cites="mojotalk">[7]</span>, which is similar to how C++ templates are defined. This was a bit difficult for me to grasp since I don’t have a C++ background, and caused a few troubles in the upcoming puzzles. I was happy to learn that I’m not the only one struggling with it though!<span class="citation" data-cites="jeffniutriton">[8]</span> .</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="mojo_gpu_puzzles/p04_parameter_syntax.png" class="lightbox" data-gallery="quarto-lightbox-gallery-9" title="Mojo Parameter Syntax"><img src="https://shubhamg.in/posts/mojo_gpu_puzzles/p04_parameter_syntax.png" class="img-fluid figure-img" alt="Mojo Parameter Syntax"></a></p>
<figcaption>Mojo Parameter Syntax</figcaption>
</figure>
</div>
<p>The features that looked most interesting to me are:</p>
<ul>
<li>Natural Indexing: Index a element using the format <code>A[row, col]</code></li>
<li>Automatic Bounds Checking: I’ve (ab)used this feature in the upcoming puzzles.</li>
</ul>
<p>Some examples of <a href="https://builds.modular.com/puzzles/puzzle_04/introduction_layout_tensor.html#basic-usage-example">LayoutTensor in practice</a>:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>layout_tensor.mojo</strong></pre>
</div>
<div class="sourceCode" id="cb9" data-filename="layout_tensor.mojo" style="background: #f1f3f5;"><pre class="sourceCode mojo code-with-copy"><code class="sourceCode mojo"><span id="cb9-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> layout <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Layout, LayoutTensor</span>
<span id="cb9-2"></span>
<span id="cb9-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define layout</span></span>
<span id="cb9-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">alias</span> HEIGHT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb9-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">alias</span> WIDTH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb9-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">alias</span> layout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Layout.row_major(HEIGHT, WIDTH)</span>
<span id="cb9-7"></span>
<span id="cb9-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create tensor</span></span>
<span id="cb9-9">tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LayoutTensor[dtype, layout](<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">buffer</span>.unsafe_ptr())</span>
<span id="cb9-10"></span>
<span id="cb9-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Access elements naturally</span></span>
<span id="cb9-12">tensor[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># First element</span></span>
<span id="cb9-13">tensor[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Last element</span></span>
<span id="cb9-14"></span>
<span id="cb9-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Column-major layout</span></span>
<span id="cb9-16">layout_col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Layout.col_major(HEIGHT, WIDTH)</span>
<span id="cb9-17"></span>
<span id="cb9-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Tiled layout (for better cache utilization)</span></span>
<span id="cb9-19">layout_tiled <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tensor.tiled[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>](HEIGHT, WIDTH)</span></code></pre></div>
</div>
<details open="">
<summary>
<strong>Solution</strong>
</summary>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>p04.mojo</strong></pre>
</div>
<div class="sourceCode" id="cb10" data-filename="p04.mojo" style="background: #f1f3f5;"><pre class="sourceCode mojo code-with-copy"><code class="sourceCode mojo"><span id="cb10-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> add_10_2d(</span>
<span id="cb10-2">    out: LayoutTensor[mut<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, dtype, layout],</span>
<span id="cb10-3">    a: LayoutTensor[mut<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, dtype, layout],</span>
<span id="cb10-4">    size: Int,</span>
<span id="cb10-5">):</span>
<span id="cb10-6">    row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> thread_idx.y</span>
<span id="cb10-7">    col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> thread_idx.x</span>
<span id="cb10-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># </span><span class="al" style="color: #AD0000;
background-color: null;
font-style: inherit;">NOTE</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">: With layout tensor, this is not really necessary, but it helps prevent unwanted memory access</span></span>
<span id="cb10-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> size <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> size: </span>
<span id="cb10-10">        out[row, col] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a[row, col] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.0</span></span></code></pre></div>
</div>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb11-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pixi</span> run p04_layout_tensor</span>
<span id="cb11-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># in: HostBuffer([0.0, 1.0, 2.0, 3.0])</span></span>
<span id="cb11-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># out shape: 2 x 2</span></span>
<span id="cb11-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># out: HostBuffer([10.0, 11.0, 12.0, 13.0])</span></span>
<span id="cb11-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># expected: HostBuffer([10.0, 11.0, 12.0, 13.0])</span></span></code></pre></div>
</details>
</section>
</section>
<section id="puzzle-05" class="level1">
<h1><a href="https://builds.modular.com/puzzles/puzzle_05/puzzle_05.html">Puzzle 5: Broadcast</a></h1>
<p>We aim to broadcast the addition operation over two vectors. Following the <a href="https://docs.pytorch.org/docs/stable/notes/broadcasting.html">broadcasting rules</a>, the result will be an outer-product of the given vectors.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="mojo_gpu_puzzles/p05_vector_addition.png" class="lightbox" data-gallery="quarto-lightbox-gallery-10"><img src="https://shubhamg.in/posts/mojo_gpu_puzzles/p05_vector_addition.png" class="quarto-figure quarto-figure-center figure-img" height="600"></a></p>
</figure>
</div>
<section id="raw-memory-version" class="level4">
<h4 class="anchored" data-anchor-id="raw-memory-version">Raw Memory Version</h4>
<details open="">
<summary>
<strong>Solution</strong>
</summary>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>p05.mojo</strong></pre>
</div>
<div class="sourceCode" id="cb12" data-filename="p05.mojo" style="background: #f1f3f5;"><pre class="sourceCode mojo code-with-copy"><code class="sourceCode mojo"><span id="cb12-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> broadcast_add(</span>
<span id="cb12-2">    out: UnsafePointer[Scalar[dtype]],</span>
<span id="cb12-3">    a: UnsafePointer[Scalar[dtype]],</span>
<span id="cb12-4">    b: UnsafePointer[Scalar[dtype]],</span>
<span id="cb12-5">    size: Int,</span>
<span id="cb12-6">):</span>
<span id="cb12-7">    row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> thread_idx.y</span>
<span id="cb12-8">    col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> thread_idx.x</span>
<span id="cb12-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> size <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> size:</span>
<span id="cb12-10">        out[row<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> col] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a[row] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b[col]</span></code></pre></div>
</div>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb13-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pixi</span> run p05</span>
<span id="cb13-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># in a: HostBuffer([0.0, 1.0])</span></span>
<span id="cb13-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># in b: HostBuffer([0.0, 1.0])</span></span>
<span id="cb13-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># out: HostBuffer([0.0, 1.0, 1.0, 2.0])</span></span>
<span id="cb13-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># expected: HostBuffer([0.0, 1.0, 1.0, 2.0])</span></span></code></pre></div>
</details>
</section>
<section id="layout-tensor" class="level4">
<h4 class="anchored" data-anchor-id="layout-tensor">Layout Tensor</h4>
<p>Since we know the inputs are 1D vectors, we use only one dimension from each of the vectors, and set the other to 0 i.e the first element.</p>
<details open="">
<summary>
<strong>Solution</strong>
</summary>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>p05_layout_tensor.mojo</strong></pre>
</div>
<div class="sourceCode" id="cb14" data-filename="p05_layout_tensor.mojo" style="background: #f1f3f5;"><pre class="sourceCode mojo code-with-copy"><code class="sourceCode mojo"><span id="cb14-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> broadcast_add[</span>
<span id="cb14-2">    out_layout: Layout,</span>
<span id="cb14-3">    a_layout: Layout,</span>
<span id="cb14-4">    b_layout: Layout,</span>
<span id="cb14-5">](</span>
<span id="cb14-6">    out: LayoutTensor[mut<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, dtype, out_layout],</span>
<span id="cb14-7">    a: LayoutTensor[mut<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, dtype, a_layout],</span>
<span id="cb14-8">    b: LayoutTensor[mut<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, dtype, b_layout],</span>
<span id="cb14-9">    size: Int,</span>
<span id="cb14-10">):</span>
<span id="cb14-11">    row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> thread_idx.y</span>
<span id="cb14-12">    col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> thread_idx.x</span>
<span id="cb14-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> size <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> size:</span>
<span id="cb14-14">        out[row, col] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, row] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b[col, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
</div>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb15-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pixi</span> run p05_layout_tensor</span>
<span id="cb15-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># in a: HostBuffer([0.0, 1.0])</span></span>
<span id="cb15-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># in b: HostBuffer([0.0, 1.0])</span></span>
<span id="cb15-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># out shape: 2 x 2</span></span>
<span id="cb15-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># out: HostBuffer([0.0, 1.0, 1.0, 2.0])</span></span>
<span id="cb15-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># expected: HostBuffer([0.0, 1.0, 1.0, 2.0])</span></span></code></pre></div>
</details>
</section>
</section>
<section id="puzzle-06" class="level1">
<h1><a href="https://builds.modular.com/puzzles/puzzle_06/puzzle_06.html">Puzzle 6: Blocks</a></h1>
<p>Building on Puzzles 4 and 5, we now aim to add a scalar to a tensor. We also have the additional restriction around having fewer threads than the elements in our array, per block. This means that now apart from using the local indices of the current thread(<code>thread_idx.y</code> and <code>thread_idx.x</code>), we now also need to identify the current block, using <code>block_idx.y</code> and <code>block_idx.x</code>. The formula for calculating the index, in row-major format, is:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Aidx%20=%20block%5C_idx.x%20*%20block%5C_dim.x%20+%20thread%5C_idx.x%0A"></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="mojo_gpu_puzzles/p06.png" class="lightbox" data-gallery="quarto-lightbox-gallery-11"><img src="https://shubhamg.in/posts/mojo_gpu_puzzles/p06.png" class="quarto-figure quarto-figure-center figure-img" height="600"></a></p>
</figure>
</div>
<details open="">
<summary>
<strong>Solution</strong>
</summary>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>p06.mojo</strong></pre>
</div>
<div class="sourceCode" id="cb16" data-filename="p06.mojo" style="background: #f1f3f5;"><pre class="sourceCode mojo code-with-copy"><code class="sourceCode mojo"><span id="cb16-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">alias</span> SIZE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span></span>
<span id="cb16-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">alias</span> BLOCKS_PER_GRID <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb16-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">alias</span> THREADS_PER_BLOCK <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb16-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">alias</span> dtype <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DType.float32</span>
<span id="cb16-5"></span>
<span id="cb16-6"></span>
<span id="cb16-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> add_10_blocks(</span>
<span id="cb16-8">    out: UnsafePointer[Scalar[dtype]],</span>
<span id="cb16-9">    a: UnsafePointer[Scalar[dtype]],</span>
<span id="cb16-10">    size: Int,</span>
<span id="cb16-11">):</span>
<span id="cb16-12">    i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> block_dim.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> block_idx.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> thread_idx.x</span>
<span id="cb16-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> size:</span>
<span id="cb16-14">        out[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span></code></pre></div>
</div>
</details>
</section>
<section id="puzzle-07" class="level1">
<h1><a href="https://builds.modular.com/puzzles/puzzle_07/puzzle_07.html">Puzzle 7: 2D Blocks</a></h1>
<p>As the title suggests, we now have a 2D structure for both blocks and grids, and the number of threads per block is lesser than the total number of elements in the input tensor.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="mojo_gpu_puzzles/p07.png" class="lightbox" data-gallery="quarto-lightbox-gallery-12"><img src="https://shubhamg.in/posts/mojo_gpu_puzzles/p07.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></a></p>
</figure>
</div>
<section id="raw-memory" class="level4">
<h4 class="anchored" data-anchor-id="raw-memory">Raw Memory</h4>
<details open="">
<summary>
<strong>Solution</strong>
</summary>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>p07.mojo</strong></pre>
</div>
<div class="sourceCode" id="cb17" data-filename="p07.mojo" style="background: #f1f3f5;"><pre class="sourceCode mojo code-with-copy"><code class="sourceCode mojo"><span id="cb17-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">alias</span> SIZE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb17-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">alias</span> BLOCKS_PER_GRID <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb17-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">alias</span> THREADS_PER_BLOCK <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb17-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">alias</span> dtype <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DType.float32</span>
<span id="cb17-5"></span>
<span id="cb17-6"></span>
<span id="cb17-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> add_10_blocks_2d(</span>
<span id="cb17-8">    out: UnsafePointer[Scalar[dtype]],</span>
<span id="cb17-9">    a: UnsafePointer[Scalar[dtype]],</span>
<span id="cb17-10">    size: Int,</span>
<span id="cb17-11">):</span>
<span id="cb17-12">    row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> block_dim.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> block_idx.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> thread_idx.y</span>
<span id="cb17-13">    col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> block_dim.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> block_idx.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> thread_idx.x</span>
<span id="cb17-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> size <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> size:</span>
<span id="cb17-15">        out[row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> col] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a[row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> col] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.0</span></span>
<span id="cb17-16"></span>
<span id="cb17-17"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">```bash</span></span>
<span id="cb17-18"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">pixi run p07</span></span>
<span id="cb17-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># out: HostBuffer([11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0])</span></span>
<span id="cb17-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># expected: HostBuffer([11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0])</span></span></code></pre></div>
</div>
</details>
</section>
<section id="layout-tensor-1" class="level4">
<h4 class="anchored" data-anchor-id="layout-tensor-1">Layout Tensor</h4>
<details open="">
<summary>
<strong>Solution</strong>
</summary>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>p07.mojo</strong></pre>
</div>
<div class="sourceCode" id="cb18" data-filename="p07.mojo" style="background: #f1f3f5;"><pre class="sourceCode mojo code-with-copy"><code class="sourceCode mojo"><span id="cb18-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">alias</span> SIZE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span></span>
<span id="cb18-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">alias</span> BLOCKS_PER_GRID <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb18-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">alias</span> THREADS_PER_BLOCK <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb18-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">alias</span> dtype <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DType.float32</span>
<span id="cb18-5"></span>
<span id="cb18-6"></span>
<span id="cb18-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> add_10_blocks(</span>
<span id="cb18-8">    out: UnsafePointer[Scalar[dtype]],</span>
<span id="cb18-9">    a: UnsafePointer[Scalar[dtype]],</span>
<span id="cb18-10">    size: Int,</span>
<span id="cb18-11">):</span>
<span id="cb18-12">    i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> block_dim.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> block_idx.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> thread_idx.x</span>
<span id="cb18-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> size:</span>
<span id="cb18-14">        out[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span></code></pre></div>
</div>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb19-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pixi</span> run p07_layout_tensor</span>
<span id="cb19-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># out: 11.0 11.0 11.0 11.0 11.0</span></span>
<span id="cb19-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 11.0 11.0 11.0 11.0 11.0</span></span>
<span id="cb19-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 11.0 11.0 11.0 11.0 11.0</span></span>
<span id="cb19-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 11.0 11.0 11.0 11.0 11.0</span></span>
<span id="cb19-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 11.0 11.0 11.0 11.0 11.0</span></span>
<span id="cb19-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># expected: 11.0 11.0 11.0 11.0 11.0</span></span>
<span id="cb19-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 11.0 11.0 11.0 11.0 11.0</span></span>
<span id="cb19-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 11.0 11.0 11.0 11.0 11.0</span></span>
<span id="cb19-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 11.0 11.0 11.0 11.0 11.0</span></span>
<span id="cb19-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 11.0 11.0 11.0 11.0 11.0</span></span></code></pre></div>
</details>
</section>
</section>
<section id="puzzle-08" class="level1">
<h1><a href="https://builds.modular.com/puzzles/puzzle_08/puzzle_08.html">Puzzle 8: Shared Memory</a></h1>
<p>This puzzle introduces shared memory—the on-chip SRAM that makes GPUs fast. Instead of each thread reading from slow global memory, we’ll load data into shared memory once and let all threads in a block access it quickly.</p>
<p>In this puzzle we leverage shared memory (SRAM). Like Puzzle 7, we add a scalar to a 2D tensor, but now each block has fewer threads than there are input elements.</p>
<p>As shown above, SRAM is orders of magnitude faster than DRAM. Accessing global memory directly is slow, so we first load data into shared memory—then perform our computations for much faster access.</p>
<p>Although this input is too small to reveal a noticeable speedup, the advantage of shared memory becomes substantial as array sizes increase.</p>
<p>Now, because our operations depend on all records being available in shared memory, we need to wait for all threads in a block to write data to the shared memory before we can access it. Failure to do this can lead to deadlocks or undefined behaviour. Hence, we need <strong>synchronisation</strong>!</p>
<p>Mojo has support for all the common <a href="https://docs.modular.com/mojo/stdlib/gpu/sync/#functions">synchronisation primitives</a>, similar to <a href="https://nvidia.github.io/cccl/libcudacxx/extended_api/synchronization_primitives.html">CUDA primitives</a>. For this puzzle, we need to use the <code>barrier</code> synchronisation, which is the same as <code>_syncThreads()</code> in CUDA: Ensure all threads within a thread block reach the barrier before any can proceed.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="mojo_gpu_puzzles/p08.png" class="lightbox" data-gallery="quarto-lightbox-gallery-13"><img src="https://shubhamg.in/posts/mojo_gpu_puzzles/p08.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></a></p>
</figure>
</div>
<section id="raw-memory-1" class="level4">
<h4 class="anchored" data-anchor-id="raw-memory-1">Raw memory</h4>
<details open="">
<summary>
<strong>Solution</strong>
</summary>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>p08.mojo</strong></pre>
</div>
<div class="sourceCode" id="cb20" data-filename="p08.mojo" style="background: #f1f3f5;"><pre class="sourceCode mojo code-with-copy"><code class="sourceCode mojo"><span id="cb20-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">alias</span> TPB <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span></span>
<span id="cb20-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">alias</span> SIZE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span></span>
<span id="cb20-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">alias</span> BLOCKS_PER_GRID <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb20-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">alias</span> THREADS_PER_BLOCK <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (TPB, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb20-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">alias</span> dtype <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DType.float32</span>
<span id="cb20-6"></span>
<span id="cb20-7"></span>
<span id="cb20-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> add_10_shared(</span>
<span id="cb20-9">    out: UnsafePointer[Scalar[dtype]],</span>
<span id="cb20-10">    a: UnsafePointer[Scalar[dtype]],</span>
<span id="cb20-11">    size: Int,</span>
<span id="cb20-12">):</span>
<span id="cb20-13">    shared <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stack_allocation[</span>
<span id="cb20-14">        TPB,</span>
<span id="cb20-15">        Scalar[dtype],</span>
<span id="cb20-16">        address_space <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AddressSpace.SHARED,</span>
<span id="cb20-17">    ]()</span>
<span id="cb20-18">    global_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> block_dim.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> block_idx.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> thread_idx.x</span>
<span id="cb20-19">    local_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> thread_idx.x</span>
<span id="cb20-20">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># local data into shared memory</span></span>
<span id="cb20-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> global_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> size:</span>
<span id="cb20-22">        shared[local_i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a[global_i]</span>
<span id="cb20-23"></span>
<span id="cb20-24">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># wait for all threads to complete</span></span>
<span id="cb20-25">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># works within a thread block</span></span>
<span id="cb20-26">    barrier()</span>
<span id="cb20-27"></span>
<span id="cb20-28">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> global_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> size:</span>
<span id="cb20-29">        out[global_i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> shared[local_i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.0</span></span></code></pre></div>
</div>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb21-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pixi</span> run p08</span>
<span id="cb21-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># out: HostBuffer([11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0])</span></span>
<span id="cb21-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># expected: HostBuffer([11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0])</span></span></code></pre></div>
</details>
</section>
<section id="layouttensor-1" class="level4">
<h4 class="anchored" data-anchor-id="layouttensor-1">LayoutTensor</h4>
<p>Key difference here is to use <a href="https://builds.modular.com/puzzles/puzzle_08/layout_tensor.html#key-differences-from-raw-approach">LayoutTensorBuild instead of stack_allocation</a> to allocate shared memory.</p>
<details open="">
<summary>
<strong>Solution</strong>
</summary>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>p08_layout_tensor.mojo</strong></pre>
</div>
<div class="sourceCode" id="cb22" data-filename="p08_layout_tensor.mojo" style="background: #f1f3f5;"><pre class="sourceCode mojo code-with-copy"><code class="sourceCode mojo"><span id="cb22-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">alias</span> TPB <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span></span>
<span id="cb22-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">alias</span> SIZE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span></span>
<span id="cb22-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">alias</span> BLOCKS_PER_GRID <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb22-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">alias</span> THREADS_PER_BLOCK <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (TPB, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb22-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">alias</span> dtype <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DType.float32</span>
<span id="cb22-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">alias</span> layout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Layout.row_major(SIZE)</span>
<span id="cb22-7"></span>
<span id="cb22-8"></span>
<span id="cb22-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> add_10_shared_layout_tensor[</span>
<span id="cb22-10">    layout: Layout</span>
<span id="cb22-11">](</span>
<span id="cb22-12">    out: LayoutTensor[mut<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, dtype, layout],</span>
<span id="cb22-13">    a: LayoutTensor[mut<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, dtype, layout],</span>
<span id="cb22-14">    size: Int,</span>
<span id="cb22-15">):</span>
<span id="cb22-16">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Allocate shared memory using tensor builder</span></span>
<span id="cb22-17">    shared <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tb[dtype]().row_major[TPB]().shared().alloc()</span>
<span id="cb22-18"></span>
<span id="cb22-19">    global_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> block_dim.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> block_idx.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> thread_idx.x</span>
<span id="cb22-20">    local_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> thread_idx.x</span>
<span id="cb22-21"></span>
<span id="cb22-22">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> global_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> size:</span>
<span id="cb22-23">        shared[local_i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a[global_i]</span>
<span id="cb22-24"></span>
<span id="cb22-25">    barrier()</span>
<span id="cb22-26"></span>
<span id="cb22-27">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> global_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> size:</span>
<span id="cb22-28">        out[global_i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> shared[local_i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.0</span></span></code></pre></div>
</div>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb23-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pixi</span> run p08_layout_tensor</span>
<span id="cb23-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># out: HostBuffer([11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0])</span></span>
<span id="cb23-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># expected: HostBuffer([11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0])</span></span></code></pre></div>
</details>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>We covered simple algorithms such as map, zip using Mojo, and did some initial work with their <code>LayoutTensor</code> abstraction, which similar to the <a href="https://docs.nvidia.com/cutlass/media/docs/cpp/cute/00_quickstart.html">CuTe</a> library.</p>
<p>Stay tuned for more posts—I’ll be diving into more advanced GPU puzzles and Mojo tricks soon!</p>
<p>If you spot mistakes or have better/faster Mojo code, open a PR or ping me on <a href="https://twitter.com/shubhamg2208">Twitter/X</a>. Happy hacking!</p>



</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-bibliography"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body" data-entry-spacing="0">
<div id="ref-Google" class="csl-entry">
<div class="csl-left-margin">[1] </div><div class="csl-right-inline">Google, <span>“<span>I/O 2025 Keynote</span>.”</span> 2025. Available: <a href="https://blog.google/technology/ai/io-2025-keynote/">https://blog.google/technology/ai/io-2025-keynote/</a></div>
</div>
<div id="ref-modularpuzzles" class="csl-entry">
<div class="csl-left-margin">[2] </div><div class="csl-right-inline">Modular, <span>“<span class="nocase">GPU Puzzles in Mojo</span>.”</span> 2025. Available: <a href="https://builds.modular.com/puzzles/introduction.html">https://builds.modular.com/puzzles/introduction.html</a></div>
</div>
<div id="ref-GPUPuzzles" class="csl-entry">
<div class="csl-left-margin">[3] </div><div class="csl-right-inline">S. Rush, <span>“<span>GPU Puzzles</span>.”</span> 2023. Available: <a href="https://github.com/srush/GPU-Puzzles">https://github.com/srush/GPU-Puzzles</a></div>
</div>
<div id="ref-modular_democratizing_ai_compute" class="csl-entry">
<div class="csl-left-margin">[4] </div><div class="csl-right-inline">C. Lattner and Modular, <span>“Democratizing AI compute.”</span> 2025. Available: <a href="https://www.modular.com/democratizing-ai-compute">https://www.modular.com/democratizing-ai-compute</a></div>
</div>
<div id="ref-dao_flashattention" class="csl-entry">
<div class="csl-left-margin">[5] </div><div class="csl-right-inline">T. Dao, D. Y. Fu, S. Ermon, A. Rudra, and C. Ré, <span>“FlashAttention: Fast and memory-efficient exact attention with IO-awareness,”</span> <em>arXiv preprint arXiv:2205.14135</em>, 2022, Available: <a href="https://arxiv.org/abs/2205.14135">https://arxiv.org/abs/2205.14135</a></div>
</div>
<div id="ref-llvmlayouttensor" class="csl-entry">
<div class="csl-left-margin">[6] </div><div class="csl-right-inline">Taei, <span>“<span class="nocase">Simplifying GPU Programming with Parametric Tile-Level Tensors In Mojo</span>.”</span> 2024. Available: <a href="https://llvm.org/devmtg/2024-10/slides/techtalk/Taei-Simplifying-GPU-Programming-with-Parametric-Tile-Level-Tensors-In-Mojo.pdf">https://llvm.org/devmtg/2024-10/slides/techtalk/Taei-Simplifying-GPU-Programming-with-Parametric-Tile-Level-Tensors-In-Mojo.pdf</a></div>
</div>
<div id="ref-mojotalk" class="csl-entry">
<div class="csl-left-margin">[7] </div><div class="csl-right-inline">Modular, <span>“<span class="nocase">Mojo: The Future of Systems Programming</span>.”</span> 2025. Available: <a href="https://youtu.be/5gPG7SXoBag?si=H_kbkzbqfZHvNQSy&amp;t=1731">https://youtu.be/5gPG7SXoBag?si=H_kbkzbqfZHvNQSy&amp;t=1731</a></div>
</div>
<div id="ref-jeffniutriton" class="csl-entry">
<div class="csl-left-margin">[8] </div><div class="csl-right-inline">J. Niu, <span>“<span class="nocase">Triton Clone in Mojo</span>.”</span> 2025. Available: <a href="https://youtu.be/zUwyO2PZisw?si=QLdX_cAXDBcJH4mu">https://youtu.be/zUwyO2PZisw?si=QLdX_cAXDBcJH4mu</a></div>
</div>
</div></section></div> ]]></description>
  <category>programming</category>
  <category>gpu</category>
  <category>mojo</category>
  <guid>https://shubhamg.in/posts/2025-07-06-gpu-puzzles-p1.html</guid>
  <pubDate>Sun, 06 Jul 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>BERT + BM25 = BISON</title>
  <dc:creator>Shubham Gupta</dc:creator>
  <link>https://shubhamg.in/posts/2020-08-31-bison.html</link>
  <description><![CDATA[ 






<section id="introduction" class="level1">
<h1>Introduction</h1>
<ul>
<li>This paper aims to create a framework to map query and doc into semantic vectors via self-attention models.</li>
<li>We cant use prior knowledge about important tokens for models based on self-attention.
<ul>
<li>Words are split into different tokens using a tokenization mechanism such as WordPiece. We cannot translate word-level knowledge into different tokens.</li>
</ul></li>
<li>However, from classical information retrieval, we know that prior knowledge about the word is important. For example, ERNIE used a Knowledge Graph to achieve SOTA on several GLUE tasks.</li>
<li>Furthermore, documents have different fields with varying degrees of importance such as text, header, filetypes, etc. We cannot combine these fields directly because their importance varies for a task.</li>
<li><strong>Key takeaways</strong>:
<ul>
<li>Combine BM25 to learn attention scores with Query(Q) and Key(K) matrices, which are used in self-attention.</li>
<li>Word weight sharing to reduce knowledge discrepancy between tokens and words.</li>
<li>Combine multiple fields by placing different fields in different segments using a BM25F, a variation of BM25.</li>
</ul></li>
</ul>
</section>
<section id="background" class="level1">
<h1>Background</h1>
<ul>
<li>Using NN for doc retrieval has 2 approaches
<ul>
<li><strong>Siamese Networks</strong>: In this, we encode the given query <img src="https://latex.codecogs.com/png.latex?q"> and the document <img src="https://latex.codecogs.com/png.latex?d"> separately.</li>
<li><strong>Interactive Networks</strong>: In this, we encode the given query <img src="https://latex.codecogs.com/png.latex?q"> and the document <img src="https://latex.codecogs.com/png.latex?d"> together.</li>
</ul></li>
<li>For large scale document retrieval tasks dependent on vector search, siamese networks are preferred since we can encode multiple documents without a query offline. This ensures the overall document retrieval process is fast in production.</li>
<li>BISON is built using a Siamese Network architecture.</li>
</ul>
</section>
<section id="proposed-method" class="level1">
<h1>Proposed method</h1>
<section id="overview-of-bison" class="level2">
<h2 class="anchored" data-anchor-id="overview-of-bison">Overview of BISON</h2>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://shubhamg.in/posts/bison/bison_architecture.png" class="img-fluid figure-img"></p>
<figcaption>BISON Architecture</figcaption>
</figure>
</div>
<ul>
<li>The framework has 4 important parts:
<ul>
<li><strong>Word level BM25</strong>: In this, we prepend the <em>CLS</em> token to the query and use combined fields representation for the documents.</li>
<li><strong>Token level representation</strong>: As is the norm, we will use the token, position and segment embedding</li>
<li><strong>BISON Encoder</strong>: This will encode the query <em>q</em> and the document <em>d</em> into semantic spacy by siamese structure making it possible to serve the model online. The architecture consists of 3 stacked BISON layers.</li>
<li><strong>Scoring</strong>: The documents are scored using the cosine similarity metric.</li>
</ul></li>
</ul>
</section>
<section id="bison-encoder-weighted-self-attention" class="level2">
<h2 class="anchored" data-anchor-id="bison-encoder-weighted-self-attention">BISON Encoder: Weighted Self Attention</h2>
<ul>
<li>As we know from the original “Attention” paper, attention is computed using the query, key, and value matrices.</li>
<li>To the above, we will add the importance of tokens via BM25. We will introduce w_i and multiply with above attention to get new attention score i.e Weighted Self Attention <img src="https://latex.codecogs.com/png.latex?%20A_%7Bij%7D%5Ew%20=%20w_j%5Cfrac%7Bq_i.k_j%5ET%7D%7B%5Csqrt%7Bd%7D%7D%20"></li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://shubhamg.in/posts/bison/weighted_self_attention.png" class="img-fluid figure-img"></p>
<figcaption>Weighted Self Attention</figcaption>
</figure>
</div>
<ul>
<li>Mathematically, it is represented as:</li>
</ul>
<p><img src="https://latex.codecogs.com/png.latex?WeightedSelfAttention(Q,K,W,V)%20=%20softmax(W%20(.)%20%5Cfrac%7BQK%5ET%7D%7B%5Csqrt%7Bd%7D%7DV"></p>
<ul>
<li>WSA is the main block unit. Multiple such units are tacked to get the multi-head structure.</li>
<li>Rescaling by <img src="https://latex.codecogs.com/png.latex?W%5Eo">, we get <strong>Complex Weighted Self Attention(CWSA)</strong>.</li>
<li>A fully connected layer is added. In both CWSA and fully connected layer, layer norm and residual connections are used</li>
</ul>
<p><img src="https://latex.codecogs.com/png.latex?CWSA%20=%20Concat(WeightedSelfAttention1,...%20WeightedSelfAttention,%20n)W%5Eo"></p>
<p><img src="https://latex.codecogs.com/png.latex?CWSA_%7Bout%7D=LayerNorm(CWSA%20+%20X)"></p>
<p><img src="https://latex.codecogs.com/png.latex?BISONEncoder%20=%20LayerNorm(CWSA_%7Bout%7D%20+%20FeedForward(CWSA_%7Bout%7D))"></p>
</section>
<section id="bm25-weight-generation" class="level2">
<h2 class="anchored" data-anchor-id="bm25-weight-generation">BM25 Weight generation</h2>
<ul>
<li>Use BM25 for weight scores in query and BM25F for weight scores in multi-field documents</li>
<li>BM25F, a variation of BM25, is for documents with different fields, each having different importance in terms of relevance saturation and length normalization. Find additional details in the file <a href="https://web.stanford.edu/class/cs276/handouts/lecture12-bm25etc.pdf">here</a>.</li>
</ul>
<section id="inherent-query-bm25" class="level3">
<h3 class="anchored" data-anchor-id="inherent-query-bm25">Inherent Query BM25</h3>
<ul>
<li>For a given query, BM25 is calculated within the query.
<ul>
<li><img src="https://latex.codecogs.com/png.latex?l_q">: query length</li>
<li><img src="https://latex.codecogs.com/png.latex?avl_q">: query average length along collection</li>
</ul></li>
</ul>
<p><img src="https://latex.codecogs.com/png.latex?%0Aw_i%5E%7BBM25%7D%20=%20idf_i%20%5Cfrac%7Btf_i%7D%7Btf_i%20+%20k_1(1-b+b%20%5Cfrac%7Bl_q%7D%7Bavl_q%7D)%7D%0A"></p>
</section>
<section id="inherent-document-bm25f" class="level3">
<h3 class="anchored" data-anchor-id="inherent-document-bm25f">Inherent Document BM25F</h3>
<ul>
<li>BM25F is implemented by assigning different degrees of importance to the different zones in a document such as title, header, footer, filetype, text, etc. For a <img src="https://latex.codecogs.com/png.latex?word_j"> in a document field <img src="https://latex.codecogs.com/png.latex?c">, it’s frequency <img src="https://latex.codecogs.com/png.latex?f_j%5Ec"> is defined as:</li>
</ul>
<p><img src="https://latex.codecogs.com/png.latex?%0Aatf_j%5Ec%20=%20%5Cfrac%7Bfw_c%20.%20tf_j%5Ec%7D%7B1.0%20+%20fln_c%20.%20(%5Cfrac%7Bfl_c%7D%7Bavl_c%7D-1.0)%7D%0A"></p>
<ul>
<li>The corresponding BM25F score is computed as</li>
</ul>
<p><img src="https://latex.codecogs.com/png.latex?%0Aw_j%5E%7BBM25F%7D%20=%20idf_j%5Cfrac%7Batf_j%7D%7Bk_1%20+%20atf_j%7D%0A"></p>
</section>
</section>
<section id="whole-word-weight-sharing" class="level2">
<h2 class="anchored" data-anchor-id="whole-word-weight-sharing">Whole word weight sharing</h2>
<ul>
<li>BERT uses wordpiece to produce tokens from raw text. However, because of this, we cannot directly apply the prior knowledge we obtained from B-52.</li>
<li><strong>Solution</strong>: Assign the <em>same</em> word weight to all tokens for a given word. This way, a token might have a different weight depending on the context of the given word.</li>
</ul>
</section>
<section id="combined-fields-representation" class="level2">
<h2 class="anchored" data-anchor-id="combined-fields-representation">Combined Fields Representation</h2>
<ul>
<li>Documents typically consist of different fields, each of which provides complementary information. Thus, these fields need to be taken into consideration. Typical fields considered are:
<ul>
<li>Primitive Fields(Title, URL, header, etc.)</li>
<li>Other fields(anchor, click signal via parsing search log, etc)</li>
</ul></li>
<li>For the experiment, only the following fields were picked for performance reasons(the body has too much text to encode in a single space):
<ul>
<li>Title</li>
<li>Anchor</li>
<li>URL</li>
<li>Clicked query</li>
</ul></li>
<li>For each field, we learn their representation individually and combine them. Further, we also restrict the number of tokens for each of the above fields to a total of 128 tokens.
<ul>
<li>20 tokens each for Title, Anchor and URL.</li>
<li>Only consider the top 5 clicked queries for a maximum of 68 tokens.</li>
</ul></li>
<li>For given fields, the document representation <img src="https://latex.codecogs.com/png.latex?%5Cphi(D)"> is given by:</li>
</ul>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cphi(D)%20=%20A_%7Bf_i%7D(%5Cphi_%7BF_1%7D(F_1)+%20%5Cphi_%7BF_2%7D(F_2)+...+%5Cphi_%7BF_n%7D(F_n))%0A"></p>
<ul>
<li>Here,
<ul>
<li><img src="https://latex.codecogs.com/png.latex?F_i"> is the field</li>
<li><img src="https://latex.codecogs.com/png.latex?%5Cphi(F_1)"> denotes the representation learned for each field <img src="https://latex.codecogs.com/png.latex?F_i"></li>
<li><img src="https://latex.codecogs.com/png.latex?A_%7Bf_i%7D"> is a function to aggregate all representations</li>
</ul></li>
<li>The remaining tokens(512-128=384) are used to encode the query.</li>
</ul>
</section>
<section id="optimization" class="level2">
<h2 class="anchored" data-anchor-id="optimization">Optimization</h2>
<ul>
<li>The [CLS] token from the last layer is used as a representation for the query and the document</li>
<li>Matching score <img src="https://latex.codecogs.com/png.latex?s"> is computed as: <img src="https://latex.codecogs.com/png.latex?%0As%20=%20cos(BISON(query)_%7Blast%20cls%7D,%20BISON(document)_%7Blast%20cls%7D)%0A"></li>
<li>Cross entropy loss is used to determine if the retrieved document is relevant or not. <img src="https://latex.codecogs.com/png.latex?%0ALoss%20=%20-ylog(%5Cdelta(w.s+b))-(1-y)log(1%20-%20%5Cdelta(w.s+b))%0A"></li>
</ul>
</section>
</section>
<section id="experimentation" class="level1">
<h1>Experimentation</h1>
<ul>
<li>Datasets used were the Bing internal query set and public datasets.</li>
<li>Evaluation metrics used are NDCG(normalized Discounted Cumulative Gain) and NCG(Normalized Cumulative Gain) and MRR(Mean Reciprocal Rank)</li>
<li><strong>NCE(Noise Contraction Estimation)</strong>
<ul>
<li>It is used to pick negative samples that are competitive with the correct ones, helping improve the model generalization.</li>
</ul></li>
<li><strong>Hard negative Integration</strong>
<ul>
<li>Adding negative samples from the clicked documents only helps the model learn entirely non-related query-document pairs.</li>
<li>To help learn partially related pairs, queries are samples from the search log, and results from these queries are added to the negative samples set.</li>
</ul></li>
</ul>
</section>
<section id="evaluation" class="level1">
<h1>Evaluation</h1>
<ul>
<li>The following models were used as baselines:
<ul>
<li>TF-IDF and BM25: To present performance for standard information retrieval</li>
<li>USE and C-DSSM: To represent sentence embeddings for information retrieval</li>
<li>BERT and XLNET: To represent models from the pre-training era. <img src="https://shubhamg.in/posts/bison/bison_performance.png" class="img-fluid" alt="BISON Performance"></li>
</ul></li>
</ul>
<section id="intrinsic-evaluation" class="level2">
<h2 class="anchored" data-anchor-id="intrinsic-evaluation">Intrinsic evaluation</h2>
<ul>
<li>Selected 1400 representative queries and 7 million query document pairs from Bing’s search log</li>
<li>Performance-wise, USE performs the worst as it performs well only on homogeneous data, and query document pairs are heterogeneous.</li>
<li>BISON outperforms all baseline models significantly.</li>
</ul>
</section>
<section id="ms-marco" class="level2">
<h2 class="anchored" data-anchor-id="ms-marco">MS Marco</h2>
<ul>
<li>Similar steps followed for document full ranking task on the MS Marco dataset.</li>
<li>For each query, the top 1000 documents are returned and MR is used as performance metrics.</li>
</ul>
</section>
</section>
<section id="ablation-experiments" class="level1">
<h1>Ablation Experiments</h1>
<ul>
<li>To test the effectiveness of the main parts of BISON, 3 variants are created and tested:
<ul>
<li>BISON<img src="https://latex.codecogs.com/png.latex?_%7Btw%7D">: Use token level weight generation.</li>
<li>BISON<img src="https://latex.codecogs.com/png.latex?_%7Bus%7D">: Exclude combined fields representation and use a union segment i.e concatenate all fields as one segment.</li>
<li>BISON<img src="https://latex.codecogs.com/png.latex?_%7Bidf%7D">: Use IDF as an alternative for BM25 <img src="https://shubhamg.in/posts/bison/bison_abalation.png" class="img-fluid" alt="BISON Abalation"></li>
</ul></li>
</ul>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<ul>
<li>Overall, this paper was a fun read, and the first time I’ve seen a combination of classical information retrieval techniques with the newer pre-training based models.</li>
<li>In the future, I would also like to see:
<ul>
<li>Newer models such as Longformer and Reformer can process anywhere between 4000 to 32000 tokens in one iteration. It would be interesting to see if we could use these models can be used to encode the body text along with the combined field representation.</li>
<li>Popular search engines such as ElasticSearch and Solr have <strong>query reranking</strong> available, which returns relevant documents based on the primary simple query and then reranks the returned list using a secondary complex query. This would enable most organizations to index BISON vectors directly into the clusters, allowing them to see the benefits of BISON with minimal effort.</li>
</ul></li>
</ul>
</section>
<section id="resources" class="level1">
<h1>Resources</h1>
<p>There are some resources you can use to learn more about this paper such as:</p>
<ul>
<li>The original paper available <a href="https://arxiv.org/abs/2002.08909">here</a></li>
<li>The source code available <a href="https://github.com/cadobe/bison">here</a></li>
</ul>


</section>

 ]]></description>
  <category>nlp</category>
  <category>transformer</category>
  <category>review</category>
  <guid>https://shubhamg.in/posts/2020-08-31-bison.html</guid>
  <pubDate>Mon, 31 Aug 2020 00:00:00 GMT</pubDate>
</item>
<item>
  <title>LongFormer</title>
  <dc:creator>Shubham Gupta</dc:creator>
  <link>https://shubhamg.in/posts/2020-05-11-longformer.html</link>
  <description><![CDATA[ 






<section id="introduction" class="level1">
<h1>Introduction</h1>
<ul>
<li>The NLP world had its ImageNet moment with the introduction of the Transformer in the paper <strong>Attention is All you Need</strong>.</li>
<li>The ability to be able to process multiple words/tokens in parallel and train models without labeled data(using self-attention) led to the creation of multiple models which gave us SOTA results on many interesting tasks such as Question Answering, Summarization, etc.</li>
<li>However, the biggest drawback is the Transformer architecture is the limitation it has on the number of tokens it can process at a once, due to exponentially increasing memory and compute requirements(typically about 512 tokens), causing the performance to deteriorate over large documents.</li>
<li><a href="https://arxiv.org/abs/2004.05150">Longformer</a> by the team at Allen AI aims to address this problem and demonstrate it’s application to do transfer learning for large documents.</li>
<li>Other approaches to are described in recent work such as <a href="https://arxiv.org/abs/1901.02860">Transformer XL</a>, <a href="https://arxiv.org/abs/1911.02972">Blockwise</a>, <a href="https://arxiv.org/abs/2001.04451">Reformer</a>, etc. Their characteristics are mentioned below:</li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://shubhamg.in/posts/longformer/comparison.png" class="img-fluid figure-img"></p>
<figcaption>Comparison<span data-label="fig:overview"></span></figcaption>
</figure>
</div>
</section>
<section id="key-contributions" class="level1">
<h1>Key Contributions</h1>
<ul>
<li>Transformers are expensive because of the massive matrix operations involved in the self-attention step. Since each token can attend to every other token in the given input, we get a runtime of <img src="https://latex.codecogs.com/png.latex?O(n%5E2)">, where <img src="https://latex.codecogs.com/png.latex?n"> is the sequence length(typically 512 tokens).</li>
<li>LongFormer aims to solve this using a form of sparse attention and reducing the operational complexity to <img src="https://latex.codecogs.com/png.latex?O(n)">. They achieve this using the concept of the sliding window and dilated sliding window.</li>
<li>The authors also show how this attention pattern can be modified (using dilation and global attention) on a per-task basis, thereby allowing us to use a single model for all tasks rather than creating task-specific architectures.</li>
</ul>
</section>
<section id="attention-patterns" class="level1">
<h1>Attention Patterns</h1>
<ul>
<li>The attention patterns implemented are as follows: <img src="https://shubhamg.in/posts/longformer/attention.png" class="img-fluid" alt="Attention"></li>
</ul>
<section id="sliding-window-attention" class="level2">
<h2 class="anchored" data-anchor-id="sliding-window-attention">Sliding Window Attention</h2>
<ul>
<li><strong>TLDR</strong> : Similar to kernels for CNN which apply a matrix operation to a set of pixels and move onto the next set, apply attention to tokens in current window <em>only</em>.</li>
<li>In this, we change the attention objective to only focus on the tokens that occur in a context window <img src="https://latex.codecogs.com/png.latex?w">.</li>
<li>Each token will be able to attend to <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B1%7D%7B2%7Dw"> number of tokens to it’s left and right.</li>
<li><strong>Question</strong>: But doesn’t this limit the number of tokens being taken into account to only the tokens in the window?
<ul>
<li>Yes, it does. This is why we stack multiple layers of self-attention. As shown in the image below, the green neuron learns from the first 3 tokens(Lionel, Messi, is). However, the brown neuron learns from the green, yellow, and red neuron, who together learn from the first 5 tokens. This way, we can apply attention to long sequences(Lionel, Messi, is, the, true).</li>
</ul></li>
<li>As with the CNN, we will have <img src="https://latex.codecogs.com/png.latex?l"> layers to this sliding window attention(multi-head attention) implemented to learn low level and high-level features. A balance should be found between the number of layers <img src="https://latex.codecogs.com/png.latex?l">(efficiency) and the window size <img src="https://latex.codecogs.com/png.latex?w">(model representation capacity).</li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://shubhamg.in/posts/longformer/sliding_window.png" class="img-fluid figure-img"></p>
<figcaption>Sliding Window Attention<span data-label="fig:overview"></span></figcaption>
</figure>
</div>
<ul>
<li><p><strong>Pros</strong>: Reduces computation from <img src="https://latex.codecogs.com/png.latex?O(n%5E2)"> to <img src="https://latex.codecogs.com/png.latex?O(n*w)"> i.e the computation complexity will only scale linearly now.</p></li>
<li><p><strong>Cons</strong>: To learn dependencies for a large sequence, we would either have to increase the window size <img src="https://latex.codecogs.com/png.latex?w"> or increase the number of layers <img src="https://latex.codecogs.com/png.latex?l">, both of which will cause an increase in the amount of memory and processing power required to train and test the model.</p></li>
</ul>
</section>
<section id="dilated-sliding-window" class="level2">
<h2 class="anchored" data-anchor-id="dilated-sliding-window">Dilated Sliding Window</h2>
<ul>
<li><p><strong>TLDR</strong>: Use dilation instead of window attention i.e for some particular window size, take alternate elements while performing self-attention.</p></li>
<li><p>To solve the problem for long sequences, the authors propose that instead of considering all tokens in window <img src="https://latex.codecogs.com/png.latex?w">, consider alternate(or any number <img src="https://latex.codecogs.com/png.latex?d">)tokens instead. The range of tokens will now be <img src="https://latex.codecogs.com/png.latex?l%20*%20d%20*%20w">, which will be large for even a small value of <img src="https://latex.codecogs.com/png.latex?d">.</p></li>
<li><p><strong>Pros</strong>: This small change will allow us to cover a wider range of tokens without significant changes to the architecture.</p></li>
<li><p><strong>Cons</strong>: Skipping tokens might lead to loss of information in the lower layers which will get propagated to the higher layers. This will lead to unstable training and poor model performance.</p></li>
</ul>
</section>
<section id="global-attention" class="level2">
<h2 class="anchored" data-anchor-id="global-attention">Global Attention</h2>
<ul>
<li><strong>TLDR</strong>: Use full attention for certain tokens depending on the task. This is an engineering choice.</li>
<li>In BERT style models, optimal representation for input sequence varies by task.
<ul>
<li>For MLM, local context is used to predict the masked word</li>
<li>For classification, [CLS] token is used.</li>
<li>For QnA, the question is concatenated with the document to help model learn through self-attention.</li>
</ul></li>
<li>The windowed and dilated attention is not flexible enough to learn task-specific representations.</li>
<li>Hence, for some tokens enable global tokens i.e at these tokens, all tokens in the sequence can attend to it. For classification, enable global attention on the [CLS] token.</li>
<li><strong>Pros</strong>:
<ul>
<li>Adding global attention improves performance for specific tasks. Since these tokens are limited in number, the complexity still stays at <img src="https://latex.codecogs.com/png.latex?O(n)">.</li>
<li>It also increases the representational power of the model.</li>
</ul></li>
</ul>
<section id="linear-projections" class="level3">
<h3 class="anchored" data-anchor-id="linear-projections">Linear Projections</h3>
<ul>
<li><p><strong>TLDR</strong>: Use two sets of Q,K and V matrices, one for sliding window attention, one for global attention.</p></li>
<li><p>Attention is defined as:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0AAttention(Q,K,V)%20=%20softmax(%5Cfrac%7BQK%5ET%7D%7B%5Csqrt%7Bd_k%7D%7D)V%0A%5Cend%7Baligned%7D%0A"></p></li>
<li><p>We will use two different sets of Q,K and V matrices for sliding window and global attention.</p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?Q_g">, <img src="https://latex.codecogs.com/png.latex?K_g">, <img src="https://latex.codecogs.com/png.latex?V_g"> are initialized with <img src="https://latex.codecogs.com/png.latex?Q_s">, <img src="https://latex.codecogs.com/png.latex?K_s">, <img src="https://latex.codecogs.com/png.latex?V_s"></p></li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://shubhamg.in/posts/longformer/old_matrix.svg" class="img-fluid figure-img"></p>
<figcaption>Banded Matrix</figcaption>
</figure>
</div>
<center>
<b>Banded Matrix(<a href="https://en.wikipedia.org/wiki/Band_matrix">Source</a>)</b>
</center>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://shubhamg.in/posts/longformer/band_matrix.svg" class="img-fluid figure-img"></p>
<figcaption>Compressed Banded Matrix</figcaption>
</figure>
</div>
<center>
<b>Compressed Banded Matrix(<a href="https://en.wikipedia.org/wiki/Band_matrix">Source</a>)</b>
</center>
</section>
<section id="cuda-kernels" class="level3">
<h3 class="anchored" data-anchor-id="cuda-kernels">CUDA Kernels</h3>
<ul>
<li>One of the important and interesting contributions of this paper is the implementation of matrix multiplication via CUDA kernels.</li>
<li>In the dilated sliding window, the matrix formed is called a <strong>band matrix</strong> i.e there are diagonal bands of indices that have values and the other values are 0.</li>
<li>Implementing matrix operations for band matrices using native for loops and via frameworks is not easy and optimized.</li>
<li>The authors have provided custom CUDA kernels implemented using <a href="https://github.com/apache/incubator-tvm">TVM</a> for this banded matrix operations.</li>
<li>As demonstrated in the image below, the custom CUDA kernels have a significant impact on the time and memory consumption of the model. The kernels and implementation for the longformer are available <a href="https://github.com/allenai/longformer">here</a>. <img src="https://shubhamg.in/posts/longformer/performance.png" class="img-fluid" alt="Performance">
<center>
<b>LongFormer Performance</b>
</center></li>
</ul>
</section>
</section>
</section>
<section id="autoregressive-language-modelling" class="level1">
<h1>Autoregressive Language Modelling</h1>
<ul>
<li>Estimate the probability of a token given its previous tokens/characters in an input sequence.</li>
<li>It is a fundamental task in natural language and all previous work use this task as their primary evaluation measure.</li>
</ul>
<section id="attention-pattern" class="level2">
<h2 class="anchored" data-anchor-id="attention-pattern">Attention Pattern</h2>
<ul>
<li>In multi-head attention, each head computes a different score.</li>
<li>To get a good representation of all tokens, the authors propose that normal sliding window attention can be used for the lower layers, and dilated sliding window attention can be used the higher layers(top 1-2 layers).</li>
<li>The reasoning for this approach is that in the lower layers, the local context is more important, and in the upper layers, the global context is more important. Hence, it is acceptable to skip over a few tokens in the upper layers.</li>
</ul>
</section>
</section>
<section id="experimental-setup" class="level1">
<h1>Experimental Setup</h1>
<section id="task-and-datasets" class="level2">
<h2 class="anchored" data-anchor-id="task-and-datasets">Task and Datasets</h2>
<ul>
<li>The authors focus on character level modeling because the sequences are naturally longer than those of word-level language modeling.</li>
<li>Datasets that were used are <em>text8</em> and <em>enwik8</em>.</li>
</ul>
</section>
<section id="training-and-evaluation" class="level2">
<h2 class="anchored" data-anchor-id="training-and-evaluation">Training and Evaluation</h2>
<ul>
<li>The model was trained in multiple phases.
<ul>
<li>The window and sequence length was increased in each phase. This is to allow local context from tokens to be learned efficiently.</li>
<li>Overall five training phases used, starting from the token length of 2048 to 23040 (45x more than vanilla BERT).</li>
<li>Two models were created for evaluation:
<ul>
<li>Small model: 12 layers, 512 hidden size</li>
<li>Large model: 30 layers, 512 hidden sizes (2.5x larger)</li>
</ul></li>
<li>During the model evaluation, the model can run on a sequence length of 32256(63x more than vanilla BERT).</li>
</ul></li>
</ul>
</section>
<section id="results" class="level2">
<h2 class="anchored" data-anchor-id="results">Results</h2>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://shubhamg.in/posts/longformer/results.png" class="img-fluid figure-img"></p>
<figcaption>Results</figcaption>
</figure>
</div>
<ul>
<li>Longformer achieves SOTA using the small models with BPC of 1.10 and 1.00 for text8 and enwik8.</li>
<li>The large model was only tested on enwik8 due to the computational cost of training.</li>
<li>It’s also important to note that, while the large model did not achieve SOTA, it performs much better than it’s counterparts who have almost 2x more parameters.</li>
</ul>
</section>
</section>
<section id="pretraining-and-finetuning" class="level1">
<h1>Pretraining and Finetuning</h1>
<ul>
<li>The LongFormer is trained to solve the tasks of classification, QA, and coreference resolution.</li>
<li>It is trained with MLM objective.</li>
</ul>
<section id="copy-initialization-trick" class="level2">
<h2 class="anchored" data-anchor-id="copy-initialization-trick">Copy initialization trick</h2>
<ul>
<li>Since the MLM objective pretraining objective is expensive, the authors continue to train from the checkpoints of the <a href="https://arxiv.org/abs/1907.11692">RoBERTA</a> model.</li>
<li>The attention mechanism is replaced with the new attention module.</li>
<li>For the position embeddings:
<ul>
<li>RoBERTA has position embeddings for 512 tokens.</li>
<li>LongFormer can support position embeddings for 4096 tokens(larger for larger GPU)</li>
<li>To use the weight checkpoints from RoBERTA, instead of random initialization, copy the 512 position embeddings <strong>multiple times</strong> as analysis of the BERT attention heads showed a strong learned bias to attend to the local context.</li>
</ul></li>
</ul>
</section>
<section id="pretraining" class="level2">
<h2 class="anchored" data-anchor-id="pretraining">Pretraining</h2>
<ul>
<li>Apart from the datasets(Books corpus + English Wikipedia) used in RoBERTA, <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B1%7D%7B3%7D%5E%7Brd%7D"> Realnews dataset was added with tokens larger than 1200.</li>
<li>Both models(small and large) trained with varying gradient updates.</li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://shubhamg.in/posts/longformer/copy_init.png" class="img-fluid figure-img"></p>
<figcaption>Copy init</figcaption>
</figure>
</div>
<center>
<b>MLM BPC for RoBERTA with various model config</b>
</center>
</section>
</section>
<section id="task-specific-results" class="level1">
<h1>Task-Specific Results</h1>
<ul>
<li>Main results are summarized below: <img src="https://shubhamg.in/posts/longformer/main_results.png" class="img-fluid" alt="Copy init">
<center>
<b>LongFormer Task Specific Results</b>
</center></li>
<li>The performance gain is high for tasks that require long contexts such as WikiHop and Hyperpartisan.</li>
<li>For TriviaQA, the improvement is small because the local context is often sufficient to answer the given question.</li>
<li>Similarly, gains in IMDB and OntoNotes are small(because of majority short reviews for IMDB and low distance between any two mentions for OntoNotes).</li>
<li>However, the LongFormer large model achieves SOTA on WikiHop and TriviaQA.</li>
<li>Using the large model also improves performance on HotpotQA.</li>
</ul>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<ul>
<li>Overall, this was a fun read. The changes introduced in the attention mechanism are fairly simple but they yield very high-performance gains, paving the path to make these models useful in future applications.</li>
<li>Personally, and also as noted by the authors, I would like to see the performance of the LongFormer on the summarization task.</li>
</ul>
</section>
<section id="references" class="level1">
<h1>References</h1>
<ul>
<li>Fantastic summary by Yannic Kilcher available <a href="https://www.youtube.com/watch?v=_8KNb5iqblE">here</a>.</li>
<li>LongFormer paper available <a href="https://arxiv.org/abs/2004.05150">here</a></li>
<li>Dair.ai NLP newsletter available <a href="https://dair.ai/NLP_Newsletter_10_en/">here</a></li>
<li>Open-sourced longformer code available <a href="https://github.com/allenai/longformer/">here</a></li>
</ul>


</section>

 ]]></description>
  <category>nlp</category>
  <category>transformer</category>
  <category>review</category>
  <category>longformer</category>
  <guid>https://shubhamg.in/posts/2020-05-11-longformer.html</guid>
  <pubDate>Mon, 11 May 2020 00:00:00 GMT</pubDate>
</item>
<item>
  <title>TagLM</title>
  <dc:creator>Shubham Gupta</dc:creator>
  <link>https://shubhamg.in/posts/2020-04-23-tag-lm.html</link>
  <description><![CDATA[ 






<section id="introduction" class="level1">
<h1>Introduction</h1>
<ul>
<li><p>This is the TagLM paper mentioned in Lecture 13 in the CS224N course title <strong>Semi-supervised sequence tagging with bidirectional language models</strong></p></li>
<li><p>This paper demonstrates how we can use context embeddings from BiLSTM models and use it for sequence labelling tasks</p></li>
</ul>
</section>
<section id="paper-introduction" class="level1">
<h1>Paper Introduction</h1>
<ul>
<li><p>Typically, RNN are used only on labelled data to learn the context embeddings of words.</p></li>
<li><p>Semi supervised approach used in this paper.</p>
<ul>
<li><p>Train LM on large unlabelled corpus</p></li>
<li><p>Compute embedding at each position in the sequence(LM embedding)</p></li>
<li><p>Use embedding in supervised sequence tagging model</p></li>
</ul></li>
<li><p>Using both forward and backward embeddings gives better performance than using forward only LM.</p></li>
</ul>
</section>
<section id="taglm" class="level1">
<h1>TagLM</h1>
<section id="overview" class="level2">
<h2 class="anchored" data-anchor-id="overview">Overview</h2>
<ul>
<li><p>Extract word and LM embeddings for every token</p></li>
<li><p>Prepare embedding by concatinating both embeddings</p></li>
<li><p>se them in supervised sequence tagging model</p></li>
</ul>
</section>
<section id="baseline" class="level2">
<h2 class="anchored" data-anchor-id="baseline">Baseline</h2>
<ul>
<li><p>Baseline model is hierachical neural tagging model</p></li>
<li><p>Obtain word and character embeddings. Concatenate them to form final embedding.</p>
<p><img src="https://latex.codecogs.com/png.latex?%20x_k%20=%20%5Bc_k;w_k%5D%20"></p></li>
<li><p>Char embedding: Can be obtained via CNN or RNN</p></li>
<li><p>Word embedding: Use pretrained embeddings</p></li>
<li><p>Use multiple bidirectional RNN to learn context embedding</p></li>
<li><p>For every token, concatenate forward and backward hidden states at each layer</p></li>
<li><p>2nd layer will use the above output and predict next hidden state</p></li>
<li><p>Use GRU or LSTM depending on task</p></li>
<li><p>Use output of final layer to predict score for each possible tag using dense layer</p></li>
<li><p>Better to predict tags for full sequence than for a single token</p></li>
<li><p>THEREFORE, add another layer with parameters for each label bigram.</p></li>
<li><p>Compute sentence conditional random field loss(CRF) using forward-backward algorithm.</p></li>
<li><p>Use Viterbi algorithm to find most likely sequence</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://shubhamg.in/posts/taglm/overview.png" class="img-fluid figure-img"></p>
<figcaption>Overview of architecture<span data-label="fig:overview"></span></figcaption>
</figure>
</div></li>
<li><p>LM embedding will be created by concatenating forward and backward embeddings. No parameter sharing between these two embeddings.</p></li>
</ul>
</section>
</section>
<section id="experiments" class="level1">
<h1>Experiments</h1>
<ul>
<li><p>Evaulation done on CoNLL 2003 NER and CoNLL 2000 chunking</p></li>
<li><p>Lot of detail around model architecture and training methods. Skipping this for now.</p></li>
</ul>
<section id="analysis" class="level2">
<h2 class="anchored" data-anchor-id="analysis">Analysis</h2>
<ul>
<li><p>Second RNN captures interactions between task specific context</p></li>
<li><p>Backward LM addition has significant performance gains</p></li>
<li><p>Model size makes a difference. Using bigger CNN model lead to &nbsp;0.3 percent improvement</p></li>
<li><p>Also tried training the model JUST ON THE CoNLL data. Reduced model size</p></li>
<li><p>Including embeddings from this model <strong>decreased</strong> performance compared to baseline system.</p></li>
<li><p>Replacing task specific RNN with using LM embeddings with a dense layer and CRF <strong>reduced</strong> performance</p></li>
<li><p>Improvement shown by transferring knowledge from other tasks <strong>almost disappers</strong> when the initial model is trained on a large dataset.</p></li>
</ul>
</section>
</section>
<section id="summary" class="level1">
<h1>Summary</h1>
<ul>
<li>First method to incorporate contextual word embeddings using bidirectional networks.</li>
<li>Significantly better than other methods at the time that use other forms of transfer learning or joint learning on NER and and Chunking tasks.</li>
<li>It works well with unlabelled data from a different domain as well.</li>
</ul>


</section>

 ]]></description>
  <category>nlp</category>
  <category>language_model</category>
  <category>review</category>
  <guid>https://shubhamg.in/posts/2020-04-23-tag-lm.html</guid>
  <pubDate>Thu, 23 Apr 2020 00:00:00 GMT</pubDate>
</item>
<item>
  <title>How much do you know?</title>
  <dc:creator>Shubham Gupta</dc:creator>
  <link>https://shubhamg.in/posts/2020-04-21-knowledge-lm.html</link>
  <description><![CDATA[ 






<section id="introduction" class="level1">
<h1>Introduction</h1>
<ul>
<li><p>This is a new paper which explores the limits of using their new T5 titled <strong>How Much Knowledge Can You Pack Into The Parameters of a Language Model?</strong>. model in a context-free QA domain.</p></li>
<li><p>As with the T5 model itself, it is very interesting to see these one-model-to-rule-them-all architectures as they exhibit some form of generalization.</p></li>
<li><p>I found this paper from Adam Roberts twitter thread which is available <a href="https://twitter.com/ada_rob/status/1227062195671822336">here</a></p></li>
<li><p><strong>Core Idea</strong>: This paper will test two main things:</p>
<ul>
<li><p>How well does the model create a knowledge base such that it can answer questions just based on this base and no other information.</p></li>
<li><p>Do model with more parameters store more information? Measuring knowledge retreiving ability is used to check this point.</p></li>
</ul></li>
</ul>
</section>
<section id="paper-introduction" class="level1">
<h1>Paper Introduction</h1>
<ul>
<li><p><strong>Reading Comprehension</strong>: Given a question and context, lookup and give the answer.</p></li>
<li><p><strong>Open domain question answering</strong>: Random context-independent questions. It is given entire context(all the information possible in the world) and the model is expected to deduce the answer. <em>Open book</em> exam.</p></li>
<li><p>Here, problem is similar to open book exam + no context given at all. Model should retreive info from parameters and return the values. <em>Closed book</em> exam.</p></li>
<li><p>T5: Treat every NLP task as text-to-text problem using encoder decoder Transformer.</p></li>
<li><p>For natural questions dataset, evaluation is done as follows:</p></li>
<li><p><strong>First method</strong>:</p>
<ul>
<li><p>Ignore all “unanswerable” and “long answer” type questions.</p></li>
<li><p>model trained to output single answer</p></li>
<li><p>Questions with answers longer than 5 tokens are ignored</p></li>
<li><p>Answers normalized before comparsion</p></li>
<li><p>Answer is correct if it matches any of the annotated answers</p></li>
</ul></li>
<li><p><strong>Second method</strong>:</p>
<ul>
<li>Considered correct only if model predicts <em>all</em> the answers correctly</li>
</ul></li>
<li><p>For fine tuning, use AdaFactor Optimizer(need to read more about this one)</p></li>
</ul>
</section>
<section id="results" class="level1">
<h1>Results</h1>
<ul>
<li><p>SOTA on Natural Questions(NQ) and WebQuestions(WQ) dataset. Worst performance on TriviaQA(TQA).</p></li>
<li><p>Performance increases with model size.</p></li>
<li><p>Guu et all(2020) performs better than T5 on NQ and WQ. Need to read this paper as well. It</p>
<ul>
<li><p>Retreives Revevant documents</p></li>
<li><p>Answers questions in end-to-end fashion</p></li>
</ul></li>
<li><p>Closed-book model seem to perform on par with open-book models, leading to new research directions.</p></li>
<li><p>For multiple answer type questions, T5 lower than SOTA BUT much better than baseline that was published with the paper. Therefore, T5 can perform well on these types of questions as well.</p></li>
</ul>
</section>
<section id="drawbacks" class="level1">
<h1>Drawbacks</h1>
<ul>
<li><p>Model is far too expensive to train.</p></li>
<li><p>Open-book models provide some indication of what information was used to answer the problem. HOWEVER, T5 just has a distribution over parameters that cannot be interpreted.</p></li>
<li><p>MLE does not gurantee the model will learn a fact. Therefore, difficult to ensure the model learns specific information during pre-training</p></li>
<li><p>Measure and improve performance on difficult QA tasks like DROP, which needs reasoning ability.</p></li>
</ul>


</section>

 ]]></description>
  <category>nlp</category>
  <category>language_model</category>
  <category>review</category>
  <guid>https://shubhamg.in/posts/2020-04-21-knowledge-lm.html</guid>
  <pubDate>Tue, 21 Apr 2020 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Attention is all you need</title>
  <dc:creator>Shubham Gupta</dc:creator>
  <link>https://shubhamg.in/posts/2020-04-20-attention.html</link>
  <description><![CDATA[ 






<section id="introduction" class="level1">
<h1>Introduction</h1>
<ul>
<li>This paper review is following the blog from Jay Alammar’s blog on the <strong>Illustrated Transformer</strong>. The blog can be found <a href="https://jalammar.github.io/illustrated-transformer/">here</a>.</li>
</ul>
</section>
<section id="paper-introduction" class="level1">
<h1>Paper Introduction</h1>
<ul>
<li><p>New architecture based solely on attention mechanisms called <strong>Transformer</strong>. Gets rids of recurrent and convolution networks completely.</p></li>
<li><p>Generally, RNN used to seq-to-seq tasks such as translation, language modelling, etc.</p></li>
<li><p>Transformer allows for significant parallelization and relies only on attention.</p></li>
</ul>
</section>
<section id="background" class="level1">
<h1>Background</h1>
<ul>
<li><em>Self attention</em> Attention to different positions of a sequence in order to compute a representation of the sequence.</li>
</ul>
</section>
<section id="model-architecture" class="level1">
<h1>Model Architecture</h1>
<ul>
<li><p>Transformer uses the following:</p>
<ul>
<li><p>Encoder decode mechanism</p></li>
<li><p>Stacked self attention</p></li>
<li><p>Point wise fully connected layer for encoder and decoder</p></li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://shubhamg.in/posts/attention/transformer.png" class="img-fluid figure-img"></p>
<figcaption>Transformer<span data-label="fig:transformer"></span></figcaption>
</figure>
</div></li>
</ul>
<section id="encoder-and-decoder-stacks" class="level2">
<h2 class="anchored" data-anchor-id="encoder-and-decoder-stacks">Encoder and decoder stacks</h2>
<ul>
<li><p><strong>Encoder</strong>: 6 identical layers. 2 sub layers per layer</p></li>
<li><p><em>First</em>: multi-head self attention mechanism</p></li>
<li><p><em>Second</em>: Fully connected feed forward network</p></li>
<li><p>Apply residual connection for each of the two laters</p></li>
<li><p>Apply layer normalization</p></li>
<li><p><strong>Decoder</strong>: 6 identical layers. 2 sub layers as above + 1 more which performs multi-head attention over output of encoder stack</p></li>
<li><p><em>Residual blocks</em>: Present around all 3 sub layers</p></li>
<li><p><em>Layer normalization</em>: Normalizes input across features instead of normalizing input features across batch dimension(i.e in <em>batch normalization</em>). There is a great overview of normalization layers available by Akash Bindal <a href="https://medium.com/techspace-usict/normalization-techniques-in-deep-neural-networks-9121bf100d8">here</a>.</p></li>
<li><p>Modify self-attention sub layer to prevent positions from attending to subsequent positions. Ensures that <em>i</em> output depends only on words before <em>i</em>.</p></li>
</ul>
</section>
<section id="attention" class="level2">
<h2 class="anchored" data-anchor-id="attention">Attention</h2>
<ul>
<li><p>3 vectors: Query(Q), Key(K) and Value(V)</p></li>
<li><p>Output = Weighted sum of values. Weights assigned as a function of query with key.</p></li>
<li><p>Scaled dot-product attention and multi-head attention</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://shubhamg.in/posts/attention/attention_types.png" class="img-fluid figure-img"></p>
<figcaption>Types of Attention<span data-label="fig:attention"></span></figcaption>
</figure>
</div></li>
<li><p>Attention is calculated as:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%20%20%20%20%20%20%20%20Attention(Q,K,V)%20=%20softmax(%5Cfrac%7BQK%5ET%7D%7B%5Csqrt%7Bd_k%7D%7D)V%0A%20%20%20"></p></li>
<li><p>Dot product attention is <strong>faster and more space-efficient</strong> than additive attention.</p></li>
</ul>
</section>
<section id="multi-head-attention" class="level2">
<h2 class="anchored" data-anchor-id="multi-head-attention">Multi head attention</h2>
<ul>
<li><p>Using multile q, k and v vectors. Get the final output, concatenate them and get another final projection <img src="https://latex.codecogs.com/png.latex?d_%7Bv%7D">.</p>
<p>$$ MultiHead(Q,K,V) = Concat(head_1,…,head_h)W^O \</p>
<pre><code>\text{where } head_i = Attention(QW_{i}^{Q}, KW_{i}^{K},VW_{i}^{V})</code></pre>
<p>$$</p></li>
<li><p>Dimensions of the key and value matrices will be: <img src="https://latex.codecogs.com/png.latex?d_%7Bk%7D%20=%20d_%7Bv%7D%20=%20d_%7Bmodel%7D/h%20=%2064"></p></li>
</ul>
</section>
<section id="applications-of-attention" class="level2">
<h2 class="anchored" data-anchor-id="applications-of-attention">Applications of attention</h2>
<ul>
<li><p><strong>Encoder-decoder attention</strong>: Q from previours decoder, K and V from output of decoder. Attend to all positions in the input sequence.</p></li>
<li><p><strong>Encoder</strong>: Self attentnion laters. Q,K and V from output of previous layer in the encoder. Some talk about leftward flow, didn’t really understand this bit. Will come back to this in sometime.</p></li>
</ul>
</section>
<section id="position-wise-feed-forward-networks" class="level2">
<h2 class="anchored" data-anchor-id="position-wise-feed-forward-networks">Position-wise Feed-Forward Networks</h2>
<ul>
<li><p>Each layer contains feed-forward network.</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%20%20%20%20%20%20%20%20FFN(x)%20=%20max(o,%20xW_1,+%20b_1)W_2%20+%20b_2%0A"></p></li>
</ul>
</section>
<section id="embeddings-and-softmax" class="level2">
<h2 class="anchored" data-anchor-id="embeddings-and-softmax">Embeddings and Softmax</h2>
<ul>
<li><p>Convert input and output string to vectors of dim <img src="https://latex.codecogs.com/png.latex?d_%7Bmodel%7D"></p></li>
<li><p>Share weight matrix between two embedding layers and the pre-softmaax linear transformation</p></li>
</ul>
</section>
<section id="positional-encoding" class="level2">
<h2 class="anchored" data-anchor-id="positional-encoding">Positional Encoding</h2>
<ul>
<li><p>Encode positions of the tokens for the input and output.</p></li>
<li><p>Same vector size i.e <img src="https://latex.codecogs.com/png.latex?d_%7Bmodel%7D"></p>
<p>$$ PE_{(pos, 2i)} = sin(pos/10000^{2i/d_{model}}) \</p>
<pre><code>    PE_{(pos, 2i+1)} = cos(pos/10000^{2i/d_{model}})</code></pre>
<p>$$</p></li>
<li><p>Might allow approximation of longer sequence lenghts than seen in the training set</p></li>
</ul>
</section>
<section id="why-self-attention" class="level2">
<h2 class="anchored" data-anchor-id="why-self-attention">Why self attention?</h2>
<ul>
<li><p>Total computational complexity per layer</p></li>
<li><p>Parallel Computation</p></li>
<li><p>Path length between long-range dependencies in the network.</p></li>
</ul>
</section>
</section>
<section id="training" class="level1">
<h1>Training</h1>
<section id="optimizer" class="level2">
<h2 class="anchored" data-anchor-id="optimizer">Optimizer</h2>
<ul>
<li><p>Use Adam. Vary learning rate according to formula: <img src="https://latex.codecogs.com/png.latex?lrate%20=%20d_%7Bmodel%7D%5E%7B-0.5%7D%20.%20min(step_num%5E%7B-0.5%7D,%20step_num%20.%20warmupsteps%5E%7B-1.5%7D)"></p></li>
<li><p>Increase LR for warmup steps, then decrease propotionally to inverse square root of step number. Warmup steps = 4000</p></li>
</ul>
</section>
<section id="regularization" class="level2">
<h2 class="anchored" data-anchor-id="regularization">Regularization</h2>
<ul>
<li><p><strong>Residual Dropout</strong></p></li>
<li><p><strong>Label Smoothing</strong>: Instead of using 0 and 1 as class labels, allow for some uncertainity in the prediction, and use values like 0.1 and 0.9 for the classes</p></li>
</ul>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<ul>
<li>This was the first model based entirely on attention. It acheived SOTA results on Machine Translation and English contituency parsing.</li>
</ul>


</section>

 ]]></description>
  <category>nlp</category>
  <category>attention</category>
  <category>review</category>
  <guid>https://shubhamg.in/posts/2020-04-20-attention.html</guid>
  <pubDate>Mon, 20 Apr 2020 00:00:00 GMT</pubDate>
</item>
<item>
  <title>REALM: Retrieval-Augmented Language MOdel Pre-Training</title>
  <dc:creator>Shubham Gupta</dc:creator>
  <link>https://shubhamg.in/posts/2020-03-14-realm.html</link>
  <description><![CDATA[ 






<section id="introduction" class="level1">
<h1>Introduction</h1>
<ul>
<li><p>REALM is a paper mentioned in the T5 paper titled: <strong>How Much Knowledge Can You Pack Into The Parameters of a Language Model?</strong></p></li>
<li><p>TLDR: This paper retrieves documents that have the information present while solving Question-Answer type problems.</p>
<blockquote class="blockquote">
<p><strong>NOTE</strong>: This post is more like my running notes while reading the paper than a comprehensive blog. I will update this blog once I learn a little more about the transformer architecture.</p>
</blockquote></li>
<li><p>Introduced a latent <em>knowledge retriever</em>, which can attend and retrieve documents over large corpus and can be trained in unsupervised manner using masked language modelling technique and backprop through retreiver which considers lots of docs.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://shubhamg.in/posts/realm/training.png" class="img-fluid figure-img"></p>
<figcaption>Training process for REALM<span data-label="fig:training"></span></figcaption>
</figure>
</div></li>
<li><p>Key point: Train retriever using a performance-based signal from unsupervised text.</p></li>
<li><p>Retrieval based LM =&gt; Moar computational resources =&gt; Moar money</p>
<ul>
<li>Solution: Computation performed for each doc is cached and can be used again. Best doc selected using <em>Maximum Inner Product Search(MIPS)</em>. Read the paper <a href="https://cs.stanford.edu/~ermon/papers/ICML_MIPS_Gumbel.pdf">here</a>.</li>
</ul></li>
<li><p>REALM retriever can be used on downstream tasks via transfer learning.</p></li>
<li><p>REALM is SOTA on NQ-Open, WQ and CuratedTrec.</p></li>
</ul>
</section>
<section id="approach" class="level1">
<h1>Approach</h1>
<section id="retreive-then-predict-generative-process" class="level2">
<h2 class="anchored" data-anchor-id="retreive-then-predict-generative-process"><em>Retreive-then-predict generative process</em></h2>
<ul>
<li><p>Training: Masked-LM. Fine-tuning: Open QA task</p></li>
<li><p>Computing chance of the document given a question decomposed into two steps:</p>
<ul>
<li><p>Function to be computed: <img src="https://latex.codecogs.com/png.latex?p(y%5C%7Cx)"></p></li>
<li><p>Given <img src="https://latex.codecogs.com/png.latex?x">,retrive documents <img src="https://latex.codecogs.com/png.latex?z"> from corpus <img src="https://latex.codecogs.com/png.latex?Z">. Modelled as: <img src="https://latex.codecogs.com/png.latex?p(z%5C%7Cx)"></p></li>
<li><p>Condition of both <img src="https://latex.codecogs.com/png.latex?z"> and <img src="https://latex.codecogs.com/png.latex?x"> to generate output <img src="https://latex.codecogs.com/png.latex?y"> i.e <img src="https://latex.codecogs.com/png.latex?p(y%5C%7Cz,%20x)"></p></li>
<li><p>Overall likelihood <img src="https://latex.codecogs.com/png.latex?y"> is generated by treating <img src="https://latex.codecogs.com/png.latex?z"> as latent variable and marginalizing over all documents <img src="https://latex.codecogs.com/png.latex?z"></p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ap(y%5C%7Cx)%20=%20%5Csum_%7Bz%20%5Cepsilon%20Z%7D%20p(y%5C%7Cz,%20x)%20*%20p(z%5C%7Cx)%0A"></p></li>
</ul></li>
</ul>
</section>
</section>
<section id="architecture" class="level1">
<h1>Architecture</h1>
<ul>
<li><p><strong>Neural Knowledge Retriever</strong> which models the distribution: <img src="https://latex.codecogs.com/png.latex?p(z%5C%7Cx)"></p></li>
<li><p><strong>Knowledge Augmented Encoder</strong> which models the distribution <img src="https://latex.codecogs.com/png.latex?p(y%5C%7Cz,%20x)"></p></li>
</ul>
<section id="neural-knowledge-retriever" class="level2">
<h2 class="anchored" data-anchor-id="neural-knowledge-retriever">Neural Knowledge Retriever</h2>
<ul>
<li><p>Dense inner product model.</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0A%20%20%20%20p(z%5C%7Cx)%20=%20%5Cfrac%7Bexp(f(x,z))%7D%7B%5Csum_%7Bz'%7D%7Bexp(f(x,z'))%7D%7D%20%5C%5C%0A%20%20%20%20f(x,z)%20=%20Embed_%7Binput%7D(x)%5ETEmbed_%7Bdoc%7D(z)%0A%5Cend%7Baligned%7D%0A"></p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?Embed_%7Binput%7D"> and <img src="https://latex.codecogs.com/png.latex?Embed_%7Bdoc%7D"> are embedding functions</p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?f(x,z)"> is called <strong>relevance score</strong>. It is inner product of vector embeddings.</p></li>
<li><p>Relevant Distribution is softmax over all relevance scores</p></li>
<li><p>Embedding implement using BERT-style transformers. Join using &lt;SEP&gt;, prefix using &lt;CLS&gt; and append &lt;SEP&gt; as the end token. <img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Baligned%7D%0A%20%20%20%20%20%20%20%20%5C%5C%20join_%7BBERT%7D(x)%20=%20%5BCLS%5Dx%5BSEP%5D%0A%20%20%20%20%20%20%20%20%5C%5C%20join_%7BBERT%7D(x_1,%20x_2)%20=%20%5BCLS%5Dx_1%5BSEP%5Dx_2%5BSEP%5D%0A%20%20%20%20%5Cend%7Baligned%7D"></p></li>
<li><p>Pass above into transformer, which gives over vector for each token. Perform linear projection to reduce dimensionality of vector <img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Baligned%7D%0A%20%20%20%20%5C%5C%20Embed_%7Binput%7D(x)%20=%20W_%7Binput%7DBERT_%7BCLS%7D(join_%7BBERT%7D(x))%0A%20%20%20%20%5C%5C%20Embed_%7Bdoc%7D(z)%20=%20W_%7Bdoc%7DBERT_%7BCLS%7D(join_%7BBERT%7D(z_%7Btitle%7D,%20z_%7Bbody%7D))%0A%5Cend%7Baligned%7D"></p></li>
</ul>
</section>
<section id="knowledge-augmented-encoder" class="level2">
<h2 class="anchored" data-anchor-id="knowledge-augmented-encoder">Knowledge-Augmented Encoder</h2>
<ul>
<li><p>Given input <img src="https://latex.codecogs.com/png.latex?x"> and relevant doc <img src="https://latex.codecogs.com/png.latex?z">, this defines <img src="https://latex.codecogs.com/png.latex?p(y%5C%7Cz,x)"></p></li>
<li><p>Join <img src="https://latex.codecogs.com/png.latex?x"> and <img src="https://latex.codecogs.com/png.latex?z"> into single sequence and feed into transformer</p></li>
<li><p>Here, training is different for pre-training vs fine-tuning</p>
<ul>
<li><p>For pre-training, predict [MASK] token. Use same Masked LM(MLM) loss as in Transformer(Devlin et al.)</p></li>
<li><p>For Open-QA, we need to produce string <img src="https://latex.codecogs.com/png.latex?y">.</p></li>
<li><p><strong>Assumption</strong>: <img src="https://latex.codecogs.com/png.latex?y"> occurs as sequence of tokens in some document in the corpus.</p></li>
</ul></li>
</ul>
</section>
<section id="training" class="level2">
<h2 class="anchored" data-anchor-id="training">Training</h2>
<ul>
<li><p>Compute gradients in <img src="https://latex.codecogs.com/png.latex?%5Ctheta"> and <img src="https://latex.codecogs.com/png.latex?%5Cphi"> and optimize using SGD.</p></li>
<li><p>Challenge: Computing <img src="https://latex.codecogs.com/png.latex?p(y%5C%7Cx)"></p></li>
<li><p>Approx by summing over top <img src="https://latex.codecogs.com/png.latex?k"> documents with highest prob under <img src="https://latex.codecogs.com/png.latex?p(z%5C%7Cx)"></p></li>
<li><p>Question: How to find top <img src="https://latex.codecogs.com/png.latex?k"> docs? Answer: Use MIPS</p></li>
<li><p>Need to precompute <img src="https://latex.codecogs.com/png.latex?Embed_%7Bdoc%7D(x)"> for all docs. Problem? It changes with each step of SGD.</p></li>
<li><p><em>Solution</em>: Async refresh <img src="https://latex.codecogs.com/png.latex?Embed_%7Bdoc%7D"> every 500 steps</p></li>
<li><p>Use MIPS to select top <img src="https://latex.codecogs.com/png.latex?k"> docs. For these docs, recompute <img src="https://latex.codecogs.com/png.latex?p(z%5C%7Cx)"> using new <img src="https://latex.codecogs.com/png.latex?%5Ctheta">.</p></li>
</ul>
<section id="implementing-async-mips-refreshes" class="level3">
<h3 class="anchored" data-anchor-id="implementing-async-mips-refreshes">Implementing async MIPS refreshes</h3>
<ul>
<li><p>Two jobs running in parallel:</p>
<ul>
<li><p><em>Primary trainer</em>: Perform gradient updates on parameters</p></li>
<li><p><em>Secondary index builder</em>: Embeds and indexes the docs</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://shubhamg.in/posts/realm/async_mips.png" class="img-fluid figure-img"></p>
<figcaption>Async MIPS implementation<span data-label="fig:async_mips"></span></figcaption>
</figure>
</div></li>
<li><p>Async refresh used only for pre-training</p></li>
<li><p>For fine tuning, build index once from pre-trained <img src="https://latex.codecogs.com/png.latex?%5Ctheta"> and use it.</p></li>
</ul></li>
</ul>
</section>
<section id="what-does-retriever-learn" class="level3">
<h3 class="anchored" data-anchor-id="what-does-retriever-learn">What does retriever learn?</h3>
<ul>
<li><p>Retriever promotes docs that improve accuracy</p></li>
<li><p>This can be analyzed by analyzing gradient wrt the parameters</p></li>
</ul>
</section>
<section id="injecting-inductive-biases-into-pre-trianing" class="level3">
<h3 class="anchored" data-anchor-id="injecting-inductive-biases-into-pre-trianing">Injecting inductive biases into pre-trianing</h3>
<ul>
<li><p><strong>Salient span masking</strong>: Some questions require only local context. Select named entities and dates and mask one of them. Performs better.</p></li>
<li><p><strong>Null document</strong>: Add null document to top <img src="https://latex.codecogs.com/png.latex?k"> documents to allow answers even when no context is required</p></li>
<li><p><strong>Prohibiting trivial retrievals</strong>: If knowledge corpus <img src="https://latex.codecogs.com/png.latex?Z"> is the same as pre-training corpus <img src="https://latex.codecogs.com/png.latex?X">, it can predict <img src="https://latex.codecogs.com/png.latex?y"> by looking at <img src="https://latex.codecogs.com/png.latex?x"> in <img src="https://latex.codecogs.com/png.latex?z">. Exclude trivial candidate</p></li>
<li><p><strong>Initialization</strong>: Warm up <img src="https://latex.codecogs.com/png.latex?Embed_%7Binput%7D"> and <img src="https://latex.codecogs.com/png.latex?Embed_%7Bdoc%7D"> using Inverse Cloze Task(ICT) i.e model trained to retrieve the doc where the sentence came from.</p></li>
</ul>
</section>
</section>
</section>
<section id="experiments" class="level1">
<h1>Experiments</h1>
<ul>
<li>REALM outperforms all approaches by a big margin.</li>
</ul>
</section>
<section id="future-work" class="level1">
<h1>Future Work</h1>
<ul>
<li><p>Structured knowledge where we learn entities which are informative</p></li>
<li><p>Multi lingual setting. Retreiving knowledge in high resource language to better represent text in low resource language</p></li>
<li><p>Multi model setting. Retrieve images or videos that can provide knowledge not present in text</p></li>
</ul>
</section>
<section id="comments" class="level1">
<h1>Comments</h1>
<p>Overall, I enjoyed reading this paper. However, there are two key points that concern me:</p>
<ul>
<li>The authors mention using MIPS for selecting the top <img src="https://latex.codecogs.com/png.latex?k"> documents, in order to simplify the task. However, would selecting only these documents from the entire dataset not lead to some information loss? I would like to see more experiments around this area.</li>
<li>There are no experiments around trying out larger models. While I agree that T5 is the largest model available right now, there is no evidence given that a model larger than T5-large would not perform better than the current REALM model. I would like to see some more exploration around this area.</li>
</ul>
</section>
<section id="resources" class="level1">
<h1>Resources</h1>
<p>There are a number of other resources you can use to learn more about this paper such as:</p>
<ul>
<li>The original paper available <a href="https://arxiv.org/abs/2002.08909">here</a></li>
<li>Tweet summary by Adam Roberts available <a href="https://twitter.com/ada_rob/status/1227062195671822336">here</a></li>
<li>Video summary by Václav Košař available <a href="https://twitter.com/ada_rob/status/1227062195671822336">here</a></li>
<li>Huggingface Reading group summary by Joe Davidson available <a href="https://joeddav.github.io/blog/2020/03/03/REALM.html">here</a></li>
</ul>


</section>

 ]]></description>
  <category>nlp</category>
  <category>bert</category>
  <category>review</category>
  <guid>https://shubhamg.in/posts/2020-03-14-realm.html</guid>
  <pubDate>Sat, 14 Mar 2020 00:00:00 GMT</pubDate>
  <media:content url="https://shubhamg.in/posts/realm/training.png" medium="image" type="image/png" height="169" width="144"/>
</item>
<item>
  <title>Bayesian Golf Putting Model</title>
  <link>https://shubhamg.in/posts/2020-03-12-tutorial.html</link>
  <description><![CDATA[ 






<section id="introduction" class="level1">
<h1>Introduction</h1>
<section id="disclaimer" class="level2">
<h2 class="anchored" data-anchor-id="disclaimer">Disclaimer</h2>
<p>This is inspired from Dr.&nbsp;Andrew Gelman’s case study, which can be found <a href="https://mc-stan.org/users/documentation/case-studies/golf.html">here</a>. Specifically:</p>
<ul>
<li>This is heavily inspired by Colin Caroll’s Blog present <a href="https://nbviewer.jupyter.org/github/pymc-devs/pymc3/blob/master/docs/source/notebooks/putting_workflow.ipynb">here</a>. A lot of the plotting code from his blog post has been reused.</li>
<li>Josh Duncan’s blog post on the same topic which can be found <a href="https://jduncstats.com/post/2019-11-02_golf-turing/">here</a>.</li>
</ul>
<p>This is not a novel solution. It is merely a replication of Dr.&nbsp;Gelman’s blog in PyMC3.</p>
</section>
<section id="problem" class="level2">
<h2 class="anchored" data-anchor-id="problem">Problem</h2>
<p>This is based on a popular blog post by Dr.&nbsp;Andrew Gelman. Here, we are given data from professional golfers on the proportion of success putts from a number of tries. Our aim is to identify:</p>
<blockquote class="blockquote">
<p>Can we model the probability of success in golf putting as a function of distance from the hole?</p>
</blockquote>
</section>
<section id="eda" class="level2">
<h2 class="anchored" data-anchor-id="eda">EDA</h2>
<div id="cell-6" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pymc3 <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pm</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seaborn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sns</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>WARNING (theano.tensor.blas): Using NumPy C-API based implementation for BLAS functions.</code></pre>
</div>
</div>
<p>The source repository is present <a href="https://github.com/stan-dev/example-models/tree/master/knitr/golf">here</a></p>
<div id="cell-8" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1443</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1346</span>],</span>
<span id="cb3-2">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">694</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">577</span>],</span>
<span id="cb3-3">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">455</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">337</span>],</span>
<span id="cb3-4">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">353</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">208</span>],</span>
<span id="cb3-5">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">272</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">149</span>],</span>
<span id="cb3-6">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">136</span>],</span>
<span id="cb3-7">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">240</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">111</span>],</span>
<span id="cb3-8">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">217</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">69</span>],</span>
<span id="cb3-9">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">67</span>],</span>
<span id="cb3-10">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">237</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">75</span>],</span>
<span id="cb3-11">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">202</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">52</span>],</span>
<span id="cb3-12">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">192</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">46</span>],</span>
<span id="cb3-13">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">174</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">54</span>],</span>
<span id="cb3-14">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">167</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>],</span>
<span id="cb3-15">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">201</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span>],</span>
<span id="cb3-16">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">195</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">31</span>],</span>
<span id="cb3-17">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">191</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">33</span>],</span>
<span id="cb3-18">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">19</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">147</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>],</span>
<span id="cb3-19">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">152</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>]])</span>
<span id="cb3-20"></span>
<span id="cb3-21">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(data, columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb3-22">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'distance'</span>, </span>
<span id="cb3-23">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tries'</span>, </span>
<span id="cb3-24">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'success_count'</span></span>
<span id="cb3-25">])</span></code></pre></div>
</div>
<div id="cell-9" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">df</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">distance</th>
<th data-quarto-table-cell-role="th">tries</th>
<th data-quarto-table-cell-role="th">success_count</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>2</td>
<td>1443</td>
<td>1346</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>3</td>
<td>694</td>
<td>577</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>4</td>
<td>455</td>
<td>337</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>5</td>
<td>353</td>
<td>208</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>6</td>
<td>272</td>
<td>149</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">5</td>
<td>7</td>
<td>256</td>
<td>136</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">6</td>
<td>8</td>
<td>240</td>
<td>111</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">7</td>
<td>9</td>
<td>217</td>
<td>69</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">8</td>
<td>10</td>
<td>200</td>
<td>67</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">9</td>
<td>11</td>
<td>237</td>
<td>75</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">10</td>
<td>12</td>
<td>202</td>
<td>52</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">11</td>
<td>13</td>
<td>192</td>
<td>46</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">12</td>
<td>14</td>
<td>174</td>
<td>54</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">13</td>
<td>15</td>
<td>167</td>
<td>28</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">14</td>
<td>16</td>
<td>201</td>
<td>27</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">15</td>
<td>17</td>
<td>195</td>
<td>31</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">16</td>
<td>18</td>
<td>191</td>
<td>33</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">17</td>
<td>19</td>
<td>147</td>
<td>20</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">18</td>
<td>20</td>
<td>152</td>
<td>24</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>The variables have the following format:</p>
<table class="caption-top table">
<thead>
<tr class="header">
<th>Variable</th>
<th>Units</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>distance</td>
<td>feet</td>
<td>Distance from the hole for the putt attempt</td>
</tr>
<tr class="even">
<td>tries</td>
<td>count</td>
<td>Number of attempts at the chosen distance</td>
</tr>
<tr class="odd">
<td>success_count</td>
<td>count</td>
<td>The total successful putts</td>
</tr>
</tbody>
</table>
<p>Lets try to visualize the dataset:</p>
<div id="cell-12" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'success_prob'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.success_count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> df.tries</span></code></pre></div>
</div>
<div id="cell-13" class="cell" data-scrolled="true" data-execution_count="5">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">sns.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>()</span>
<span id="cb6-2">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb6-3">ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sns.scatterplot(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'distance'</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'success_prob'</span>, data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>df, s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>)</span>
<span id="cb6-4">ax.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(xlabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Distance from hole(ft)'</span>, ylabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Probability of Success'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">
<pre><code>[Text(0, 0.5, 'Probability of Success'),
 Text(0.5, 0, 'Distance from hole(ft)')]</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://shubhamg.in/posts/2020-03-12-tutorial_files/figure-html/cell-6-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>We can notice that the <strong>probability of success decreases as the distance increases.</strong></p>
</section>
</section>
<section id="baseline-model" class="level1">
<h1>Baseline Model</h1>
<p>Let us try to see we can fit a simple linear model to the data i.e Logsitic Regression. We will be using PyMC3.</p>
<p>Here, we will attempt to model the success of golf putting by using the distance as an independant(i.e predictor) variable. The model will have the following form:</p>
<p><strong><img src="https://latex.codecogs.com/png.latex?y_i%20%5Csim%20binomial(n_j,%20logit%5E%7B-1%7D(b_0%20+%20b_1x_j)),%20%5Ctext%7Bfor%20%7D%20j%20=%201,...J%20"></strong></p>
<div id="cell-18" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> pm.Model() <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> model:</span>
<span id="cb8-2">    b_0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Normal(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'b_0'</span>, mu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, sd<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb8-3">    b_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Normal(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'b_1'</span>, mu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, sd<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb8-4">        </span>
<span id="cb8-5">    y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Binomial(</span>
<span id="cb8-6">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y'</span>, </span>
<span id="cb8-7">        n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>df.tries, </span>
<span id="cb8-8">        p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pm.math.invlogit(b_0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> df.distance), </span>
<span id="cb8-9">        observed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>df.success_count</span>
<span id="cb8-10">    )</span></code></pre></div>
</div>
<p>Why are we using inverse logit?</p>
<ul>
<li><strong>Logit</strong> is a function used to convert a continous variable to a value in the range [0,1]</li>
<li><strong>Inverse Logit</strong>: Used to convert real valued variable to a value in the range [0,1]</li>
</ul>
<div id="cell-20" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">pm.model_to_graphviz(model)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">
<div>
<figure class="figure">
<p><img src="https://shubhamg.in/posts/2020-03-12-tutorial_files/figure-html/cell-8-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-21" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> model:</span>
<span id="cb10-2">    trace <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.sample(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, tune<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, chains<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Auto-assigning NUTS sampler...
Initializing NUTS using jitter+adapt_diag...
Multiprocess sampling (4 chains in 2 jobs)
NUTS: [b_1, b_0]
Sampling 4 chains, 0 divergences: 100%|██████████| 8000/8000 [00:06&lt;00:00, 1164.22draws/s]
The acceptance probability does not match the target. It is 0.889539212527967, but should be close to 0.8. Try to increase the number of tuning steps.
The acceptance probability does not match the target. It is 0.6968711559119489, but should be close to 0.8. Try to increase the number of tuning steps.
The number of effective samples is smaller than 25% for some parameters.</code></pre>
</div>
</div>
<div id="cell-22" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">pm.summary(trace)[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mean'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sd'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mcse_mean'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mcse_sd'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ess_mean'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r_hat'</span>]]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="9">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">mean</th>
<th data-quarto-table-cell-role="th">sd</th>
<th data-quarto-table-cell-role="th">mcse_mean</th>
<th data-quarto-table-cell-role="th">mcse_sd</th>
<th data-quarto-table-cell-role="th">ess_mean</th>
<th data-quarto-table-cell-role="th">r_hat</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">b_0</td>
<td>2.226</td>
<td>0.060</td>
<td>0.002</td>
<td>0.001</td>
<td>926.0</td>
<td>1.01</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">b_1</td>
<td>-0.255</td>
<td>0.007</td>
<td>0.000</td>
<td>0.000</td>
<td>838.0</td>
<td>1.01</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div id="cell-23" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">pm.traceplot(trace)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="10">
<pre><code>array([[&lt;matplotlib.axes._subplots.AxesSubplot object at 0x7fdfef7cfd68&gt;,
        &lt;matplotlib.axes._subplots.AxesSubplot object at 0x7fdfef77efd0&gt;],
       [&lt;matplotlib.axes._subplots.AxesSubplot object at 0x7fdfef848828&gt;,
        &lt;matplotlib.axes._subplots.AxesSubplot object at 0x7fdfef758a58&gt;]],
      dtype=object)</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://shubhamg.in/posts/2020-03-12-tutorial_files/figure-html/cell-11-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-24" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">pm.plot_posterior(trace)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="11">
<pre><code>array([&lt;matplotlib.axes._subplots.AxesSubplot object at 0x7fdfedd70be0&gt;,
       &lt;matplotlib.axes._subplots.AxesSubplot object at 0x7fdfedd2a860&gt;],
      dtype=object)</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://shubhamg.in/posts/2020-03-12-tutorial_files/figure-html/cell-12-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>From the above results, we can see:</p>
<ul>
<li>PyMC3 has estimated
<ul>
<li><img src="https://latex.codecogs.com/png.latex?b_0"> to be <img src="https://latex.codecogs.com/png.latex?2.23%20%5Cpm%200.057"></li>
<li><img src="https://latex.codecogs.com/png.latex?b_1"> to be <img src="https://latex.codecogs.com/png.latex?-0.26%20%5Cpm%200.007"></li>
</ul></li>
<li>The MCSE is almost 0 <img src="https://latex.codecogs.com/png.latex?%5Cimplies"> The simulation has run long enough for the chains to converge.</li>
<li><img src="https://latex.codecogs.com/png.latex?r%5C_hat%20=%201.0"> tells us that the chains have mixed well i.e hairy hedgehog pattern.</li>
</ul>
<p>Let us plot the final output of this model and check it with our training data.</p>
<div id="cell-26" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> model:</span>
<span id="cb17-2">    posterior_trace <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.sample_posterior_predictive(trace)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>100%|██████████| 4000/4000 [00:04&lt;00:00, 888.12it/s]</code></pre>
</div>
</div>
<div id="cell-27" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">posterior_success <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> posterior_trace[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> df.tries.values</span></code></pre></div>
</div>
<div id="cell-28" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'posterior_success_prob'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(posterior_success).median()</span>
<span id="cb20-2">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'posterior_success_prob_std'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(posterior_success).std()</span></code></pre></div>
</div>
<div id="cell-29" class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">sns.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>()</span>
<span id="cb21-2">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb21-3">prob <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.success_count<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>df.tries</span>
<span id="cb21-4">ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sns.scatterplot(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'distance'</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>df.success_prob, data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>df, s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'actual'</span>)</span>
<span id="cb21-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ls = np.linspace(0, df.distance.max(), 200)</span></span>
<span id="cb21-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for index in np.random.randint(0, len(trace), 50):</span></span>
<span id="cb21-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     ax.plot(</span></span>
<span id="cb21-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#         ls, </span></span>
<span id="cb21-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#         scipy.special.expit(</span></span>
<span id="cb21-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#             trace['b_0'][index] * ls + trace['b_1'][index] * ls</span></span>
<span id="cb21-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#         )</span></span>
<span id="cb21-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     )</span></span>
<span id="cb21-13">sns.scatterplot(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'distance'</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>df.posterior_success_prob, data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>df, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'predicted'</span>,ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span>, s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>)</span>
<span id="cb21-14">sns.lineplot(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'distance'</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>df.posterior_success_prob, data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>df,ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span>)</span>
<span id="cb21-15">ax.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(xlabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Distance from hole(ft)'</span>, ylabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Probability of Success'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="15">
<pre><code>[Text(0, 0.5, 'Probability of Success'),
 Text(0.5, 0, 'Distance from hole(ft)')]</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://shubhamg.in/posts/2020-03-12-tutorial_files/figure-html/cell-16-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>The curve fit is okay, but it can be improved. We can use this as a baseline model. In reality, each of them is not a point, but an posterior estimate. Because the uncertainity is small(as seen above), we’ve decided to show only the median points.</p>
<p>From the above model, putts from 50ft are expected to be made with probability:</p>
<div id="cell-31" class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> scipy</span>
<span id="cb23-2">res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> scipy.special.expit(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.223</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.255</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>).mean()</span>
<span id="cb23-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(res, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>),<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>0.00268 %</code></pre>
</div>
</div>
</section>
<section id="modelling-from-first-principles" class="level1">
<h1>Modelling from first principles</h1>
<section id="geometry-based-model" class="level2">
<h2 class="anchored" data-anchor-id="geometry-based-model">Geometry based Model</h2>
<p><img src="https://shubhamg.in/posts/my_icons/golf_tutorial/golf_ball_trajectory.png" class="img-fluid"></p>
<p>We’ll try to accomodate the physics associated with the problem. Specically, we assume:</p>
<section id="assumptions" class="level5">
<h5 class="anchored" data-anchor-id="assumptions">Assumptions</h5>
<ul>
<li>The golfers can hit the ball in any direction with some small error. This error could be because of inaccuracy, errors in the human, etc.</li>
<li>This error refers to the angle of the shot.</li>
<li>We assume the angle is <strong>normally</strong> distributed.</li>
</ul>
<section id="implications" class="level6">
<h6 class="anchored" data-anchor-id="implications">Implications</h6>
<ul>
<li>The ball goes in whenever the angle is small enough for it to hit the cup of the hole!</li>
<li>Longer putt <img src="https://latex.codecogs.com/png.latex?%5Cimplies"> Larger error <img src="https://latex.codecogs.com/png.latex?%5Cimplies"> Lower success rate than shorter putt</li>
</ul>
<p>From Dr.&nbsp;Gelman’s blog, we obtain the formula as:</p>
<blockquote class="blockquote">
<p><img src="https://latex.codecogs.com/png.latex?Pr(%7Cangle%7C%20%3C%20sin%5E%7B-1%7D(%5Cfrac%7B(R-r)%7D%7Bx%7D))%20=%202%5Cphi%5Cbig(%5Cfrac%7Bsin%5E%7B-1%7D%5Cfrac%7BR-r%7D%7Bx%7D%7D%7B%5Csigma%7D%5Cbig)%20-%201"></p>
</blockquote>
<p><img src="https://latex.codecogs.com/png.latex?%5Cphi%20%5Cimplies"> Cumulative Normal Distribution Function.</p>
<p>Hence, our model will now have two big parts:</p>
<p><img src="https://latex.codecogs.com/png.latex?y_j%20%5Csim%20binomial(n_j,%20p_j)"></p>
<p><img src="https://latex.codecogs.com/png.latex?p_j%20=%202%5Cphi%5Cbig(%5Cfrac%7Bsin%5E%7B-1%7D%5Cfrac%7BR-r%7D%7Bx%7D%7D%7B%5Csigma%7D%5Cbig)%20-%201"></p>
<p>Typically, the diameter of a golf ball is 1.68 inches and the cup is 4.25 inches i.e</p>
<p><img src="https://latex.codecogs.com/png.latex?r%20=%201.68%20%5Ctext%7Binch%7D"> <img src="https://latex.codecogs.com/png.latex?R%20=%204.25%20%5Ctext%7Binch%7D"></p>
<div id="cell-37" class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">ball_radius <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.68</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span></span>
<span id="cb25-2">cup_radius <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.25</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span></span></code></pre></div>
</div>
<div id="cell-38" class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> calculate_prob(angle, distance):</span>
<span id="cb26-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb26-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Calculate probability that the ball with fall in the hole given the angle of the shot </span></span>
<span id="cb26-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    and the distance from the hole.</span></span>
<span id="cb26-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb26-6">    rad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> angle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.pi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">180.0</span></span>
<span id="cb26-7">    arcsin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.arcsin((cup_radius <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> ball_radius)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> distance)</span>
<span id="cb26-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> scipy.stats.norm(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, rad).cdf(arcsin) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span></code></pre></div>
</div>
<div id="cell-39" class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb27-2">ls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, df.distance.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>)</span>
<span id="cb27-3">ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sns.scatterplot(</span>
<span id="cb27-4">    x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'distance'</span>, </span>
<span id="cb27-5">    y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'success_prob'</span>, </span>
<span id="cb27-6">    data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>df, </span>
<span id="cb27-7">    s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>,</span>
<span id="cb27-8">    legend<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'full'</span></span>
<span id="cb27-9">)</span>
<span id="cb27-10"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> angle <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>]:</span>
<span id="cb27-11">    ax.plot(</span>
<span id="cb27-12">        ls, </span>
<span id="cb27-13">        calculate_prob(angle, ls), </span>
<span id="cb27-14">        label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Angle=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>angle<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb27-15">    )</span>
<span id="cb27-16">ax.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(</span>
<span id="cb27-17">    xlabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Distance from hole(ft)'</span>, </span>
<span id="cb27-18">    ylabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Probability of Success'</span></span>
<span id="cb27-19">)</span>
<span id="cb27-20">ax.legend()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://shubhamg.in/posts/2020-03-12-tutorial_files/figure-html/cell-20-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Let us now add this to our model!</p>
<div id="cell-41" class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> theano.tensor <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> tt</span>
<span id="cb28-2"></span>
<span id="cb28-3"></span>
<span id="cb28-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> calculate_phi(num):</span>
<span id="cb28-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"cdf for standard normal"</span></span>
<span id="cb28-6">    q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tt.erf(num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> tt.sqrt(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span>)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ERF is the Gaussian Error </span></span>
<span id="cb28-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> q) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.</span></span></code></pre></div>
</div>
<div id="cell-42" class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> pm.Model() <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> model:</span>
<span id="cb29-2">    angle_of_shot_radians <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.HalfNormal(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'angle_of_shot_radians'</span>)</span>
<span id="cb29-3">    angle_of_shot_degrees <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Deterministic(</span>
<span id="cb29-4">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'angle_of_shot_degrees'</span>,</span>
<span id="cb29-5">        (angle_of_shot_radians <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">180.0</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> np.pi</span>
<span id="cb29-6">    )</span>
<span id="cb29-7">    p_ball_goes_in <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Deterministic(</span>
<span id="cb29-8">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'p_ball_goes_in'</span>,</span>
<span id="cb29-9">        <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> calculate_phi(</span>
<span id="cb29-10">                tt.arcsin(</span>
<span id="cb29-11">                    (cup_radius <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> ball_radius)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> df.distance</span>
<span id="cb29-12">                ) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> angle_of_shot_radians</span>
<span id="cb29-13">            )</span>
<span id="cb29-14">        ) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb29-15">    p_success <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Binomial(</span>
<span id="cb29-16">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'p_success'</span>,</span>
<span id="cb29-17">        n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>df.tries, </span>
<span id="cb29-18">        p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>p_ball_goes_in, </span>
<span id="cb29-19">        observed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>df.success_count</span>
<span id="cb29-20">    )</span></code></pre></div>
</div>
<div id="cell-43" class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">pm.model_to_graphviz(model)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="22">
<div>
<figure class="figure">
<p><img src="https://shubhamg.in/posts/2020-03-12-tutorial_files/figure-html/cell-23-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-44" class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> model:</span>
<span id="cb31-2">    trace <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.sample(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4000</span>, tune<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, chains<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Auto-assigning NUTS sampler...
Initializing NUTS using jitter+adapt_diag...
ERROR (theano.gof.opt): Optimization failure due to: local_grad_log_erfc_neg
ERROR (theano.gof.opt): node: Elemwise{true_div}(Elemwise{mul,no_inplace}.0, Elemwise{erfc,no_inplace}.0)
ERROR (theano.gof.opt): TRACEBACK:
ERROR (theano.gof.opt): Traceback (most recent call last):
  File "/home/goodhamgupta/shubham/blog/_notebooks/.env/lib/python3.6/site-packages/theano/gof/opt.py", line 2034, in process_node
    replacements = lopt.transform(node)
  File "/home/goodhamgupta/shubham/blog/_notebooks/.env/lib/python3.6/site-packages/theano/tensor/opt.py", line 6789, in local_grad_log_erfc_neg
    if not exp.owner.inputs[0].owner:
AttributeError: 'NoneType' object has no attribute 'owner'

Multiprocess sampling (4 chains in 2 jobs)
NUTS: [angle_of_shot_radians]
Sampling 4 chains, 0 divergences: 100%|██████████| 20000/20000 [00:10&lt;00:00, 1943.54draws/s]
The acceptance probability does not match the target. It is 0.8844154441842546, but should be close to 0.8. Try to increase the number of tuning steps.</code></pre>
</div>
</div>
<div id="cell-45" class="cell" data-execution_count="24">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1">pm.summary(trace).head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="24">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">mean</th>
<th data-quarto-table-cell-role="th">sd</th>
<th data-quarto-table-cell-role="th">hpd_3%</th>
<th data-quarto-table-cell-role="th">hpd_97%</th>
<th data-quarto-table-cell-role="th">mcse_mean</th>
<th data-quarto-table-cell-role="th">mcse_sd</th>
<th data-quarto-table-cell-role="th">ess_mean</th>
<th data-quarto-table-cell-role="th">ess_sd</th>
<th data-quarto-table-cell-role="th">ess_bulk</th>
<th data-quarto-table-cell-role="th">ess_tail</th>
<th data-quarto-table-cell-role="th">r_hat</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">angle_of_shot_radians</td>
<td>0.027</td>
<td>0.000</td>
<td>0.026</td>
<td>0.027</td>
<td>0.0</td>
<td>0.0</td>
<td>6641.0</td>
<td>6641.0</td>
<td>6641.0</td>
<td>10874.0</td>
<td>1.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">angle_of_shot_degrees</td>
<td>1.527</td>
<td>0.023</td>
<td>1.484</td>
<td>1.570</td>
<td>0.0</td>
<td>0.0</td>
<td>6641.0</td>
<td>6641.0</td>
<td>6641.0</td>
<td>10874.0</td>
<td>1.0</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div id="cell-46" class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">pm.plot_posterior(trace[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'angle_of_shot_degrees'</span>])</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="25">
<pre><code>array([&lt;matplotlib.axes._subplots.AxesSubplot object at 0x7fdfe4c24f60&gt;],
      dtype=object)</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://shubhamg.in/posts/2020-03-12-tutorial_files/figure-html/cell-26-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>From the above results, we can see:</p>
<ul>
<li>PyMC3 has estimated
<ul>
<li><img src="https://latex.codecogs.com/png.latex?angle_of_shot_degrees"> to be <img src="https://latex.codecogs.com/png.latex?1.53%20%5Cpm%200.023"></li>
</ul></li>
<li>The MCSE is almost 0 <img src="https://latex.codecogs.com/png.latex?%5Cimplies"> The simulation has run long enough for the chains to converge.</li>
<li><img src="https://latex.codecogs.com/png.latex?r%5C_hat%20=%201.0"> tells us that the chains have mixed well i.e hairy hedgehog pattern.</li>
</ul>
<p>Let’s visualize the fit with this new model:</p>
<div id="cell-49" class="cell" data-execution_count="26">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1">geo_model_prob <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> calculate_prob(</span>
<span id="cb36-2">    trace[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'angle_of_shot_degrees'</span>].mean(), </span>
<span id="cb36-3">    df.distance</span>
<span id="cb36-4">)</span></code></pre></div>
</div>
<div id="cell-50" class="cell" data-execution_count="27">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1">sns.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>()</span>
<span id="cb37-2">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb37-3"></span>
<span id="cb37-4">ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sns.scatterplot(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'distance'</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>df.success_prob, data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>df, s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Actual'</span>)</span>
<span id="cb37-5"></span>
<span id="cb37-6">sns.scatterplot(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'distance'</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>df.posterior_success_prob, data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>df, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Logistic Regression'</span>,ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span>, s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb37-7">sns.scatterplot(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'distance'</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>geo_model_prob, data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>df, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Geometry based '</span>,ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'orange'</span>, s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb37-8"></span>
<span id="cb37-9">sns.lineplot(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'distance'</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>df.posterior_success_prob, data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>df,ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span>)</span>
<span id="cb37-10">sns.lineplot(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'distance'</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>geo_model_prob, data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>df,ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'orange'</span>)</span>
<span id="cb37-11"></span>
<span id="cb37-12">ax.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(xlabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Distance from hole(ft)'</span>, ylabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Probability of Success'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="27">
<pre><code>[Text(0, 0.5, 'Probability of Success'),
 Text(0.5, 0, 'Distance from hole(ft)')]</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://shubhamg.in/posts/2020-03-12-tutorial_files/figure-html/cell-28-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<ul>
<li>We can see that the geometry based model fits better than the logistic regression model.</li>
<li>While this model is not completely accurate, it suggests that angle is a good variable to model the problem. Using this model, we can be more confident about extrapolating the data.</li>
<li>For the same 50ft putt, the probability now is:</li>
</ul>
<div id="cell-52" class="cell" data-execution_count="28">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> scipy</span>
<span id="cb39-2">lr_result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(</span>
<span id="cb39-3">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> scipy.special.expit(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.223</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.255</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>).mean(),</span>
<span id="cb39-4">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb39-5">)</span>
<span id="cb39-6">geo_result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(</span>
<span id="cb39-7">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> calculate_prob(</span>
<span id="cb39-8">        trace[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'angle_of_shot_degrees'</span>].mean(), </span>
<span id="cb39-9">        <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span></span>
<span id="cb39-10">    ).mean(),</span>
<span id="cb39-11">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb39-12">)</span>
<span id="cb39-13"></span>
<span id="cb39-14"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(</span>
<span id="cb39-15">    <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Logistic Regression Model: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>lr_result<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">% </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb39-16">    <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Geometry Based Model: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>geo_result<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">%"</span></span>
<span id="cb39-17">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Logistic Regression Model: 0.00268% 
Geometry Based Model: 6.40322%</code></pre>
</div>
</div>
</section>
</section>
</section>
<section id="new-data" class="level2">
<h2 class="anchored" data-anchor-id="new-data">New Data!</h2>
<p>Mark Broadie obtained new data about the golfers. Let’s see how our model performs on this new dataset.</p>
<p>First, we’ll look at the summary of the dataset.</p>
<div id="cell-55" class="cell" data-execution_count="29">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#  golf putting data from Broadie (2018)</span></span>
<span id="cb41-2">new_golf_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([</span>
<span id="cb41-3">[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.28</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45198</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45183</span>],</span>
<span id="cb41-4">[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.97</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">183020</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">182899</span>],</span>
<span id="cb41-5">[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.93</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">169503</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">168594</span>],</span>
<span id="cb41-6">[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.92</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">113094</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">108953</span>],</span>
<span id="cb41-7">[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.93</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">73855</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64740</span>],</span>
<span id="cb41-8">[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.94</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">53659</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">41106</span>],</span>
<span id="cb41-9">[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5.94</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42991</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28205</span>],</span>
<span id="cb41-10">[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">6.95</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">37050</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">21334</span>],</span>
<span id="cb41-11">[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">7.95</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">33275</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16615</span>],</span>
<span id="cb41-12">[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">8.95</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30836</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13503</span>],</span>
<span id="cb41-13">[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">9.95</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28637</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11060</span>],</span>
<span id="cb41-14">[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.95</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">26239</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9032</span>],</span>
<span id="cb41-15">[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">11.95</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24636</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7687</span>],</span>
<span id="cb41-16">[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">12.95</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">22876</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6432</span>],</span>
<span id="cb41-17">[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">14.43</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">41267</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9813</span>],</span>
<span id="cb41-18">[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">16.43</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">35712</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7196</span>],</span>
<span id="cb41-19">[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">18.44</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">31573</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5290</span>],</span>
<span id="cb41-20">[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">20.44</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28280</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4086</span>],</span>
<span id="cb41-21">[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">21.95</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13238</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1642</span>],</span>
<span id="cb41-22">[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">24.39</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">46570</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4767</span>],</span>
<span id="cb41-23">[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">28.40</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">38422</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2980</span>],</span>
<span id="cb41-24">[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">32.39</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">31641</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1996</span>],</span>
<span id="cb41-25">[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">36.39</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25604</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1327</span>],</span>
<span id="cb41-26">[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">40.37</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20366</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">834</span>],</span>
<span id="cb41-27">[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">44.38</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15977</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">559</span>],</span>
<span id="cb41-28">[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">48.37</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11770</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">311</span>],</span>
<span id="cb41-29">[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">52.36</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8708</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">231</span>],</span>
<span id="cb41-30">[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">57.25</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8878</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">204</span>],</span>
<span id="cb41-31">[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">63.23</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5492</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">103</span>],</span>
<span id="cb41-32">[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">69.18</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3087</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">35</span>],</span>
<span id="cb41-33">[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">75.19</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1742</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>],</span>
<span id="cb41-34">])</span>
<span id="cb41-35"></span>
<span id="cb41-36">new_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(</span>
<span id="cb41-37">    new_golf_data, </span>
<span id="cb41-38">    columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'distance'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tries'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'success_count'</span>]</span>
<span id="cb41-39">)</span></code></pre></div>
</div>
<div id="cell-56" class="cell" data-execution_count="30">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1">new_geo_model_prob <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> calculate_prob(</span>
<span id="cb42-2">    trace[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'angle_of_shot_degrees'</span>].mean(), </span>
<span id="cb42-3">    new_df.distance</span>
<span id="cb42-4">)</span></code></pre></div>
</div>
<div id="cell-57" class="cell" data-execution_count="31">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1">new_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'success_prob'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> new_df.success_count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> new_df.tries</span>
<span id="cb43-2">sns.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>()</span>
<span id="cb43-3">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb43-4">ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sns.scatterplot(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'distance'</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'success_prob'</span>, data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>df, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Old Dataset'</span>, s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>)</span>
<span id="cb43-5">sns.scatterplot(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'distance'</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'success_prob'</span>, data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>new_df,label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'New Dataset'</span>, s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>, ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax)</span>
<span id="cb43-6">sns.scatterplot(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'distance'</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>new_geo_model_prob, data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>new_df, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Geometry based Model '</span>,ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span>, s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb43-7">ax.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(</span>
<span id="cb43-8">    xlabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Distance from hole(ft)'</span>, </span>
<span id="cb43-9">    ylabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Probability of Success'</span></span>
<span id="cb43-10">)</span>
<span id="cb43-11">plt.setp(ax.get_legend().get_texts(), fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'25'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://shubhamg.in/posts/2020-03-12-tutorial_files/figure-html/cell-32-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>We can see:</p>
<ul>
<li>Success rate is similar in the 0-20 feet range for both datasets.</li>
<li>Beyond 20 ft, success rate is lower than expected. These attempts are more difficult, even after we have accounted for increased angular precision.</li>
</ul>
</section>
<section id="moar-features" class="level2">
<h2 class="anchored" data-anchor-id="moar-features">Moar features!</h2>
<p>To get the ball in, along with the angle, we should also need to take into account if the ball was hit <strong>hard enough</strong>.</p>
<p>From Colin Caroll’s Blog, we have the following: &gt; Mark Broadie made the following assumptions - If a putt goes short or more than 3 feet past the hole, it will not go in. - Golfers aim for 1 foot past the hole - The distance the ball goes, <img src="https://latex.codecogs.com/png.latex?u">, is distributed as: <img src="https://latex.codecogs.com/png.latex?%20u%20%5Csim%20%5Cmathcal%7BN%7D%5Cleft(1%20+%20%5Ctext%7Bdistance%7D,%20%5Csigma_%7B%5Ctext%7Bdistance%7D%7D%20(1%20+%20%5Ctext%7Bdistance%7D)%5Cright),%20"> where we will learn <img src="https://latex.codecogs.com/png.latex?%5Csigma_%7B%5Ctext%7Bdistance%7D%7D">.</p>
<p>After working through the geometry and algebra, we get:</p>
<p><img src="https://latex.codecogs.com/png.latex?P(%5Ctext%7BGood%20shot%7D)%20=%20%5Cbigg(2%5Cphi%5Cbig(%5Cfrac%7Bsin%5E%7B-1%7D(%5Cfrac%7BR-r%7D%7Bx%7D)%7D%7B%5Csigma_%7Bangle%7D%7D%5Cbig)-1%5Cbigg)%5Cbigg(%5Cphi%5Cbigg(%5Cfrac%7B2%7D%7B(x+1)%5Csigma_%7Bdistance%7D%7D%5Cbigg)%20-%20%5Cphi%5Cbigg(%5Cfrac%7B-1%7D%7B(x+1)%5Csigma_%7Bdistance%7D%7D%5Cbigg)%5Cbigg)"></p>
<p>Let’s write this down in PyMC3</p>
<div id="cell-62" class="cell" data-execution_count="32">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1">OVERSHOT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span></span>
<span id="cb44-2">DISTANCE_TOLERANCE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.0</span></span>
<span id="cb44-3">distances <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> new_df.distance.values</span>
<span id="cb44-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> pm.Model() <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> model:</span>
<span id="cb44-5">    angle_of_shot_radians <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.HalfNormal(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'angle_of_shot_radians'</span>)</span>
<span id="cb44-6">    angle_of_shot_degrees <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Deterministic(</span>
<span id="cb44-7">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'angle_of_shot_degrees'</span>,</span>
<span id="cb44-8">        (angle_of_shot_radians <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">180.0</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> np.pi</span>
<span id="cb44-9">    )</span>
<span id="cb44-10">    </span>
<span id="cb44-11">    variance_of_distance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.HalfNormal(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'variance_of_distance'</span>)</span>
<span id="cb44-12">    p_good_angle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Deterministic(</span>
<span id="cb44-13">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'p_good_angle'</span>,</span>
<span id="cb44-14">        <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> calculate_phi(</span>
<span id="cb44-15">                tt.arcsin(</span>
<span id="cb44-16">                    (cup_radius <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> ball_radius)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> distances</span>
<span id="cb44-17">                ) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> angle_of_shot_radians</span>
<span id="cb44-18">            )</span>
<span id="cb44-19">        ) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb44-20">    p_good_distance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Deterministic(</span>
<span id="cb44-21">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'p_good_distance'</span>,</span>
<span id="cb44-22">        calculate_phi(</span>
<span id="cb44-23">            (DISTANCE_TOLERANCE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> OVERSHOT) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> ((distances <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> OVERSHOT) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> variance_of_distance)) </span>
<span id="cb44-24">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> calculate_phi(</span>
<span id="cb44-25">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>OVERSHOT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> ((distances <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> OVERSHOT) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> variance_of_distance))</span>
<span id="cb44-26"></span>
<span id="cb44-27">    )</span>
<span id="cb44-28">    p_success <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Binomial(</span>
<span id="cb44-29">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'p_success'</span>,</span>
<span id="cb44-30">        n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>new_df.tries, </span>
<span id="cb44-31">        p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>p_good_angle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> p_good_distance, </span>
<span id="cb44-32">        observed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>new_df.success_count</span>
<span id="cb44-33">    )</span>
<span id="cb44-34">    </span></code></pre></div>
</div>
<div id="cell-63" class="cell" data-execution_count="33">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1">pm.model_to_graphviz(model)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="33">
<div>
<figure class="figure">
<p><img src="https://shubhamg.in/posts/2020-03-12-tutorial_files/figure-html/cell-34-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-64" class="cell" data-execution_count="34">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> model:</span>
<span id="cb46-2">    trace <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.sample(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, tune<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, chains<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Auto-assigning NUTS sampler...
Initializing NUTS using jitter+adapt_diag...
Multiprocess sampling (4 chains in 2 jobs)
NUTS: [variance_of_distance, angle_of_shot_radians]
Sampling 4 chains, 0 divergences: 100%|██████████| 8000/8000 [00:08&lt;00:00, 969.28draws/s] 
The number of effective samples is smaller than 25% for some parameters.</code></pre>
</div>
</div>
<div id="cell-65" class="cell" data-execution_count="35">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb48-1">pm.summary(trace).head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="35">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">mean</th>
<th data-quarto-table-cell-role="th">sd</th>
<th data-quarto-table-cell-role="th">hpd_3%</th>
<th data-quarto-table-cell-role="th">hpd_97%</th>
<th data-quarto-table-cell-role="th">mcse_mean</th>
<th data-quarto-table-cell-role="th">mcse_sd</th>
<th data-quarto-table-cell-role="th">ess_mean</th>
<th data-quarto-table-cell-role="th">ess_sd</th>
<th data-quarto-table-cell-role="th">ess_bulk</th>
<th data-quarto-table-cell-role="th">ess_tail</th>
<th data-quarto-table-cell-role="th">r_hat</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">angle_of_shot_radians</td>
<td>0.013</td>
<td>0.000</td>
<td>0.013</td>
<td>0.013</td>
<td>0.0</td>
<td>0.0</td>
<td>865.0</td>
<td>865.0</td>
<td>862.0</td>
<td>1109.0</td>
<td>1.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">angle_of_shot_degrees</td>
<td>0.761</td>
<td>0.003</td>
<td>0.755</td>
<td>0.768</td>
<td>0.0</td>
<td>0.0</td>
<td>865.0</td>
<td>865.0</td>
<td>862.0</td>
<td>1109.0</td>
<td>1.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">variance_of_distance</td>
<td>0.137</td>
<td>0.001</td>
<td>0.136</td>
<td>0.138</td>
<td>0.0</td>
<td>0.0</td>
<td>855.0</td>
<td>855.0</td>
<td>855.0</td>
<td>1186.0</td>
<td>1.0</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div id="cell-66" class="cell" data-execution_count="36">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb49-1">pm.plot_posterior(trace[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'variance_of_distance'</span>])</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="36">
<pre><code>array([&lt;matplotlib.axes._subplots.AxesSubplot object at 0x7fdff74693c8&gt;],
      dtype=object)</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://shubhamg.in/posts/2020-03-12-tutorial_files/figure-html/cell-37-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-67" class="cell" data-execution_count="37">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb51-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> model:</span>
<span id="cb51-2">    distance_posterior <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.sample_posterior_predictive(trace)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>100%|██████████| 4000/4000 [00:04&lt;00:00, 846.25it/s]</code></pre>
</div>
</div>
<div id="cell-68" class="cell" data-execution_count="38">
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb53-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> calculate_prob_distance(angle, distance, ls):</span>
<span id="cb53-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb53-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Calculate the probability the ball will land inside the hole</span></span>
<span id="cb53-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    given the variance in angle and distance.</span></span>
<span id="cb53-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb53-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span><span class="al" style="color: #AD0000;
background-color: null;
font-style: inherit;">NOTE</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">: Adapted from Colin Carroll's Blog.</span></span>
<span id="cb53-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb53-8">    norm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> scipy.stats.norm(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb53-9">    prob_angle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> norm.cdf(</span>
<span id="cb53-10">        np.arcsin((cup_radius <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> ball_radius) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> ls) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> angle) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb53-11">    prob_distance_one <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> norm.cdf(</span>
<span id="cb53-12">        (DISTANCE_TOLERANCE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> OVERSHOT) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> ((ls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> OVERSHOT) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> distance)</span>
<span id="cb53-13">    )</span>
<span id="cb53-14">    prob_distance_two <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> norm.cdf(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>OVERSHOT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> ((ls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> OVERSHOT) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> distance))</span>
<span id="cb53-15">    prob_distance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> prob_distance_one <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> prob_distance_two</span>
<span id="cb53-16">    </span>
<span id="cb53-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> prob_angle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> prob_distance</span></code></pre></div>
</div>
<div id="cell-69" class="cell" data-execution_count="40">
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb54-1">ls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, new_df.distance.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>)</span></code></pre></div>
</div>
<div id="cell-70" class="cell" data-execution_count="41">
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb55-1">new_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'success_prob'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> new_df.success_count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> new_df.tries</span>
<span id="cb55-2">sns.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>()</span>
<span id="cb55-3">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb55-4">ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sns.scatterplot(</span>
<span id="cb55-5">    x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'distance'</span>, </span>
<span id="cb55-6">    y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'success_prob'</span>,</span>
<span id="cb55-7">    data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>new_df,</span>
<span id="cb55-8">    label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Actual'</span>, </span>
<span id="cb55-9">    s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span></span>
<span id="cb55-10">)</span>
<span id="cb55-11">sns.scatterplot(</span>
<span id="cb55-12">    x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'distance'</span>, </span>
<span id="cb55-13">    y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>new_geo_model_prob, </span>
<span id="cb55-14">    data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>new_df, </span>
<span id="cb55-15">    label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Angle only Model'</span>,</span>
<span id="cb55-16">    ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax, </span>
<span id="cb55-17">    color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span>, </span>
<span id="cb55-18">    s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb55-19">)</span>
<span id="cb55-20"></span>
<span id="cb55-21">sns.scatterplot(</span>
<span id="cb55-22">    x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'distance'</span>, </span>
<span id="cb55-23">    y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>calculate_prob_distance(</span>
<span id="cb55-24">        trace[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'angle_of_shot_radians'</span>].mean(), </span>
<span id="cb55-25">        trace[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'variance_of_distance'</span>].mean(),</span>
<span id="cb55-26">        new_df.distance</span>
<span id="cb55-27">    ), </span>
<span id="cb55-28">    data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>new_df, </span>
<span id="cb55-29">    label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Distance + Angle based Model '</span>,</span>
<span id="cb55-30">    ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax, </span>
<span id="cb55-31">    color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'black'</span>, </span>
<span id="cb55-32">    s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb55-33">)</span>
<span id="cb55-34">ax.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(</span>
<span id="cb55-35">    xlabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Distance from hole(ft)'</span>, </span>
<span id="cb55-36">    ylabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Probability of Success'</span></span>
<span id="cb55-37">)</span>
<span id="cb55-38"></span>
<span id="cb55-39">plt.setp(ax.get_legend().get_texts(), fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'25'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://shubhamg.in/posts/2020-03-12-tutorial_files/figure-html/cell-41-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>From the graph, we can conclude that:</p>
<ul>
<li>The model is good at distance lower than 10 ft and distances higher than 40ft.</li>
<li>There is some mismatch between 10ft to 40ft, but overall this is a good fit.</li>
</ul>
</section>
<section id="whats-the-point" class="level2">
<h2 class="anchored" data-anchor-id="whats-the-point">What’s the point?</h2>
<p>Using Bayesian analysis, we want to be able to quantify the unvertainity with each of our predictions. Since each prediction is a distribution, we can utilize this to see where the putts will fall if they do not fall in the hole.</p>
<div id="cell-74" class="cell" data-execution_count="42">
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb56-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> simulate_from_distance(trace, distance_to_hole, trials<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10_000</span>):</span>
<span id="cb56-2">    n_samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> trace[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'angle_of_shot_radians'</span>].shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb56-3"></span>
<span id="cb56-4">    idxs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, n_samples, trials)</span>
<span id="cb56-5">    variance_of_shot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> trace[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'angle_of_shot_radians'</span>][idxs]</span>
<span id="cb56-6">    variance_of_distance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> trace[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'variance_of_distance'</span>][idxs]</span>
<span id="cb56-7"></span>
<span id="cb56-8">    theta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.normal(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, variance_of_shot)</span>
<span id="cb56-9">    distance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.normal(distance_to_hole <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> OVERSHOT, (distance_to_hole <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> OVERSHOT) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> variance_of_distance)</span>
<span id="cb56-10"></span>
<span id="cb56-11">    final_position <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([distance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.cos(theta), distance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.sin(theta)])</span>
<span id="cb56-12"></span>
<span id="cb56-13">    made_it <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(theta) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> np.arcsin((cup_radius <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> ball_radius) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> distance_to_hole)</span>
<span id="cb56-14">    made_it <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> made_it <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (final_position[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> distance_to_hole) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (final_position[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> distance_to_hole <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> DISTANCE_TOLERANCE)</span>
<span id="cb56-15">    </span>
<span id="cb56-16">    _, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots()</span>
<span id="cb56-17"></span>
<span id="cb56-18">    ax.plot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'k.'</span>, lw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, mfc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'black'</span>, ms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">150</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> distance_to_hole)</span>
<span id="cb56-19">    ax.plot(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>final_position[:, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>made_it], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, mfc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>, ms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> distance_to_hole, mew<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)</span>
<span id="cb56-20">    ax.plot(distance_to_hole, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ko'</span>, lw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, mfc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'black'</span>, ms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">350</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> distance_to_hole)</span>
<span id="cb56-21"></span>
<span id="cb56-22">    ax.set_facecolor(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#e6ffdb"</span>)</span>
<span id="cb56-23">    ax.set_title(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Final position of </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>trials<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:,d}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> putts from </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>distance_to_hole<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">ft.</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">(</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> made_it<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>mean()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.1f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">% made)"</span>)</span>
<span id="cb56-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> ax</span>
<span id="cb56-25"></span>
<span id="cb56-26">simulate_from_distance(trace, distance_to_hole<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://shubhamg.in/posts/2020-03-12-tutorial_files/figure-html/cell-42-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>We’ve just seen how incorporate subjective knowledge in our models and help them fit cases that are specific to our use-case.</p>
<p>References:</p>
<ul>
<li>This is heavily inspired by Colin Caroll’s Blog present <a href="https://nbviewer.jupyter.org/github/pymc-devs/pymc3/blob/master/docs/source/notebooks/putting_workflow.ipynb">here</a></li>
<li>The crux of this post is based on Dr.&nbsp;Gelman’s case study present <a href="https://mc-stan.org/users/documentation/case-studies/golf.html">here</a>.</li>
</ul>


</section>

 ]]></description>
  <category>jupyter</category>
  <category>bayesian</category>
  <category>golf_putting</category>
  <guid>https://shubhamg.in/posts/2020-03-12-tutorial.html</guid>
  <pubDate>Thu, 12 Mar 2020 00:00:00 GMT</pubDate>
</item>
<item>
  <title></title>
  <link>https://shubhamg.in/posts/2020-01-14-first-post.html</link>
  <description><![CDATA[ 






<section id="yo" class="level1">
<h1>Yo!</h1>
<p>Super excited to <strong>finally</strong> get my own blog. Hope to write out those long pending articles ASAP now. Stay tuned!</p>


</section>

 ]]></description>
  <category>intro</category>
  <guid>https://shubhamg.in/posts/2020-01-14-first-post.html</guid>
  <pubDate>Tue, 14 Jan 2020 00:00:00 GMT</pubDate>
</item>
</channel>
</rss>
